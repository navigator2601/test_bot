# –§–∞–π–ª: database/db_search_functions.py
# –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö, —â–æ —Å—Ç–æ—Å—É—é—Ç—å—Å—è –ø–æ—à—É–∫—É —Ç–∞ –∫–∞—Ç–∞–ª–æ–≥—É.

import asyncpg
import logging
from typing import List, Dict

logger = logging.getLogger(__name__)

async def find_in_database(db_pool: asyncpg.Pool, query_text: str) -> List[Dict]:
    """
    –í–∏–∫–æ–Ω—É—î —Ç–æ—á–Ω–∏–π –ø–æ—à—É–∫ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö, –¥–µ –≤—Å—ñ —Å–ª–æ–≤–∞ –∑–∞–ø–∏—Ç—É –º–∞—é—Ç—å
    –±—É—Ç–∏ –≤ –æ–¥–Ω–æ–º—É –ø–æ–ª—ñ.
    """
    query_file_path = "database/sql_queries/search_query.sql"
    try:
        with open(query_file_path, 'r', encoding='utf-8') as f:
            sql_query = f.read()
    except FileNotFoundError:
        logger.error(f"SQL-—Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —à–ª—è—Ö–æ–º: {query_file_path}")
        return []

    try:
        search_words = [word.lower() for word in query_text.split()]
        params = [f'%{word}%' for word in search_words]

        async with db_pool.acquire() as connection:
            results = await connection.fetch(sql_query, *params)
            return [dict(row) for row in results]
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ SQL-–∑–∞–ø–∏—Ç—É –ø–æ—à—É–∫—É: {e}", exc_info=True)
        return []

def format_search_results(results: List[Dict]) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —É –∑—Ä—É—á–Ω–∏–π –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç.
    """
    if not results:
        return "–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        
    formatted_text = ""
    for idx, item in enumerate(results, 1):
        formatted_text += (
            f"**{idx}.** **{item.get('–ú–æ–¥–µ–ª—å', 'N/A')}**\n"
            f"   - –¢–∏–ø: `{item.get('–¢–∏–ø –∫–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä–∞', 'N/A')}`\n"
            f"   - –ë—Ä–µ–Ω–¥: `{item.get('–ë—Ä–µ–Ω–¥', 'N/A')}`\n"
            f"   - –û—Ö–æ–ª–æ–¥–∂–µ–Ω–Ω—è: `{item.get('–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å –æ—Ö–æ–ª–æ–¥–∂–µ–Ω–Ω—è', 'N/A')}` –í—Ç\n"
            f"   - –û–±—ñ–≥—Ä—ñ–≤: `{item.get('–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å –æ–±—ñ–≥—Ä—ñ–≤—É', 'N/A')}` –í—Ç\n"
            f"   - –†–æ–∑–º—ñ—Ä —Ç—Ä—É–±: `{item.get('–†–æ–∑–º—ñ—Ä–∏ —Ç—Ä—É–±', 'N/A')}`\n"
            f"   - –§—Ä–µ–æ–Ω: `{item.get('–¢–∏–ø —Ñ—Ä–µ–æ–Ω—É', 'N/A')}`\n"
            f"   - –ó–∞–ø—Ä–∞–≤–∫–∞: `{item.get('–ó–∞–ø—Ä–∞–≤–∫–∞ —Ñ—Ä–µ–æ–Ω–æ–º', 'N/A')}` –≥\n\n"
        )
    return formatted_text

async def get_brands_with_model_count(db_pool: asyncpg.Pool) -> List[Dict]:
    """
    –í–∏–∫–æ–Ω—É—î SQL-–∑–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –±—Ä–µ–Ω–¥—ñ–≤ –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –º–æ–¥–µ–ª–µ–π.
    """
    query_file_path = "database/sql_queries/get_brands_with_model_count.sql"
    try:
        with open(query_file_path, 'r', encoding='utf-8') as f:
            sql_query = f.read()
    except FileNotFoundError:
        logger.error(f"SQL-—Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —à–ª—è—Ö–æ–º: {query_file_path}")
        return []

    async with db_pool.acquire() as conn:
        results = await conn.fetch(sql_query)
        return [dict(r) for r in results]

async def get_models_by_brand(db_pool: asyncpg.Pool, brand_id: int) -> List[Dict]:
    """
    –í–∏–∫–æ–Ω—É—î SQL-–∑–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –º–æ–¥–µ–ª–µ–π –∑–∞ ID –±—Ä–µ–Ω–¥—É.
    """
    query_file_path = "database/sql_queries/get_models_by_brand.sql"
    try:
        with open(query_file_path, 'r', encoding='utf-8') as f:
            sql_query = f.read()
    except FileNotFoundError:
        logger.error(f"SQL-—Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —à–ª—è—Ö–æ–º: {query_file_path}")
        return []
    
    async with db_pool.acquire() as conn:
        try:
            results = await conn.fetch(sql_query, brand_id)
            return [dict(r) for r in results]
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ SQL-–∑–∞–ø–∏—Ç—É: {e}", exc_info=True)
            return []

async def get_model_details_by_id(db_pool: asyncpg.Pool, model_id: int) -> Dict | None:
    """
    –í–∏–∫–æ–Ω—É—î SQL-–∑–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –º–æ–¥–µ–ª—å –∑–∞ —ó—ó ID.
    """
    query_file_path = "database/sql_queries/get_model_details_by_id.sql"
    try:
        with open(query_file_path, 'r', encoding='utf-8') as f:
            sql_query = f.read()
    except FileNotFoundError:
        logger.error(f"SQL-—Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —à–ª—è—Ö–æ–º: {query_file_path}")
        return None

    async with db_pool.acquire() as conn:
        try:
            result = await conn.fetchrow(sql_query, model_id)
            return dict(result) if result else None
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–µ—Ç–∞–ª–µ–π –º–æ–¥–µ–ª—ñ –∑ ID {model_id}: {e}", exc_info=True)
            return None

def format_model_details(model_details: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç—É—î —Å–ª–æ–≤–Ω–∏–∫ –∑ –¥–µ—Ç–∞–ª—è–º–∏ –º–æ–¥–µ–ª—ñ –≤ –∑—Ä—É—á–Ω–∏–π –¥–ª—è —á–∏—Ç–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç.
    """
    if not model_details:
        return "–î–µ—Ç–∞–ª—ñ –º–æ–¥–µ–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    
    text = (
        f"<b>üîç –î–µ—Ç–∞–ª—ñ –º–æ–¥–µ–ª—ñ {model_details.get('brand_name', 'N/A')} {model_details.get('model_name', 'N/A')}</b>\n\n"
        f"‚ö°Ô∏è <b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>\n"
        f"‚ùÑÔ∏è –û—Ö–æ–ª–æ–¥–∂–µ–Ω–Ω—è: {model_details.get('cooling_capacity', 'N/A')} –í—Ç\n"
        f"üî• –û–±—ñ–≥—Ä—ñ–≤: {model_details.get('heating_capacity', 'N/A')} –í—Ç\n"
        f"üìè –†–æ–∑–º—ñ—Ä–∏ —Ç—Ä—É–±: {model_details.get('pipe_specs', 'N/A')}\n"
        f"üß™ –¢–∏–ø —Ñ—Ä–µ–æ–Ω—É: {model_details.get('refrigerant_type', 'N/A')}\n"
        f"‚öñÔ∏è –ó–∞–ø—Ä–∞–≤–∫–∞ —Ñ—Ä–µ–æ–Ω—É: {model_details.get('refrigerant_charge', 'N/A')} –≥\n"
    )
    return text