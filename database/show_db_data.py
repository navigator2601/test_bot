import psycopg2

def get_schemas(cur):
    cur.execute("""
        SELECT schema_name
        FROM information_schema.schemata
        WHERE schema_name NOT IN ('pg_catalog', 'information_schema', 'pg_toast')
        ORDER BY schema_name
    """)
    return [row[0] for row in cur.fetchall()]

def get_tables(cur, schema):
    cur.execute("""
        SELECT tablename
        FROM pg_catalog.pg_tables
        WHERE schemaname = %s
    """, (schema,))
    return [row[0] for row in cur.fetchall()]

def get_table_comment(cur, schema, table):
    cur.execute("""
        SELECT obj_description(c.oid)
        FROM pg_class c
        WHERE c.relname = %s
          AND c.relnamespace = (
            SELECT oid FROM pg_namespace WHERE nspname = %s
          )
    """, (table, schema))
    result = cur.fetchone()
    return result[0] if result and result[0] else None

def show_tables_data(cur, schema, tables):
    for table in tables:
        # –í–∏—Ç—è–≥—É—î–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ —Ç–∞–±–ª–∏—Ü—ñ
        comment = get_table_comment(cur, schema, table)
        print(f"\n–î–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ: {schema}.{table}")
        if comment:
            print(f"–ö–æ–º–µ–Ω—Ç–∞—Ä: {comment}")
        else:
            print("–ö–æ–º–µ–Ω—Ç–∞—Ä: (–Ω–µ–º–∞—î ‚Äî —Ç–≤—ñ–π —à–∞–Ω—Å –¥–æ–¥–∞—Ç–∏ –ª–µ–≥–µ–Ω–¥—É –¥–ª—è –∫–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä—ñ–≤!)")
        cur.execute(f'SELECT * FROM "{schema}"."{table}"')
        rows = cur.fetchall()
        colnames = [desc[0] for desc in cur.description]
        print(" | ".join(colnames))
        if rows:
            for row in rows:
                print(" | ".join(str(cell) for cell in row))
        else:
            print("–¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è, –∞–ª–µ —Ü–µ –Ω–µ –±—ñ–¥–∞ ‚Äî —î –∫—É–¥–∏ —Å–∫–ª–∞–¥–∞—Ç–∏ –∫–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä–∏! üòÑ")

def main():
    conn = psycopg2.connect("postgresql://kondiki:avrora@localhost:5432/base_bot")
    cur = conn.cursor()

    schemas = get_schemas(cur)
    print("–î–æ—Å—Ç—É–ø–Ω—ñ —Å—Ö–µ–º–∏ —É –±–∞–∑—ñ:")
    for idx, schema in enumerate(schemas):
        print(f"{idx + 1}. {schema}")
    print("\n–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∞–±–æ –Ω–∞–∑–≤—É —Å—Ö–µ–º–∏, –¥–∞–Ω—ñ –∑ —è–∫–æ—ó —Ö–æ—á–µ—à –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏:")
    selected_input = input("‚Üí ").strip()

    # –î–æ–∑–≤–æ–ª—è—î–º–æ –≤–∏–±—ñ—Ä –∑–∞ –Ω–æ–º–µ—Ä–æ–º –∞–±–æ –Ω–∞–∑–≤–æ—é
    if selected_input.isdigit():
        idx = int(selected_input) - 1
        if 0 <= idx < len(schemas):
            selected_schema = schemas[idx]
        else:
            print("–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ–º–∞! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ —ñ –Ω–µ –∑–∞–±—É–¥—å –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä üòâ")
            cur.close()
            conn.close()
            return
    else:
        selected_schema = selected_input

    if selected_schema not in schemas:
        print("–¢–∞–∫–æ—ó —Å—Ö–µ–º–∏ –Ω–µ–º–∞! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ —ñ –Ω–µ –∑–∞–±—É–¥—å –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä üòâ")
    else:
        tables = get_tables(cur, selected_schema)
        if not tables:
            print("–£ —Ü—ñ–π —Å—Ö–µ–º—ñ —Ç–∞–±–ª–∏—Ü—å –Ω–µ–º–∞. –ú–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –ø–µ—Ä–µ–∫—É—Ä! üòÑ")
        else:
            show_tables_data(cur, selected_schema, tables)

    cur.close()
    conn.close()

if __name__ == "__main__":
    main()