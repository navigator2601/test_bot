# keyboards/admin_keyboard.py
import math
from typing import Optional
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from common.constants import ACCESS_LEVEL_BUTTONS
from keyboards.callback_factories import AdminCallback, UserActionCallback, AccessLevelCallback, ChatListCallback, ChatInfoCallback

def get_admin_main_keyboard() -> InlineKeyboardMarkup:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –≥–æ–ª–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏."""
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ InlineKeyboardBuilder –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—ñ
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text="üë• –Æ–∑–µ—Ä-–º–∞—Ç—Ä–∏—Ü—è ¬∑ –†–µ–¥–∞–∫—Ç–æ—Ä –¥–æ—Å—Ç—É–ø—É",
        callback_data=AdminCallback(action="show_users").pack()
    ))
    builder.row(InlineKeyboardButton(
        text="üîê TeleKey ¬∑ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è API-–∑–≤‚Äô—è–∑–∫—É",
        callback_data=AdminCallback(action="telethon_auth").pack()
    ))
    builder.row(InlineKeyboardButton(
        text="üí¨ –ß–∞—Ç-–º–∞—Ç—Ä–∏—Ü—è ¬∑ –ü–µ—Ä–µ–≥–ª—è–¥ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–æ–Ω",
        callback_data=AdminCallback(action="chat_matrix").pack()
    ))
    builder.row(InlineKeyboardButton(
        text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É–≤–∞–Ω–Ω—è",
        callback_data=AdminCallback(action="close_admin_panel").pack()
    ))
    return builder.as_markup()

def get_users_list_keyboard(users: list, current_page: int, users_per_page: int) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑—ñ —Å–ø–∏—Å–∫–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó."""
    builder = InlineKeyboardBuilder()

    start_index = current_page * users_per_page
    end_index = start_index + users_per_page
    users_on_page = users[start_index:end_index]

    for user in users_on_page:
        user_id = user.get('id')
        if user_id is not None:
            first_name = user.get('first_name', '')
            last_name = user.get('last_name', '')
            username = user.get('username', '')
            access_level = user.get('access_level', 0)
            display_name = f"{first_name} {last_name}".strip()
            if not display_name:
                display_name = username or f"ID: {user_id}"
            button_text = f"{display_name} (–†—ñ–≤–µ–Ω—å: {access_level})"
            builder.row(InlineKeyboardButton(
                text=button_text,
                callback_data=AdminCallback(action="select_user", user_id=user_id).pack()
            ))

    total_pages = math.ceil(len(users) / users_per_page) if len(users) > 0 else 1

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    pagination_buttons = []
    if current_page > 0:
        pagination_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è",
                callback_data=AdminCallback(action="show_users", page=current_page - 1).pack()
            )
        )
    pagination_buttons.append(
        InlineKeyboardButton(
            text=f"{current_page + 1}/{total_pages}",
            callback_data="users_current_page_info" # –¶—é –∫–Ω–æ–ø–∫—É –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–±—Ä–æ–±–ª—è—Ç–∏ —è–∫ CallbackData
        )
    )
    if current_page < total_pages - 1:
        pagination_buttons.append(
            InlineKeyboardButton(
                text="‚û°Ô∏è",
                callback_data=AdminCallback(action="show_users", page=current_page + 1).pack()
            )
        )
    if pagination_buttons: # –î–æ–¥–∞—î–º–æ —Ä—è–¥–æ–∫ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –∫–Ω–æ–ø–∫–∏
        builder.row(*pagination_buttons)
        
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é",
            callback_data=AdminCallback(action="cancel_admin_action").pack()
        )
    )
    return builder.as_markup()

def get_user_actions_keyboard(is_authorized: bool, current_access_level: int, user_id_to_manage: int) -> InlineKeyboardMarkup:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –¥—ñ–π –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º."""
    builder = InlineKeyboardBuilder()
    if is_authorized:
        builder.row(InlineKeyboardButton(
            text="–î–µ–∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏ ‚ùå",
            callback_data=UserActionCallback(action="unauthorize", target_user_id=user_id_to_manage).pack()
        ))
    else:
        builder.row(InlineKeyboardButton(
            text="–ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏ ‚úÖ",
            callback_data=UserActionCallback(action="authorize", target_user_id=user_id_to_manage).pack()
        ))
    builder.row(InlineKeyboardButton(
        text=f"–ó–º—ñ–Ω–∏—Ç–∏ —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É ({current_access_level}) ‚¨ÜÔ∏è",
        callback_data=AdminCallback(action="change_access_level", user_id=user_id_to_manage).pack()
    ))
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    builder.row(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤",
        callback_data=AdminCallback(action="show_users").pack()
    ))
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é
    builder.row(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é",
        callback_data=AdminCallback(action="cancel_admin_action").pack()
    ))
    return builder.as_markup()

def get_confirm_action_keyboard(action: str, user_id: int, level: Optional[int] = None) -> InlineKeyboardMarkup:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥—ñ—ó.
    action: —Ç–∏–ø –¥—ñ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "authorize", "unauthorize", "set_level")
    user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ —Å—Ç–æ—Å—É—î—Ç—å—Å—è –¥—ñ—è
    level: –Ω–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É, —è–∫—â–æ –¥—ñ—è "set_level"
    """
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ ‚úÖ",
        callback_data=UserActionCallback(action=f"confirm_{action}", target_user_id=user_id, level=level).pack()
    ))
    # –ó–º—ñ–Ω–µ–Ω–æ: –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é –¥—ñ–π –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –∞–¥–º—ñ–Ω-–¥—ñ—ó
    builder.row(InlineKeyboardButton(
        text="–°–∫–∞—Å—É–≤–∞—Ç–∏ ‚ùå",
        callback_data=AdminCallback(action="select_user", user_id=user_id).pack() # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    ))
    return builder.as_markup()

def get_access_level_keyboard(user_id_to_manage: int) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É."""
    builder = InlineKeyboardBuilder()
    for level, name in ACCESS_LEVEL_BUTTONS:
        builder.button(
            text=f"{name}",
            callback_data=AccessLevelCallback(action="set_level", level=level, target_user_id=user_id_to_manage).pack()
        )
    builder.adjust(1) # –†–æ–∑–º—ñ—â—É—î–º–æ –ø–æ 1 –∫–Ω–æ–ø—Ü—ñ –≤ —Ä—è–¥–∫—É –¥–ª—è –∫—Ä–∞—â–æ—ó —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
    builder.row(
        InlineKeyboardButton(
            text="–°–∫–∞—Å—É–≤–∞—Ç–∏ ‚ùå",
            callback_data=AdminCallback(action="select_user", user_id=user_id_to_manage).pack()
        )
    )
    return builder.as_markup()

def get_telethon_actions_keyboard() -> InlineKeyboardMarkup:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –¥—ñ–π Telethon (–ë–ï–ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó, –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∫–∞–Ω–∞–ª—É —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–µ—Å—ñ—ó)."""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text="–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å Telethon üëÅÔ∏è",
        callback_data=AdminCallback(action="telethon_check_status").pack()
    ))
    builder.row(InlineKeyboardButton(
        text="–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ üÜî",
        callback_data=AdminCallback(action="telethon_get_user_info").pack()
    ))
    builder.row(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é",
        callback_data=AdminCallback(action="cancel_admin_action").pack()
    ))
    return builder.as_markup()

def get_telethon_code_retry_keyboard() -> InlineKeyboardMarkup:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –∞–±–æ –∑–∞–ø–∏—Ç—É –Ω–æ–≤–æ–≥–æ –∫–æ–¥—É
    –≤ –ø—Ä–æ—Ü–µ—Å—ñ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó Telethon.
    """
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text="üîÑ –ó–∞–ø–∏—Ç–∞—Ç–∏ –Ω–æ–≤–∏–π –∫–æ–¥",
        callback_data=AdminCallback(action="telethon_resend_code").pack()
    ))
    builder.row(InlineKeyboardButton(
        text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é",
        callback_data=AdminCallback(action="telethon_cancel_auth").pack()
    ))
    return builder.as_markup()

def get_cancel_keyboard() -> InlineKeyboardMarkup:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –æ–¥–Ω—ñ—î—é –∫–Ω–æ–ø–∫–æ—é '–°–∫–∞—Å—É–≤–∞—Ç–∏', –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –∞–¥–º—ñ–Ω-–º–µ–Ω—é."""
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
        callback_data=AdminCallback(action="cancel_admin_action").pack()
    ))
    return builder.as_markup()

def get_chat_matrix_keyboard() -> InlineKeyboardMarkup:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —á–∞—Ç-–º–∞—Ç—Ä–∏—Ü–µ—é.
    """
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="üìú –°–ø–∏—Å–æ–∫ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö —á–∞—Ç—ñ–≤",
            callback_data=AdminCallback(action="view_allowed_chats").pack()
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üîç –ü–æ—à—É–∫ —á–∞—Ç—ñ–≤",
            callback_data=AdminCallback(action="search_chats_admin").pack()
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é",
            callback_data=AdminCallback(action="cancel_admin_action").pack()
        )
    )
    return builder.as_markup()

# –î–æ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –¥–æ –ß–∞—Ç-–º–∞—Ç—Ä–∏—Ü—ñ" (–≤–∏–Ω–µ—Å–µ–Ω–æ –∑ handler'—ñ–≤)
def get_back_to_chat_matrix_keyboard() -> InlineKeyboardMarkup:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ß–∞—Ç-–º–∞—Ç—Ä–∏—Ü—ñ".
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑ —Ä—ñ–∑–Ω–∏—Ö –ø—ñ–¥–º–µ–Ω—é –ß–∞—Ç-–º–∞—Ç—Ä–∏—Ü—ñ.
    """
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –ß–∞—Ç-–º–∞—Ç—Ä–∏—Ü—ñ",
            callback_data=AdminCallback(action="chat_matrix").pack()
        )
    )
    return builder.as_markup()


# -----------------------------------------------------------
# –ù–û–í–Ü –ö–õ–ê–í–Ü–ê–¢–£–†–ò –î–õ–Ø –ß–ê–¢-–ú–ê–¢–†–ò–¶–Ü
# -----------------------------------------------------------

def get_search_results_keyboard(chats: list) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    for chat in chats:
        status_emoji = "‚úÖ" if chat['is_added'] else "‚ûï"
        button_text = f"{status_emoji} {chat['chat_title']}"
        builder.row(InlineKeyboardButton(
            text=button_text,
            callback_data=ChatListCallback(action="view_chat_details", chat_id=chat['chat_id'], from_search=True).pack() # –î–æ–¥–∞—î–º–æ from_search=True
        ))
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –ß–∞—Ç-–º–∞—Ç—Ä–∏—Ü—ñ
    builder.row(InlineKeyboardButton(
        text="üîô –í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –ß–∞—Ç-–º–∞—Ç—Ä–∏—Ü—ñ",
        callback_data=AdminCallback(action="chat_matrix").pack()
    ))
    return builder.as_markup()

def get_allowed_chats_list_keyboard(allowed_chats: list, current_page: int, chats_per_page: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    total_chats = len(allowed_chats)
    start_index = current_page * chats_per_page
    end_index = min(start_index + chats_per_page, total_chats)
    
    chats_on_page = allowed_chats[start_index:end_index]

    # –í–∏–¥–∞–ª–µ–Ω–æ –ª–æ–≥—ñ–∫—É, —è–∫–∞ —Å–∫–∏–¥–∞–ª–∞ current_page –Ω–∞ 0, —Ü–µ –º–∞—î –∫–µ—Ä—É–≤–∞—Ç–∏—Å—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–º.
    # –Ø–∫—â–æ —á–∞—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ –Ω–µ–º–∞—î, —Ü–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –º–∏ –Ω–µ –ø–æ–≤–∏–Ω–Ω—ñ –±—É–ª–∏ —Ç—É–¥–∏ –ø–æ—Ç—Ä–∞–ø–∏—Ç–∏ –∞–±–æ —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.

    for chat in chats_on_page:
        builder.row(InlineKeyboardButton(
            text=chat['chat_title'],
            callback_data=ChatListCallback(action="view_chat_details", chat_id=chat['chat_id'], page=current_page, from_search=False).pack() # –î–æ–¥–∞—î–º–æ from_search=False
        ))

    navigation_buttons = []
    if current_page > 0:
        navigation_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è", callback_data=ChatListCallback(action="paginate_allowed_chats", page=current_page - 1).pack())
        )
    # –ö–Ω–æ–ø–∫–∞ –∑ –ø–æ—Ç–æ—á–Ω–æ—é —Å—Ç–æ—Ä—ñ–Ω–∫–æ—é (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
    if total_chats > 0: # –ü–æ–∫–∞–∑—É—î–º–æ –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î —á–∞—Ç–∏
        total_pages = math.ceil(total_chats / chats_per_page)
        navigation_buttons.append(
            InlineKeyboardButton(text=f"{current_page + 1}/{total_pages}", callback_data="current_page_info_allowed")
        )

    if end_index < total_chats:
        navigation_buttons.append(
            InlineKeyboardButton(text="–ù–∞—Å—Ç—É–ø–Ω–∞ ‚û°Ô∏è", callback_data=ChatListCallback(action="paginate_allowed_chats", page=current_page + 1).pack())
        )
    
    if navigation_buttons:
        builder.row(*navigation_buttons)

    builder.row(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é –ß–∞—Ç-–º–∞—Ç—Ä–∏—Ü—ñ", # –ë—ñ–ª—å—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –Ω–∞–∑–≤–∞
        callback_data=AdminCallback(action="chat_matrix").pack()
    ))

    return builder.as_markup()

def get_chat_info_keyboard(chat_id: int, is_added: bool, current_page: int, is_search_context: bool = False) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π —á–∞—Ç—É, –∑ –æ–ø—Ü—ñ—è–º–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è.
    is_search_context: True, —è–∫—â–æ –º–∏ –ø—Ä–∏–π—à–ª–∏ —Å—é–¥–∏ –∑ –ø–æ—à—É–∫—É, False, —è–∫—â–æ –∑—ñ —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö.
    """
    builder = InlineKeyboardBuilder()
    if not is_added:
        builder.row(InlineKeyboardButton(text="–î–æ–¥–∞—Ç–∏ –¥–æ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö",
                                         callback_data=ChatInfoCallback(action="add_allowed_chat_from_details", chat_id=chat_id, page=current_page, from_search=is_search_context).pack()))
    else:
        builder.row(InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ —á–∞—Ç",
                                         callback_data=ChatInfoCallback(action="delete_allowed_chat", chat_id=chat_id, page=current_page, from_search=is_search_context).pack()))
    
    if is_search_context:
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Å—Ç–∞–Ω—É –ø–æ—à—É–∫—É (—è–∫—â–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ), –∞–±–æ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –ß–∞—Ç-–º–∞—Ç—Ä–∏—Ü—ñ
        # –Ø–∫—â–æ –º–∏ —Ö–æ—á–µ–º–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É, —Ç–æ —Ç—Ä–µ–±–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç
        # –ê–ª–µ –ø–æ–∫–∏ —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ —Å—Ç–∞—Ä—Ç—É –ø–æ—à—É–∫—É
        builder.row(InlineKeyboardButton(text="üîô –í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –ß–∞—Ç-–º–∞—Ç—Ä–∏—Ü—ñ", # –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –ß–∞—Ç-–º–∞—Ç—Ä–∏—Ü—ñ
                                         callback_data=AdminCallback(action="chat_matrix").pack()))
    else:
        builder.row(InlineKeyboardButton(text="üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Å–ø–∏—Å–∫—É —á–∞—Ç—ñ–≤", # –ë—ñ–ª—å—à –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –Ω–∞–∑–≤–∞
                                         callback_data=ChatListCallback(action="paginate_allowed_chats", page=current_page).pack()))
    
    return builder.as_markup()

def get_confirm_delete_chat_keyboard(chat_id: int, current_page: int, from_search: bool = False) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —á–∞—Ç—É.
    from_search: True, —è–∫—â–æ –≤–∏–¥–∞–ª—è—î–º–æ –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –ø–æ—à—É–∫—É.
    """
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è",
                             callback_data=ChatInfoCallback(action="confirm_delete_allowed_chat", chat_id=chat_id, page=current_page, from_search=from_search).pack())
    )
    builder.row(
        InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏",
                             callback_data=ChatInfoCallback(action="back_to_chat_info", chat_id=chat_id, page=current_page, from_search=from_search).pack())
    )
    return builder.as_markup()