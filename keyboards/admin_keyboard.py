# keyboards/admin_keyboard.py

import math
from typing import Optional
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from common.constants import ACCESS_LEVEL_BUTTONS
from keyboards.callback_factories import AdminCallback, UserActionCallback, AccessLevelCallback

def get_admin_main_keyboard() -> InlineKeyboardMarkup:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –≥–æ–ª–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏."""
    buttons = [
        [InlineKeyboardButton(
            text="üë• –Æ–∑–µ—Ä-–º–∞—Ç—Ä–∏—Ü—è ¬∑ –†–µ–¥–∞–∫—Ç–æ—Ä –¥–æ—Å—Ç—É–ø—É",
            callback_data=AdminCallback(action="show_users").pack()
        )],
        [InlineKeyboardButton(
            text="üì° ReLink ¬∑ –°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª—É –∑–≤'—è–∑–∫—É",
            callback_data=AdminCallback(action="connection_status").pack()
        )],
        [InlineKeyboardButton(
            text="üîê TeleKey ¬∑ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è API-–∑–≤‚Äô—è–∑–∫—É",
            callback_data=AdminCallback(action="telethon_auth").pack()
        )],
        [InlineKeyboardButton(
            text="üí¨ –ß–∞—Ç-–º–∞—Ç—Ä–∏—Ü—è ¬∑ –ü–µ—Ä–µ–≥–ª—è–¥ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–æ–Ω",
            callback_data=AdminCallback(action="telethon_chats").pack()
        )],
        [InlineKeyboardButton(
            text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É–≤–∞–Ω–Ω—è",
            callback_data=AdminCallback(action="close_admin_panel").pack()
        )]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_users_list_keyboard(users: list, current_page: int, users_per_page: int) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑—ñ —Å–ø–∏—Å–∫–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó."""
    keyboard = []

    start_index = current_page * users_per_page
    end_index = start_index + users_per_page
    users_on_page = users[start_index:end_index]

    for user in users_on_page:
        user_id = user.get('id')
        if user_id is not None:
            first_name = user.get('first_name', '')
            last_name = user.get('last_name', '')
            username = user.get('username', '')
            access_level = user.get('access_level', 0)
            display_name = f"{first_name} {last_name}".strip()
            if not display_name:
                display_name = username or f"ID: {user_id}"
            button_text = f"{display_name} (–†—ñ–≤–µ–Ω—å: {access_level})"
            # –ö–Ω–æ–ø–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ AdminCallback
            keyboard.append([InlineKeyboardButton(
                text=button_text,
                callback_data=AdminCallback(action="select_user", user_id=user_id).pack()
            )])

    total_pages = math.ceil(len(users) / users_per_page) if len(users) > 0 else 1

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    pagination_buttons = []
    if current_page > 0:
        pagination_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è",
                callback_data=AdminCallback(action="show_users", page=current_page - 1).pack()
            )
        )
    pagination_buttons.append(
        InlineKeyboardButton(
            text=f"{current_page + 1}/{total_pages}",
            callback_data="users_current_page_info" # –¶—é –∫–Ω–æ–ø–∫—É –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–±—Ä–æ–±–ª—è—Ç–∏ —è–∫ CallbackData, –≤–æ–Ω–∞ –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î —ñ–Ω—Ñ–æ
        )
    )
    if current_page < total_pages - 1:
        pagination_buttons.append(
            InlineKeyboardButton(
                text="‚û°Ô∏è",
                callback_data=AdminCallback(action="show_users", page=current_page + 1).pack()
            )
        )
    keyboard.append(pagination_buttons)
    keyboard.append([
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é",
            callback_data=AdminCallback(action="cancel_admin_action").pack()
        )
    ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_user_actions_keyboard(is_authorized: bool, current_access_level: int, user_id_to_manage: int) -> InlineKeyboardMarkup:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –¥—ñ–π –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º."""
    buttons = []
    if is_authorized:
        buttons.append([InlineKeyboardButton(
            text="–î–µ–∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏ ‚ùå",
            callback_data=UserActionCallback(action="unauthorize", user_id=user_id_to_manage).pack()
        )])
    else:
        buttons.append([InlineKeyboardButton(
            text="–ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏ ‚úÖ",
            callback_data=UserActionCallback(action="authorize", user_id=user_id_to_manage).pack()
        )])
    buttons.append([InlineKeyboardButton(
        text=f"–ó–º—ñ–Ω–∏—Ç–∏ —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É ({current_access_level}) ‚¨ÜÔ∏è",
        callback_data=AdminCallback(action="change_access_level", user_id=user_id_to_manage).pack()
    )])
    buttons.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤",
        callback_data=AdminCallback(action="show_users").pack()
    )])
    buttons.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é",
        callback_data=AdminCallback(action="cancel_admin_action").pack()
    )])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_confirm_action_keyboard(action: str, user_id: int, level: Optional[int] = None) -> InlineKeyboardMarkup:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥—ñ—ó.
    action: —Ç–∏–ø –¥—ñ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "authorize", "unauthorize", "set_level")
    user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ —Å—Ç–æ—Å—É—î—Ç—å—Å—è –¥—ñ—è
    level: –Ω–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É, —è–∫—â–æ –¥—ñ—è "set_level"
    """
    buttons = [
        [InlineKeyboardButton(
            text="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ ‚úÖ",
            callback_data=UserActionCallback(action=f"confirm_{action}", user_id=user_id, level=level).pack()
        )],
        [InlineKeyboardButton(
            text="–°–∫–∞—Å—É–≤–∞—Ç–∏ ‚ùå",
            callback_data=AdminCallback(action="cancel_action").pack()
        )]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_access_level_keyboard(user_id_to_manage: int) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É."""
    buttons_flat = []
    for level, name in ACCESS_LEVEL_BUTTONS:
        buttons_flat.append(
            InlineKeyboardButton(
                text=f"{name}",
                callback_data=AccessLevelCallback(level=level, user_id=user_id_to_manage).pack()
            )
        )
    keyboard = [buttons_flat[i:i + 2] for i in range(0, len(buttons_flat), 2)]
    keyboard.append([InlineKeyboardButton(
        text="–°–∫–∞—Å—É–≤–∞—Ç–∏ ‚ùå",
        callback_data=AdminCallback(action="select_user", user_id=user_id_to_manage).pack()
    )])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_telethon_actions_keyboard() -> InlineKeyboardMarkup:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –¥—ñ–π Telethon."""
    buttons = [
        [InlineKeyboardButton(
            text="–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å Telethon üëÅÔ∏è",
            callback_data=AdminCallback(action="telethon_check_status").pack()
        )],
        [InlineKeyboardButton(
            text="–ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏ Telethon üîë",
            callback_data=AdminCallback(action="telethon_start_auth").pack()
        )],
        [InlineKeyboardButton(
            text="–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ üÜî",
            callback_data=AdminCallback(action="telethon_get_user_info").pack()
        )],
        [InlineKeyboardButton(
            text="–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –∫–∞–Ω–∞–ª—É ‚ûï",
            callback_data=AdminCallback(action="telethon_join_channel").pack()
        )],
        [InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é",
            callback_data=AdminCallback(action="cancel_admin_action").pack()
        )]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)