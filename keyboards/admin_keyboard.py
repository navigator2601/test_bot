# keyboards/admin_keyboard.py
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from math import ceil

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É (–¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ)
ACCESS_LEVEL_BUTTONS = [
    (0, "üîí –ì—ñ—Å—Ç—å [Level 0]"),
    (1, "üß≠ –¢–µ—Ö–Ω–æ-–ù–∞–≤—ñ–≥–∞—Ç–æ—Ä [L1]"),
    (3, "üîß –°–∏—Å—Ç–µ–º–Ω–∏–π –Ü–Ω–∂–µ–Ω–µ—Ä [L3]"),
    (6, "üìä –ö–µ—Ä—ñ–≤–Ω–∏–∫ –ü—Ä–æ—Ç–æ–∫–æ–ª—ñ–≤ [L6]"),
    (10, "üõ°Ô∏è –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –Ø–¥—Ä–∞ [L10]"),
    (100, "üß¨ –ê—Ä—Ö—ñ—Ç–µ–∫—Ç–æ—Ä –°–∏—Å—Ç–µ–º–∏ [ROOT]"),
    (101, "üåÄ –ü—Ä–æ–±—É–¥–∂–µ–Ω–∏–π Refridex [L‚àû]")  # –¢–∞—î–º–Ω–∏–π —Ä—ñ–≤–µ–Ω—å
]

def get_admin_main_keyboard() -> InlineKeyboardMarkup:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –≥–æ–ª–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑ –æ–Ω–æ–≤–ª–µ–Ω–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏."""
    buttons = [
        [InlineKeyboardButton(text="üë• –Æ–∑–µ—Ä-–º–∞—Ç—Ä–∏—Ü—è ¬∑ –†–µ–¥–∞–∫—Ç–æ—Ä –¥–æ—Å—Ç—É–ø—É", callback_data="admin_show_users")],
        [InlineKeyboardButton(text="üì° ReLink ¬∑ –°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª—É –∑–≤'—è–∑–∫—É", callback_data="admin_connection_status")],
        [InlineKeyboardButton(text="üîê TeleKey ¬∑ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è API-–∑–≤‚Äô—è–∑–∫—É", callback_data="admin_telethon_auth")],
        [InlineKeyboardButton(text="üí¨ –ß–∞—Ç-–º–∞—Ç—Ä–∏—Ü—è ¬∑ –ü–µ—Ä–µ–≥–ª—è–¥ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–æ–Ω", callback_data="admin_telethon_chats")],
        [InlineKeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É–≤–∞–Ω–Ω—è", callback_data="close_admin_panel")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_users_list_keyboard(users: list, current_page: int, users_per_page: int) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑—ñ —Å–ø–∏—Å–∫–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –≤–∏–±–æ—Ä—É —Ç–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó."""
    keyboard = []
    
    start_index = current_page * users_per_page
    end_index = start_index + users_per_page
    users_on_page = users[start_index:end_index]

    for user in users_on_page:
        user_id = user.get('id')
        if user_id is not None:
            first_name = user.get('first_name', '')
            last_name = user.get('last_name', '')
            access_level = user.get('access_level', 0)
            
            # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∑ first_name, last_name —Ç–∞ access_level
            button_text = f"{first_name} {last_name} (–†—ñ–≤–µ–Ω—å: {access_level})"
            # Callback_data –∑–∞–ª–∏—à–∞—î–º–æ user_{user_id} –¥–ª—è –≤–∏–±–æ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f"user_{user_id}")])

    total_pages = ceil(len(users) / users_per_page) if len(users) > 0 else 1

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    pagination_buttons = []
    if current_page > 0:
        pagination_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"page_{current_page - 1}"))
    
    # –ö–Ω–æ–ø–∫–∞ –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    pagination_buttons.append(InlineKeyboardButton(text=f"{current_page + 1}/{total_pages}", callback_data="current_page_info"))
    
    if current_page < total_pages - 1:
        pagination_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"page_{current_page + 1}"))
    
    keyboard.append(pagination_buttons)
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é"
    keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é", callback_data="cancel_admin_action")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_pagination_keyboard(current_page: int, total_pages: int) -> InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.
    –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞, —è–∫—â–æ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—è –ø–æ—Ç—Ä—ñ–±–Ω–∞ –æ–∫—Ä–µ–º–æ.
    """
    buttons = []
    if current_page > 0:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{current_page - 1}"))
    
    buttons.append(InlineKeyboardButton(text=f"{current_page + 1}/{total_pages}", callback_data="current_page_display"))

    if current_page < total_pages - 1:
        buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"page_{current_page + 1}"))
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
    back_button = [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é", callback_data="cancel_admin_action")]
    
    return InlineKeyboardMarkup(inline_keyboard=[buttons, back_button])


def get_user_actions_keyboard(is_authorized: bool, current_access_level: int, user_id_to_manage: int) -> InlineKeyboardMarkup:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –¥—ñ–π –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º."""
    buttons = []
    if is_authorized:
        buttons.append([InlineKeyboardButton(text="–î–µ–∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏ ‚ùå", callback_data=f"unauthorize_user_{user_id_to_manage}")])
    else:
        buttons.append([InlineKeyboardButton(text="–ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏ ‚úÖ", callback_data=f"authorize_user_{user_id_to_manage}")])
    
    buttons.append([InlineKeyboardButton(text=f"–ó–º—ñ–Ω–∏—Ç–∏ —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É ({current_access_level}) ‚¨ÜÔ∏è", callback_data=f"change_access_level_{user_id_to_manage}")])
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", callback_data="admin_show_users")]) # –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ —Å–ø–∏—Å–∫—É
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é", callback_data="cancel_admin_action")]) # –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_confirm_action_keyboard(action_data: str) -> InlineKeyboardMarkup:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥—ñ—ó."""
    buttons = [
        [InlineKeyboardButton(text="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ ‚úÖ", callback_data=f"confirm_{action_data}")],
        [InlineKeyboardButton(text="–°–∫–∞—Å—É–≤–∞—Ç–∏ ‚ùå", callback_data="cancel_action")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_access_level_keyboard(user_id_to_manage: int) -> InlineKeyboardMarkup:
    """–ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–±–æ—Ä—É —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É."""
    buttons = []
    for level, name in ACCESS_LEVEL_BUTTONS:
        # –ó–º—ñ–Ω—é—î–º–æ —Ñ–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏: —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞ –ø–æ—á–∞—Ç–æ–∫
        buttons.append(InlineKeyboardButton(text=f"{name}", callback_data=f"set_access_level_{level}_{user_id_to_manage}"))
    
    # –†–æ–∑–±–∏–≤–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ä—è–¥–∫–∏: —Ç–µ–ø–µ—Ä –ø–æ 2
    keyboard = [buttons[i:i + 1] for i in range(0, len(buttons), 1)]
    
    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ –¥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ü–∏–º –∂–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
    keyboard.append([InlineKeyboardButton(text="–°–∫–∞—Å—É–≤–∞—Ç–∏ ‚ùå", callback_data=f"user_{user_id_to_manage}")]) 
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_telethon_actions_keyboard() -> InlineKeyboardMarkup:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –¥—ñ–π Telethon."""
    buttons = [
        [InlineKeyboardButton(text="–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å Telethon üëÅÔ∏è", callback_data="telethon_check_status")],
        [InlineKeyboardButton(text="–ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏ Telethon üîë", callback_data="telethon_start_auth")],
        [InlineKeyboardButton(text="–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ üÜî", callback_data="telethon_get_user_info")],
        [InlineKeyboardButton(text="–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –∫–∞–Ω–∞–ª—É ‚ûï", callback_data="telethon_join_channel")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é", callback_data="cancel_admin_action")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)