# keyboards/reply_keyboard.py

import math
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∫–Ω–æ–ø–æ–∫ –∑–∞ —Ä—ñ–≤–Ω—è–º–∏ –¥–æ—Å—Ç—É–ø—É
# –ö–æ–∂–µ–Ω –µ–ª–µ–º–µ–Ω—Ç –∫–æ—Ä—Ç–µ–∂—É: (–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É –¥–ª—è –∫–Ω–æ–ø–∫–∏)
BUTTONS_CONFIG = {
    0: [ # –ë–∞–∑–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É
        ("üìö –ö–∞—Ç–∞–ª–æ–≥", 0),
        ("üìñ –î–æ–≤—ñ–¥–Ω–∏–∫–∏", 0),
        ("üïµÔ∏è –ü–æ—à—É–∫", 0),
        ("‚ö†Ô∏è –ö–æ–¥–∏ –ø–æ–º–∏–ª–æ–∫", 0),
        ("üõ†Ô∏è –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó", 0),
        ("üìê –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó", 0),
    ],
    1: [ # –†—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É 1 (–¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–Ω–æ–ø–∫–∏)
        ("üìö –ö–∞—Ç–∞–ª–æ–≥", 0),
        ("üìñ –î–æ–≤—ñ–¥–Ω–∏–∫–∏", 0),
        ("üïµÔ∏è –ü–æ—à—É–∫", 0),
        ("‚ö†Ô∏è –ö–æ–¥–∏ –ø–æ–º–∏–ª–æ–∫", 0),
        ("üõ†Ô∏è –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó", 0),
        ("üìê –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó", 0),
        ("üÖ∞Ô∏è –ü–æ—à—É–∫ –º–∞–≥–∞–∑–∏–Ω—ñ–≤", 1),
        ("üîÑ –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¢–¢", 1),
        ("üìù –ó–∞–≤–¥–∞–Ω–Ω—è –≤ —Ä–æ–±–æ—Ç—ñ", 1),
        ("üßæ –ó–≤—ñ—Ç –ø–æ —Ä–æ–±–æ—Ç—ñ", 1),
    ],
    10: [ # –†—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É 10 (–∞–¥–º—ñ–Ω—Å—å–∫—ñ –∫–Ω–æ–ø–∫–∏)
        ("üìö –ö–∞—Ç–∞–ª–æ–≥", 0),
        ("üìñ –î–æ–≤—ñ–¥–Ω–∏–∫–∏", 0),
        ("üïµÔ∏è –ü–æ—à—É–∫", 0),
        ("‚ö†Ô∏è –ö–æ–¥–∏ –ø–æ–º–∏–ª–æ–∫", 0),
        ("üõ†Ô∏è –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó", 0),
        ("üìê –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó", 0),
        ("üÖ∞Ô∏è –ü–æ—à—É–∫ –º–∞–≥–∞–∑–∏–Ω—ñ–≤", 1),
        ("üîÑ –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¢–¢", 1),
        ("üìù –ó–∞–≤–¥–∞–Ω–Ω—è –≤ —Ä–æ–±–æ—Ç—ñ", 1),
        ("üßæ –ó–≤—ñ—Ç –ø–æ —Ä–æ–±–æ—Ç—ñ", 1),
        ("‚öôÔ∏è –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è", 10),
    ]
    # –î–æ–¥–∞–π—Ç–µ —ñ–Ω—à—ñ —Ä—ñ–≤–Ω—ñ –¥–æ—Å—Ç—É–ø—É —Ç–∞ —ó—Ö–Ω—ñ –∫–Ω–æ–ø–∫–∏ —Ç—É—Ç –∑–∞ –ø–æ—Ç—Ä–µ–±–æ—é
}

BUTTONS_PER_PAGE = 6 # –ú–∞–∫—Å–∏–º—É–º 3 —Ä—è–¥–∏ –ø–æ 2 –∫–Ω–æ–ø–∫–∏, —è–∫—â–æ –∫–Ω–æ–ø–æ–∫ –±—ñ–ª—å—à–µ —á–∏–º 6 —Ç–æ —Ä–æ–∑–¥—ñ–ª—è—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∏

async def get_main_menu_keyboard(access_level: int = 0, page: int = 0) -> ReplyKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä—É—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É —Ç–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó.

    :param access_level: –†—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
    :param page: –ü–æ—Ç–æ—á–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ (0-—ñ–Ω–¥–µ–∫—Å–æ–≤–∞–Ω–∞).
    :return: –û–±'—î–∫—Ç ReplyKeyboardMarkup.
    """
    builder = ReplyKeyboardBuilder()

    # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –∫–Ω–æ–ø–∫–∏, –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–ª—è –¥–∞–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–∏—à–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–ö–∞—Ç–∞–ª–æ–≥" –∑ level 0 —ñ level 1)
    unique_buttons_texts = []
    for level in sorted(BUTTONS_CONFIG.keys()): # –°–æ—Ä—Ç—É—î–º–æ —Ä—ñ–≤–Ω—ñ, —â–æ–± –±–∞–∑–æ–≤—ñ –∫–Ω–æ–ø–∫–∏ –¥–æ–¥–∞–≤–∞–ª–∏—Å—è –ø–µ—Ä—à–∏–º–∏
        if access_level >= level:
            for button_text, min_level in BUTTONS_CONFIG[level]:
                if access_level >= min_level and button_text not in unique_buttons_texts:
                    unique_buttons_texts.append(button_text)
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫
    total_buttons = len(unique_buttons_texts)
    total_pages = math.ceil(total_buttons / BUTTONS_PER_PAGE) if total_buttons > 0 else 1

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    start_index = page * BUTTONS_PER_PAGE
    end_index = start_index + BUTTONS_PER_PAGE
    buttons_on_page = unique_buttons_texts[start_index:end_index]

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏, –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(buttons_on_page), 2):
        if i + 1 < len(buttons_on_page):
            builder.row(KeyboardButton(text=buttons_on_page[i]), KeyboardButton(text=buttons_on_page[i+1]))
        else: # –Ø–∫—â–æ –Ω–µ–ø–∞—Ä–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–Ω–æ–ø–æ–∫, –æ—Å—Ç–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∞ –∑–∞–π–º–∞—î –≤–µ—Å—å —Ä—è–¥
            builder.row(KeyboardButton(text=buttons_on_page[i]))

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
    pagination_buttons = []
    if total_pages > 1: # –ü–∞–≥—ñ–Ω–∞—Ü—ñ—è –ø–æ—Ç—Ä—ñ–±–Ω–∞, —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –±—ñ–ª—å—à–µ –æ–¥–Ω—ñ—î—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        if page > 0:
            pagination_buttons.append(KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))
        if page < total_pages - 1:
            pagination_buttons.append(KeyboardButton(text="‚û°Ô∏è –Ü—â–µ"))

    if pagination_buttons:
        # –Ø–∫—â–æ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –æ–¥–Ω–∞ (–ª–∏—à–µ "–Ü—â–µ" –∞–±–æ "–ù–∞–∑–∞–¥"), —Ç–æ –≤–æ–Ω–∞ –∑–∞–π–º–∞—î –≤–µ—Å—å —Ä—è–¥
        if len(pagination_buttons) == 1:
            builder.row(pagination_buttons[0])
        else: # –Ø–∫—â–æ –¥–≤—ñ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó, –≤–æ–Ω–∏ –≤ –æ–¥–Ω–æ–º—É —Ä—è–¥—É
            builder.row(*pagination_buttons)

    return builder.as_markup(resize_keyboard=True)

if __name__ == '__main__':
    # –¶–µ–π –±–ª–æ–∫ –¥–æ–∑–≤–æ–ª—è—î —Ç–µ—Å—Ç—É–≤–∞—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –æ–∫—Ä–µ–º–æ, –∑–∞–ø—É—Å—Ç–∏–≤—à–∏ —Ü–µ–π —Ñ–∞–π–ª
    # python keyboards/reply_keyboard.py
    async def test_keyboard_generation():
        print("--- –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä ---")

        print("\n–î–ª—è access_level=0, page=0 (–±–∞–∑–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å, –ø–µ—Ä—à–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞)")
        kb0_0 = await get_main_menu_keyboard(access_level=0, page=0)
        print(kb0_0.keyboard)

        print("\n–î–ª—è access_level=1, page=0 (—Ä—ñ–≤–µ–Ω—å 1, –ø–µ—Ä—à–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞)")
        kb1_0 = await get_main_menu_keyboard(access_level=1, page=0)
        print(kb1_0.keyboard)

        print("\n–î–ª—è access_level=1, page=1 (—Ä—ñ–≤–µ–Ω—å 1, –¥—Ä—É–≥–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞)")
        kb1_1 = await get_main_menu_keyboard(access_level=1, page=1)
        print(kb1_1.keyboard)
        
        print("\n–î–ª—è access_level=10, page=0 (–∞–¥–º—ñ–Ω—Å—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å, –ø–µ—Ä—à–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞)")
        kb10_0 = await get_main_menu_keyboard(access_level=10, page=0)
        print(kb10_0.keyboard)

        print("\n–î–ª—è access_level=10, page=1 (–∞–¥–º—ñ–Ω—Å—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å, –¥—Ä—É–≥–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞)")
        kb10_1 = await get_main_menu_keyboard(access_level=10, page=1)
        print(kb10_1.keyboard)

    import asyncio
    asyncio.run(test_keyboard_generation())