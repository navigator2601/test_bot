# –§–∞–π–ª: handlers/catalog_handler.py
# –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É "–ö–∞—Ç–∞–ª–æ–≥".
# –û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç –Ω–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –∫–∞—Ç–∞–ª–æ–≥—É —ñ –≤–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥—ñ–≤.

import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from asyncpg import Pool
from aiogram.utils.markdown import hbold, hcode
from aiogram.fsm.context import FSMContext
from common.states import CatalogStates

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –≤—Å—ñ –Ω–∞—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ë–î
from database.db_search_functions import (
    get_brands_with_model_count, 
    get_models_by_brand, 
    get_model_details_by_name,
    format_full_info,
    format_general_info,
    format_tech_info,
    format_functions_info
)

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –≤—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä
from keyboards.inline_keyboard import (
    get_brands_inline_keyboard, 
    get_models_inline_keyboard, 
    get_model_info_keyboard
)

router = Router()
logger = logging.getLogger(__name__)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ö–∞—Ç–∞–ª–æ–≥"
@router.message(F.text == "üìö –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog_handler(message: Message, db_pool: Pool):
    user_id = message.from_user.id
    user_fullname = message.from_user.full_name
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_fullname} (ID: {user_id}) –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É 'üìö –ö–∞—Ç–∞–ª–æ–≥'.")
    
    brands = await get_brands_with_model_count(db_pool)
    
    if brands:
        logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(brands)} –±—Ä–µ–Ω–¥—ñ–≤ —É –ë–î. –§–æ—Ä–º—É—é inline-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É.")
        keyboard = await get_brands_inline_keyboard(brands)
        await message.answer("üìÅ **–ö–∞—Ç–∞–ª–æ–≥ –±—Ä–µ–Ω–¥—ñ–≤:**", reply_markup=keyboard)
        logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞—Ç–∞–ª–æ–≥ –±—Ä–µ–Ω–¥—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}.")
    else:
        logger.warning(f"–£–≤–∞–≥–∞: –£ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –±—Ä–µ–Ω–¥—É. –í—ñ–¥–ø—Ä–∞–≤–ª—è—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}.")
        await message.answer("–ù–∞ –∂–∞–ª—å, –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –±—Ä–µ–Ω–¥—ñ–≤.")


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–∏–±–æ—Ä—É –±—Ä–µ–Ω–¥—É
@router.callback_query(F.data.startswith("brand_"))
async def select_brand_handler(callback_query: CallbackQuery, db_pool: Pool):
    user_id = callback_query.from_user.id
    user_fullname = callback_query.from_user.full_name
    brand_name = callback_query.data.split('_')[1]
    
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_fullname} (ID: {user_id}) –≤–∏–±—Ä–∞–≤ –±—Ä–µ–Ω–¥ '{brand_name}'.")
    
    models = await get_models_by_brand(db_pool, brand_name)
    
    if models:
        logger.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(models)} –º–æ–¥–µ–ª–µ–π –¥–ª—è –±—Ä–µ–Ω–¥—É '{brand_name}'. –§–æ—Ä–º—É—é inline-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É.")
        keyboard = await get_models_inline_keyboard(models)
        await callback_query.message.edit_text(
            text=f"üì¶ **–ú–æ–¥–µ–ª—ñ {brand_name}:**",
            reply_markup=keyboard
        )
        logger.info(f"–í—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}, –ø–æ–∫–∞–∑–∞–Ω–æ –º–æ–¥–µ–ª—ñ.")
    else:
        logger.warning(f"–£–≤–∞–≥–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –º–æ–¥–µ–ª—ñ –¥–ª—è –±—Ä–µ–Ω–¥—É '{brand_name}'.")
        await callback_query.message.edit_text(
            text=f"‚ùå **–ú–æ–¥–µ–ª—ñ {brand_name}:**\n–ù–∞ –∂–∞–ª—å, –º–æ–¥–µ–ª—ñ –¥–ª—è —Ü—å–æ–≥–æ –±—Ä–µ–Ω–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=None
        )
    await callback_query.answer()


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–¥–µ–ª—ñ (–∑–±–µ—Ä—ñ–≥–∞—î –¥–∞–Ω—ñ –≤ —Å—Ç–∞–Ω—ñ FSM)
@router.callback_query(F.data.startswith("model_details_"))
async def select_model_handler(callback_query: CallbackQuery, db_pool: Pool, state: FSMContext):
    user_id = callback_query.from_user.id
    user_fullname = callback_query.from_user.full_name
    model_name = callback_query.data.split('_details_')[1]
    
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_fullname} (ID: {user_id}) –≤–∏–±—Ä–∞–≤ –º–æ–¥–µ–ª—å '{model_name}'.")

    model_data = await get_model_details_by_name(db_pool, model_name)
    
    if not model_data:
        logger.warning(f"–£–≤–∞–≥–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –º–æ–¥–µ–ª—ñ '{model_name}'.")
        await callback_query.message.edit_text(
            text=f"‚ùå **–î–µ—Ç–∞–ª—ñ –º–æ–¥–µ–ª—ñ '{model_name}':**\n–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=None
        )
        await state.clear()
        await callback_query.answer()
        return

    brand_name = model_name.split(' ')[0]
    
    await state.set_state(CatalogStates.viewing_model_info)
    await state.update_data(model_info=model_data, brand_name=brand_name)
    
    keyboard = await get_model_info_keyboard(model_name, brand_name)
    await callback_query.message.edit_text(
        text=f"üîé **–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –º–æ–¥–µ–ª—å {model_name}**",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    logger.info(f"–í—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –ø–æ–∫–∞–∑–∞–Ω–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –¥–ª—è –º–æ–¥–µ–ª—ñ '{model_name}'.")
    await callback_query.answer()


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –¥–∞–Ω—ñ –∑—ñ —Å—Ç–∞–Ω—É)
@router.callback_query(F.data.startswith("info_"), CatalogStates.viewing_model_info)
async def show_model_info_handler(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    user_fullname = callback_query.from_user.full_name

    parts = callback_query.data.split('_', 2)
    info_type = parts[1]
    model_name = parts[2]
    
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_fullname} (ID: {user_id}) –∑–∞–ø—Ä–æ—Å–∏–≤ '{info_type}' —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –º–æ–¥–µ–ª—ñ '{model_name}'.")

    user_data = await state.get_data()
    model_data = user_data.get('model_info')
    brand_name = user_data.get('brand_name')

    formatted_text = ""
    if not model_data:
        formatted_text = f"‚ùå –î–∞–Ω—ñ –¥–ª—è –º–æ–¥–µ–ª—ñ `{model_name}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É —Å—Ç–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É."
    else:
        if info_type == 'general':
            formatted_text = format_general_info(model_data)
        elif info_type == 'tech':
            formatted_text = format_tech_info(model_data)
        elif info_type == 'functions':
            formatted_text = format_functions_info(model_data)
        elif info_type == 'full':
            formatted_text = format_full_info(model_data)
            
    keyboard = await get_model_info_keyboard(model_name, brand_name)
    
    await callback_query.message.edit_text(
        text=formatted_text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    logger.info(f"–í—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –ø–æ–∫–∞–∑–∞–Ω–æ '{info_type}' —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è '{model_name}'.")
    await callback_query.answer()


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ —Å–ø–∏—Å–∫—É –±—Ä–µ–Ω–¥—ñ–≤"
@router.callback_query(F.data == "back_to_brands")
async def back_to_brands_handler(callback_query: CallbackQuery, db_pool: Pool, state: FSMContext):
    user_id = callback_query.from_user.id
    user_fullname = callback_query.from_user.full_name
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_fullname} (ID: {user_id}) –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ —Å–ø–∏—Å–∫—É –±—Ä–µ–Ω–¥—ñ–≤.")
    
    await state.clear()

    brands = await get_brands_with_model_count(db_pool)
    
    keyboard = await get_brands_inline_keyboard(brands)
    await callback_query.message.edit_text(
        text="üìÅ **–ö–∞—Ç–∞–ª–æ–≥ –±—Ä–µ–Ω–¥—ñ–≤:**",
        reply_markup=keyboard
    )
    logger.info(f"–í—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}, –ø–æ–∫–∞–∑–∞–Ω–æ —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥—ñ–≤.")
    
    await callback_query.answer()


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ —Å–ø–∏—Å–∫—É –º–æ–¥–µ–ª–µ–π" (–≤–∏—Ö–æ–¥–∏—Ç—å –∑—ñ —Å—Ç–∞–Ω—É)
@router.callback_query(F.data.startswith("back_to_models_"), CatalogStates.viewing_model_info)
async def back_to_models_handler(callback_query: CallbackQuery, db_pool: Pool, state: FSMContext):
    user_id = callback_query.from_user.id
    user_fullname = callback_query.from_user.full_name
    brand_name = callback_query.data.split('_')[3]
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_fullname} (ID: {user_id}) –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ —Å–ø–∏—Å–∫—É –º–æ–¥–µ–ª–µ–π –±—Ä–µ–Ω–¥—É '{brand_name}'.")

    models = await get_models_by_brand(db_pool, brand_name)
    
    keyboard = await get_models_inline_keyboard(models)
    await callback_query.message.edit_text(
        text=f"üì¶ **–ú–æ–¥–µ–ª—ñ {brand_name}:**",
        reply_markup=keyboard
    )
    logger.info(f"–í—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}, –ø–æ–∫–∞–∑–∞–Ω–æ —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π.")
    
    await state.clear()
    
    await callback_query.answer()