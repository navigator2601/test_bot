# –§–∞–π–ª: handlers/catalog_handler.py

import logging
from aiogram import Router, F, types
from aiogram.types import CallbackQuery, Message
from aiogram.enums.parse_mode import ParseMode
from asyncpg import Pool
from aiogram.fsm.context import FSMContext

from database.db_search_functions import (
    get_brands_with_model_count,
    get_models_by_brand,
    get_model_details_by_id,
    format_model_details
)
from keyboards.inline_keyboard import (
    get_brands_inline_keyboard,
    get_models_inline_keyboard,
    get_model_details_keyboard
)

router = Router()
logger = logging.getLogger(__name__)

@router.message(F.text == "üìö –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog_handler(message: Message, db_pool: Pool, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥—ñ–≤ –∫–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä—ñ–≤ –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –º–æ–¥–µ–ª–µ–π.
    """
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É 'üìö –ö–∞—Ç–∞–ª–æ–≥'.")
    
    brands = await get_brands_with_model_count(db_pool)
    
    if brands:
        keyboard = await get_brands_inline_keyboard(brands)
        await message.answer(
            "<b>–ë—Ä–µ–Ω–¥–∏ –∫–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä—ñ–≤:</b>\n–û–±–µ—Ä—ñ—Ç—å –±—Ä–µ–Ω–¥ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –º–æ–¥–µ–ª–µ–π.",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
    else:
        await message.answer("‚ùå –ù–∞ –∂–∞–ª—å, –±—Ä–µ–Ω–¥–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

@router.callback_query(F.data.startswith("brand_"))
async def show_models_handler(callback_query: CallbackQuery, db_pool: Pool, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ –±—Ä–µ–Ω–¥—É.
    """
    brand_name = callback_query.data.split('brand_')[1]
    
    user_id = callback_query.from_user.id
    user_fullname = callback_query.from_user.full_name
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_fullname} (ID: {user_id}) –æ–±—Ä–∞–≤ –±—Ä–µ–Ω–¥ '{brand_name}'.")

    models = await get_models_by_brand(db_pool, brand_name)
    
    if models:
        keyboard = await get_models_inline_keyboard(models, brand_name)
        await callback_query.message.edit_text(
            text=f"üì¶ <b>–ú–æ–¥–µ–ª—ñ {brand_name}:</b>\n–û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª–µ–π.",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
    else:
        await callback_query.message.edit_text(
            text=f"‚ùå –ù–∞ –∂–∞–ª—å, –º–æ–¥–µ–ª—ñ –±—Ä–µ–Ω–¥—É '{brand_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=None,
            parse_mode=ParseMode.HTML
        )
    
    await callback_query.answer()


@router.callback_query(F.data.startswith("model_details_"))
async def model_details_handler(callback_query: CallbackQuery, db_pool: Pool, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—É—î –ø–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–±—Ä–∞–Ω—É –º–æ–¥–µ–ª—å.
    """
    try:
        model_id_str = callback_query.data.split('model_details_')[1]
        model_id = int(model_id_str)
    except (IndexError, ValueError):
        await callback_query.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ ID –º–æ–¥–µ–ª—ñ.", show_alert=True)
        return

    user_id = callback_query.from_user.id
    user_fullname = callback_query.from_user.full_name
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_fullname} (ID: {user_id}) –æ–±—Ä–∞–≤ –º–æ–¥–µ–ª—å –∑ ID: {model_id}.")

    model_details = await get_model_details_by_id(db_pool, model_id)
    
    if model_details:
        formatted_text = format_model_details(model_details)
        brand_name = model_details.get("–ë—Ä–µ–Ω–¥", "–ë—Ä–µ–Ω–¥")  # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –±—Ä–µ–Ω–¥—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
        keyboard = await get_model_details_keyboard(brand_name)
        await callback_query.message.edit_text(
            text=formatted_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
    else:
        await callback_query.message.edit_text(
            text="‚ùå –ù–∞ –∂–∞–ª—å, —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ü—é –º–æ–¥–µ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=None,
            parse_mode=ParseMode.HTML
        )
    
    await callback_query.answer()


@router.callback_query(F.data.startswith("back_to_models_"))
async def back_to_models_handler(callback_query: CallbackQuery, db_pool: Pool):
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" —É —Å–ø–∏—Å–∫—É –º–æ–¥–µ–ª–µ–π.
    """
    try:
        brand_name = callback_query.data.split('back_to_models_')[1]
    except IndexError:
        await callback_query.answer("–ü–æ–º–∏–ª–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è.", show_alert=True)
        return

    user_id = callback_query.from_user.id
    user_fullname = callback_query.from_user.full_name
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_fullname} (ID: {user_id}) –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ —Å–ø–∏—Å–∫—É –º–æ–¥–µ–ª–µ–π –±—Ä–µ–Ω–¥—É '{brand_name}'.")

    models = await get_models_by_brand(db_pool, brand_name)
    keyboard = await get_models_inline_keyboard(models, brand_name)
    
    await callback_query.message.edit_text(
        text=f"üì¶ <b>–ú–æ–¥–µ–ª—ñ {brand_name}:</b>\n–û–±–µ—Ä—ñ—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª–µ–π.",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    
    await callback_query.answer()

@router.callback_query(F.data == "back_to_brands")
async def back_to_brands_handler(callback_query: CallbackQuery, db_pool: Pool):
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–æ —Å–ø–∏—Å–∫—É –±—Ä–µ–Ω–¥—ñ–≤.
    """
    user_id = callback_query.from_user.id
    user_fullname = callback_query.from_user.full_name
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_fullname} (ID: {user_id}) –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ —Å–ø–∏—Å–∫—É –±—Ä–µ–Ω–¥—ñ–≤.")
    
    brands = await get_brands_with_model_count(db_pool)
    keyboard = await get_brands_inline_keyboard(brands)
    
    await callback_query.message.edit_text(
        text="<b>–ë—Ä–µ–Ω–¥–∏ –∫–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä—ñ–≤:</b>\n–û–±–µ—Ä—ñ—Ç—å –±—Ä–µ–Ω–¥ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –º–æ–¥–µ–ª–µ–π.",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )

    await callback_query.answer()