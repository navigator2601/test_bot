# handlers/catalog_handler.py

import logging
from aiogram import Router, F, types
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove # <-- –î–æ–¥–∞–Ω–æ
from aiogram.enums.parse_mode import ParseMode
from asyncpg import Pool
from aiogram.fsm.context import FSMContext

from database.db_search_functions import (
    get_brands_with_model_count,
    get_models_by_brand,
    get_model_details_by_id,
    format_model_details
)
from keyboards.inline_keyboard import (
    get_brands_inline_keyboard,
    get_models_inline_keyboard,
    get_model_details_keyboard
)
from keyboards.callback_factories import CatalogCallback

router = Router()
logger = logging.getLogger(__name__)

# –ù–û–í–ò–ô –û–ë–†–û–ë–ù–ò–ö: –í–∏–±—ñ—Ä –±—Ä–µ–Ω–¥—É —Ç–∞ –≤–∏–≤–µ–¥–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π
@router.message(F.text == "üìö –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog_handler(message: Message, db_pool: Pool, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –±—Ä–µ–Ω–¥—ñ–≤ –∫–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä—ñ–≤ –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –º–æ–¥–µ–ª–µ–π.
    """
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É 'üìö –ö–∞—Ç–∞–ª–æ–≥'.")

    brands = await get_brands_with_model_count(db_pool)

    if brands:
        keyboard = get_brands_inline_keyboard(brands)
        await message.answer(
            "<b>–ë—Ä–µ–Ω–¥–∏ –∫–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä—ñ–≤:</b>\n–û–±–µ—Ä—ñ—Ç—å –±—Ä–µ–Ω–¥ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –º–æ–¥–µ–ª–µ–π.",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
    else:
        await message.answer("–ù–∞ –∂–∞–ª—å, –±—Ä–µ–Ω–¥–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

@router.callback_query(CatalogCallback.filter(F.action == "select_brand"))
async def select_brand_handler(
    callback_query: CallbackQuery,
    callback_data: CatalogCallback,
    db_pool: Pool
):
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É –±—Ä–µ–Ω–¥—É, –≤–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ü—å–æ–≥–æ –±—Ä–µ–Ω–¥—É.
    """
    user_id = callback_query.from_user.id
    user_fullname = callback_query.from_user.full_name
    brand_id = callback_data.brand_id
    brand_name = callback_data.brand_name
    
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_fullname} (ID: {user_id}) –æ–±—Ä–∞–≤ –±—Ä–µ–Ω–¥ '{brand_name}' –∑ ID: {brand_id}.")
    
    models = await get_models_by_brand(db_pool, brand_id)
    
    if models:
        # –í–∞—à –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫–æ–¥
        # ...
        model_count = len(models)
        model_word = "–º–æ–¥–µ–ª—å" if model_count == 1 else "–º–æ–¥–µ–ª—ñ" if 1 < model_count < 5 else "–º–æ–¥–µ–ª–µ–π"
        
        message_text = (
            f"‚ö° –°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
            f"–£ –±—Ä–µ–Ω–¥—ñ <b>{brand_name}</b> –∑–Ω–∞–π–¥–µ–Ω–æ {model_count} {model_word}:"
        )
        
        keyboard = get_models_inline_keyboard(models, brand_name)
        
        await callback_query.message.edit_text(
            text=message_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
        
        await callback_query.answer()
    else:
        await callback_query.message.edit_text(
            text=f"–ù–∞ –∂–∞–ª—å, –º–æ–¥–µ–ª—ñ –¥–ª—è –±—Ä–µ–Ω–¥—É <b>{brand_name}</b> –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=get_brands_inline_keyboard(await get_brands_with_model_count(db_pool)),
            parse_mode=ParseMode.HTML
        )
        await callback_query.answer(f"–ú–æ–¥–µ–ª—ñ –¥–ª—è {brand_name} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)


# –û–ë–†–û–ë–ù–ò–ö: –ü–µ—Ä–µ–≥–ª—è–¥ –¥–µ—Ç–∞–ª–µ–π –º–æ–¥–µ–ª—ñ
@router.callback_query(CatalogCallback.filter(F.action == "select_model"))
async def select_model_handler(
    callback_query: CallbackQuery,
    callback_data: CatalogCallback,
    db_pool: Pool
):
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É –º–æ–¥–µ–ª—ñ, –≤–∏–≤–æ–¥–∏—Ç—å —ó—ó –¥–µ—Ç–∞–ª—ñ.
    """
    user_id = callback_query.from_user.id
    user_fullname = callback_query.from_user.full_name
    model_id = callback_data.model_id
    
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_fullname} (ID: {user_id}) –æ–±—Ä–∞–≤ –º–æ–¥–µ–ª—å –∑ ID: {model_id}.")

    model_details = await get_model_details_by_id(db_pool, model_id)
    
    if model_details:
        formatted_text = format_model_details(model_details)
        keyboard = get_model_details_keyboard()
        await callback_query.message.edit_text(
            text=formatted_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
        await callback_query.answer()
    else:
        await callback_query.answer("–î–µ—Ç–∞–ª—ñ –º–æ–¥–µ–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)


@router.callback_query(CatalogCallback.filter(F.action == "back_to_brands"))
async def back_to_brands_handler(callback_query: CallbackQuery, db_pool: Pool):
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–æ —Å–ø–∏—Å–∫—É –±—Ä–µ–Ω–¥—ñ–≤.
    """
    user_id = callback_query.from_user.id
    user_fullname = callback_query.from_user.full_name
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_fullname} (ID: {user_id}) –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ —Å–ø–∏—Å–∫—É –±—Ä–µ–Ω–¥—ñ–≤.")
    
    brands = await get_brands_with_model_count(db_pool)
    
    if brands:
        keyboard = get_brands_inline_keyboard(brands)
        await callback_query.message.edit_text(
            text="<b>–ë—Ä–µ–Ω–¥–∏ –∫–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä—ñ–≤:</b>\n–û–±–µ—Ä—ñ—Ç—å –±—Ä–µ–Ω–¥ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –º–æ–¥–µ–ª–µ–π.",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
    else:
        await callback_query.answer("–ù–∞ –∂–∞–ª—å, –±—Ä–µ–Ω–¥–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    await callback_query.answer()