# –≤—ñ–¥–Ω–æ—Å–Ω–∏–π —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É: handlers/catalog_handler.py
# –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤, –ø–æ–≤'—è–∑–∞–Ω–∏—Ö –∑ –∫–∞—Ç–∞–ª–æ–≥–æ–º –∫–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä—ñ–≤.

import logging
from aiogram import Router, F, types
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove
from aiogram.enums.parse_mode import ParseMode
from asyncpg import Pool
from aiogram.fsm.context import FSMContext
import re

from database.db_search_functions import get_all_brands_with_count, get_models_by_brand, get_model_details_by_id
from database.users_db import get_user_access_level
from keyboards.inline_keyboard import get_brands_inline_keyboard, get_models_inline_keyboard, get_back_to_models_keyboard
from keyboards.reply_keyboard import get_main_menu_keyboard
from services.message_formatter import format_model_details_message

router = Router()
logger = logging.getLogger(__name__)

CATALOG_ACTIVATED_MESSAGE = "‚ö° –ö–∞—Ç–∞–ª–æ–≥ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ! \\n–ö—Ä–∏—Å—Ç–∞–ª–∏ –¥–∞–Ω–∏—Ö –≤–∏—è–≤–∏–ª–∏ –±—Ä–µ–Ω–¥–∏:"

@router.message(F.text == "üìö –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog_handler_message(message: Message, db_pool: Pool):
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ 'üìö –ö–∞—Ç–∞–ª–æ–≥'.
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ç–∏–º—á–∞—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è —Ä–µ–ø–ª—ñ-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏,
    –≤–∏–¥–∞–ª—è—î –π–æ–≥–æ —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –Ω–æ–≤–µ –∑ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é –±—Ä–µ–Ω–¥—ñ–≤.
    """
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É 'üìö –ö–∞—Ç–∞–ª–æ–≥'.")
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ–± –ø—Ä–∏—Ö–æ–≤–∞—Ç–∏ —Ä–µ–ø–ª—ñ-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    sent_temp_message = await message.answer(
        "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...",
        reply_markup=ReplyKeyboardRemove()
    )
    
    try:
        await sent_temp_message.delete()
        logger.info(f"–í–∏–¥–∞–ª–µ–Ω–æ —Ç–∏–º—á–∞—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")

    brands = await get_all_brands_with_count(db_pool)
    
    if brands:
        keyboard = await get_brands_inline_keyboard(brands)
        await message.answer(
            CATALOG_ACTIVATED_MESSAGE,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
    else:
        await message.answer(
            "‚ùå –ù–∞ –∂–∞–ª—å, –±—Ä–µ–Ω–¥–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        )

@router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu_handler(callback_query: CallbackQuery, db_pool: Pool):
    """
    –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–í –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é".
    –í–∏–¥–∞–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é —ñ –ø–æ–∫–∞–∑—É—î –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.
    """
    user_id = callback_query.from_user.id
    user_fullname = callback_query.from_user.full_name
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_fullname} (ID: {user_id}) –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.")
    
    await callback_query.message.delete()
    
    user_access_level = await get_user_access_level(db_pool, user_id)
    main_menu_keyboard = await get_main_menu_keyboard(user_access_level)
    
    await callback_query.message.answer(
        "üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é!",
        reply_markup=main_menu_keyboard
    )
    await callback_query.answer()

@router.callback_query(F.data.startswith("brand_"))
async def show_models_handler(callback_query: CallbackQuery, db_pool: Pool):
    """
    –û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –±—Ä–µ–Ω–¥—É —Ç–∞ –ø–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π.
    """
    brand_name = callback_query.data.split("_")[1]
    user_id = callback_query.from_user.id
    user_fullname = callback_query.from_user.full_name
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_fullname} (ID: {user_id}) –≤–∏–±—Ä–∞–≤ –±—Ä–µ–Ω–¥ '{brand_name}'.")

    models = await get_models_by_brand(db_pool, brand_name)

    if models:
        keyboard = await get_models_inline_keyboard(models)
        await callback_query.message.edit_text(
            f"‚úÖ –û—Å—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è –±—Ä–µ–Ω–¥—É **{brand_name}**:",
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await callback_query.message.edit_text("‚ùå –ù–∞ –∂–∞–ª—å, –º–æ–¥–µ–ª—ñ –¥–ª—è —Ü—å–æ–≥–æ –±—Ä–µ–Ω–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    await callback_query.answer()

@router.callback_query(F.data.startswith("model_"))
async def show_model_details_handler(callback_query: CallbackQuery, db_pool: Pool):
    """
    –û–±—Ä–æ–±–ª—è—î –≤–∏–±—ñ—Ä –º–æ–¥–µ–ª—ñ —Ç–∞ –ø–æ–∫–∞–∑—É—î —ó—ó –¥–µ—Ç–∞–ª—ñ.
    """
    await callback_query.message.edit_text("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –º–æ–¥–µ–ª—ñ...")

    try:
        parts = callback_query.data.split("_")
        brand_name_from_callback = parts[1]
        model_id = int(parts[2])
    except (IndexError, ValueError):
        logger.error(f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback_query.data}")
        await callback_query.message.edit_text("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É.")
        await callback_query.answer()
        return
        
    user_id = callback_query.from_user.id
    user_fullname = callback_query.from_user.full_name
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_fullname} (ID: {user_id}) –æ–±—Ä–∞–≤ –º–æ–¥–µ–ª—å –∑ ID: {model_id}.")

    model_data = await get_model_details_by_id(db_pool, model_id)
    
    if model_data:
        # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è: –ø—Ä–∏–±–∏—Ä–∞—î–º–æ `await`, –æ—Å–∫—ñ–ª—å–∫–∏ —Ñ—É–Ω–∫—Ü—ñ—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞
        formatted_message = format_model_details_message(model_data)
        
        keyboard = await get_back_to_models_keyboard(brand_name_from_callback)
        
        await callback_query.message.edit_text(
            formatted_message,
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
    else:
        await callback_query.message.edit_text("‚ùå –î–µ—Ç–∞–ª—ñ –º–æ–¥–µ–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        
    await callback_query.answer()