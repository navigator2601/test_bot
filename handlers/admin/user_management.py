# handlers/admin/user_management.py
import logging

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.filters import StateFilter

import asyncpg

from database.users_db import (
    get_user,
    update_user_access_level,
    get_all_users,
    is_user_authorized,
    update_user_authorization_status
)
from keyboards.admin_keyboard import (
    get_users_list_keyboard,
    get_user_actions_keyboard,
    get_confirm_action_keyboard,
    get_access_level_keyboard,
    get_admin_main_keyboard # –î–æ–¥–∞–Ω–æ —ñ–º–ø–æ—Ä—Ç –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫
)
from common.constants import USERS_PER_PAGE, ACCESS_LEVEL_BUTTONS
from common.messages import (
    get_access_level_description,
    get_user_details_text
)

from common.states import AdminStates
from filters.admin_filter import AdminAccessFilter
from keyboards.callback_factories import AdminCallback, UserActionCallback, AccessLevelCallback

logger = logging.getLogger(__name__)

router = Router()

router.callback_query.filter(AdminAccessFilter())
router.message.filter(AdminAccessFilter())


# --- –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á ---

async def _return_to_user_management(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_pool: asyncpg.Pool,
    user_id: int
) -> None:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –±–æ—Ç–∞ –¥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –π–æ–≥–æ –º–µ–Ω—é –¥—ñ–π.
    """
    await state.set_state(AdminStates.user_management)

    user_info = await get_user(db_pool, user_id)
    if user_info:
        is_auth = await is_user_authorized(db_pool, user_id)
        current_level = user_info.get('access_level', 0)
        
        user_info_text = get_user_details_text(user_info, is_auth, ACCESS_LEVEL_BUTTONS)
        keyboard = get_user_actions_keyboard(is_auth, current_level, user_id)
        
        await callback.message.edit_text(user_info_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    else:
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ä–∞–ø—Ç–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–æ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ user_management. –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É.")
        users = await get_all_users(db_pool)
        current_page = (await state.get_data()).get("users_list_page", 0)
        keyboard = get_users_list_keyboard(users, current_page, USERS_PER_PAGE)
        await callback.message.edit_text(
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{user_id}</code> –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
    await callback.answer()


async def _show_users_list_handler(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_pool: asyncpg.Pool,
    current_page: int = 0
):
    """
    –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é.
    """
    users = await get_all_users(db_pool)
    keyboard = get_users_list_keyboard(users, current_page, USERS_PER_PAGE)
    
    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å—Ç–æ—Ä—ñ–Ω–æ–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
    total_pages = (len(users) + USERS_PER_PAGE - 1) // USERS_PER_PAGE if len(users) > 0 else 1
    
    await callback.message.edit_text(
        f"<b>üë• –Æ–∑–µ—Ä-–º–∞—Ç—Ä–∏—Ü—è ¬∑ –†–µ–¥–∞–∫—Ç–æ—Ä –¥–æ—Å—Ç—É–ø—É:</b>\n\n–û–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É ({current_page + 1}/{total_pages}):",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

# --- –û–°–ù–û–í–ù–Ü –•–ï–ù–î–õ–ï–†–ò ---

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
# –¢–µ–ø–µ—Ä –æ–±—Ä–æ–±–ª—è—î —è–∫ –ø–µ—Ä—à–∏–π –≤—Ö—ñ–¥, —Ç–∞–∫ —ñ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞/–ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
@router.callback_query(
    AdminCallback.filter(F.action == "show_users"),
    StateFilter(AdminStates.admin_main, AdminStates.user_management) # –í–∫–ª—é—á–µ–Ω–æ user_management
)
async def process_show_users(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_pool: asyncpg.Pool,
    callback_data: AdminCallback
) -> None:
    user_id_requester = callback.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id_requester} –æ–±—Ä–∞–≤ '–Æ–∑–µ—Ä-–º–∞—Ç—Ä–∏—Ü—è' –∞–±–æ '–ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤'.")

    # –Ø–∫—â–æ callback_data.page –ø—Ä–∏—Å—É—Ç–Ω—ñ–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ. –Ü–Ω–∞–∫—à–µ —Å–ø—Ä–æ–±—É—î–º–æ –≤–∑—è—Ç–∏ –∑—ñ —Å—Ç–∞–Ω—É.
    current_page = callback_data.page if callback_data.page is not None else 0
    
    if current_page == 0: # –Ø–∫—â–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞ —è–≤–Ω–æ –≤ callback_data, —Å–ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —ó—ó –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Å—Ç–∞–Ω—É
        state_data = await state.get_data()
        current_page = state_data.get("users_list_page", 0)
        logger.debug(f"–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É: {current_page} –∑—ñ —Å—Ç–∞–Ω—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_requester}.")
        
    await state.update_data(users_list_page=current_page) # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
    await state.set_state(AdminStates.user_management)

    try:
        users = await get_all_users(db_pool)
        if not users:
            logger.warning(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –ë–î –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —é–∑–µ—Ä-–º–∞—Ç—Ä–∏—Ü—ñ. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id_requester}.")
            await callback.answer("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.", show_alert=True)
            await callback.message.edit_text(
                "<b>üë• –Æ–∑–µ—Ä-–º–∞—Ç—Ä–∏—Ü—è ¬∑ –†–µ–¥–∞–∫—Ç–æ—Ä –¥–æ—Å—Ç—É–ø—É:</b>\n\n–ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.",
                reply_markup=get_admin_main_keyboard(), # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é
                parse_mode=ParseMode.HTML
            )
            return

        await _show_users_list_handler(callback, state, db_pool, current_page)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è {user_id_requester}: {e}", exc_info=True)
        await callback.message.edit_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=get_admin_main_keyboard(), # –ù–∞ –≤–∏–ø–∞–¥–æ–∫ –ø–æ–º–∏–ª–∫–∏ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
            parse_mode=ParseMode.HTML
        )
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.", show_alert=True)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–∏–±–æ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑—ñ —Å–ø–∏—Å–∫—É
@router.callback_query(
    AdminCallback.filter(F.action == "select_user"),
    StateFilter(AdminStates.user_management, AdminStates.set_access_level)
)
async def process_select_user(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_pool: asyncpg.Pool,
    callback_data: AdminCallback
) -> None:
    user_id_to_manage = callback_data.user_id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} –æ–±—Ä–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_manage} –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è.")

    if not user_id_to_manage:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–∫–∞–∑–∞–Ω–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.", show_alert=True)
        return

    user_info = await get_user(db_pool, user_id_to_manage)
    if not user_info:
        await callback.answer("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–æ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        current_page = (await state.get_data()).get("users_list_page", 0)
        await _show_users_list_handler(callback, state, db_pool, current_page)
        return

    is_auth = await is_user_authorized(db_pool, user_id_to_manage)
    current_level = user_info.get('access_level', 0)
    
    await state.update_data(selected_user_id=user_id_to_manage, current_user_access_level=current_level)
    await state.set_state(AdminStates.user_management)

    user_info_text = get_user_details_text(user_info, is_auth, ACCESS_LEVEL_BUTTONS)
    keyboard = get_user_actions_keyboard(is_auth, current_level, user_id_to_manage)
    
    await callback.message.edit_text(
        user_info_text,
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó/–¥–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@router.callback_query(UserActionCallback.filter(F.action.in_({"authorize", "unauthorize"})), AdminStates.user_management)
async def process_authorize_unauthorize_user(
    callback: types.CallbackQuery,
    state: FSMContext,
    callback_data: UserActionCallback
) -> None:
    user_id_to_manage = callback_data.target_user_id
    action = callback_data.action
    
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} —ñ–Ω—ñ—Ü—ñ—é–≤–∞–≤ {action} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_manage}.")

    await state.update_data(pending_action=action, pending_user_id=user_id_to_manage)
    await state.set_state(AdminStates.confirm_action)

    confirm_text = ""
    if action == "authorize":
        confirm_text = f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ <b>–∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏</b> –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{user_id_to_manage}</code>?"
    else:
        confirm_text = f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ <b>–¥–µ–∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏</b> –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{user_id_to_manage}</code>?"
    
    keyboard = get_confirm_action_keyboard(action, user_id_to_manage)

    await callback.message.edit_text(
        confirm_text,
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó/–¥–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó/–∑–º—ñ–Ω–∏ —Ä—ñ–≤–Ω—è
@router.callback_query(
    F.data.startswith("user_action:confirm_") | F.data.startswith("access_level:confirm_"),
    AdminStates.confirm_action
)
async def confirm_action(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_pool: asyncpg.Pool,
) -> None:
    state_data = await state.get_data()
    user_id_to_manage = state_data.get("pending_user_id")
    action_type = state_data.get("pending_action")

    if user_id_to_manage is None or action_type is None:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞: –ù–µ–ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ –≤ FSMContext –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {callback.from_user.id}.")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ –¥—ñ—é —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.", show_alert=True)
        # –°–ø—Ä–æ–±—É—î–º–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –¥–æ —Å–ø–∏—Å–∫—É, —è–∫—â–æ –¥–∞–Ω—ñ –≤—Ç—Ä–∞—á–µ–Ω–æ
        current_page = state_data.get("users_list_page", 0)
        await state.set_state(AdminStates.user_management)
        await _show_users_list_handler(callback, state, db_pool, current_page)
        return

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ {action_type} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_manage}.")

    success_message = ""
    error_message = ""

    try:
        if action_type == "authorize":
            logger.info(f"–°–ø—Ä–æ–±–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–ª—è user_id={user_id_to_manage} –Ω–∞ TRUE.")
            await update_user_authorization_status(db_pool, user_id_to_manage, True)
            success_message = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{user_id_to_manage}</code> —É—Å–ø—ñ—à–Ω–æ <b>–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ</b>."
            error_message = f"–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{user_id_to_manage}</code>."
        elif action_type == "unauthorize":
            logger.info(f"–°–ø—Ä–æ–±–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–ª—è user_id={user_id_to_manage} –Ω–∞ FALSE.")
            await update_user_authorization_status(db_pool, user_id_to_manage, False)
            success_message = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{user_id_to_manage}</code> —É—Å–ø—ñ—à–Ω–æ <b>–¥–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ</b>."
            error_message = f"–ü–æ–º–∏–ª–∫–∞ –¥–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{user_id_to_manage}</code>."
        elif action_type == "set_level":
            new_level = state_data.get("pending_level")
            
            if new_level is None:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞: 'pending_level' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ FSMContext –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_manage}.")
                await callback.message.edit_text("–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É.", parse_mode=ParseMode.HTML)
                await _return_to_user_management(callback, state, db_pool, user_id_to_manage)
                return

            logger.info(f"–°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–ª—è user_id={user_id_to_manage} –Ω–∞ —Ä—ñ–≤–µ–Ω—å={new_level}.")
            await update_user_access_level(db_pool, user_id_to_manage, new_level)
            level_name = next((name for level, name in ACCESS_LEVEL_BUTTONS if level == new_level), str(new_level))
            success_message = f"–†—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{user_id_to_manage}</code> –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ <b>{level_name} ({new_level})</b>."
            error_message = f"–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{user_id_to_manage}</code> –Ω–∞ {new_level}."
        else:
            await callback.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.", show_alert=True)
            return

        await callback.message.edit_text(success_message, parse_mode=ParseMode.HTML)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å {action_type} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_manage}: {e}", exc_info=True)
        await callback.message.edit_text(error_message + f" –ü—Ä–∏—á–∏–Ω–∞: {e}", parse_mode=ParseMode.HTML)
    finally:
        await state.update_data(pending_action=None, pending_user_id=None, pending_level=None)
        await _return_to_user_management(callback, state, db_pool, user_id_to_manage)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥—ñ—ó (–ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∫—Ä–æ–∫—É)
@router.callback_query(AdminCallback.filter(F.action == "cancel_action"), AdminStates.confirm_action)
async def cancel_action(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_pool: asyncpg.Pool
) -> None:
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} —Å–∫–∞—Å—É–≤–∞–≤ –¥—ñ—é.")
    state_data = await state.get_data()
    user_id_to_manage = state_data.get("pending_user_id")

    await state.update_data(pending_action=None, pending_user_id=None, pending_level=None)

    if user_id_to_manage:
        await _return_to_user_management(callback, state, db_pool, user_id_to_manage)
    else:
        # –Ø–∫—â–æ –Ω–µ–º–∞—î pending_user_id, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        current_page = state_data.get("users_list_page", 0)
        await state.set_state(AdminStates.user_management)
        await _show_users_list_handler(callback, state, db_pool, current_page)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–º—ñ–Ω–∏ —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É
@router.callback_query(AdminCallback.filter(F.action == "change_access_level"), AdminStates.user_management)
async def process_change_access_level(
    callback: types.CallbackQuery,
    state: FSMContext,
    callback_data: AdminCallback
) -> None:
    user_id_to_manage = callback_data.user_id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} —ñ–Ω—ñ—Ü—ñ—é–≤–∞–≤ –∑–º—ñ–Ω—É —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–ª—è {user_id_to_manage}.")

    await state.set_state(AdminStates.set_access_level)
    await state.update_data(selected_user_id=user_id_to_manage)
    
    keyboard = get_access_level_keyboard(user_id_to_manage)
    
    await callback.message.edit_text(
        f"–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{user_id_to_manage}</code>:",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–∏–±–æ—Ä—É –Ω–æ–≤–æ–≥–æ —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É
@router.callback_query(AccessLevelCallback.filter(), AdminStates.set_access_level)
async def set_new_access_level(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_pool: asyncpg.Pool, # –î–æ–¥–∞–Ω–æ db_pool, –±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ _return_to_user_management
    callback_data: AccessLevelCallback
) -> None:
    new_level = callback_data.level
    user_id_to_manage = callback_data.target_user_id
    
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} –æ–±—Ä–∞–≤ —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É {new_level} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_manage}.")

    if not user_id_to_manage:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∑–º—ñ–Ω–∏ —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É.", show_alert=True)
        # –í–∞–∂–ª–∏–≤–æ –º–∞—Ç–∏ user_id_to_manage –¥–ª—è _return_to_user_management. –Ø–∫—â–æ –≤—ñ–Ω –≤—Ç—Ä–∞—á–µ–Ω–∏–π,
        # –∫—Ä–∞—â–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –¥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É.
        current_page = (await state.get_data()).get("users_list_page", 0)
        await state.set_state(AdminStates.user_management)
        await _show_users_list_handler(callback, state, db_pool, current_page)
        return
    
    await state.update_data(pending_action="set_level", pending_user_id=user_id_to_manage, pending_level=new_level)
    await state.set_state(AdminStates.confirm_action)

    level_name = next((name for level, name in ACCESS_LEVEL_BUTTONS if level == new_level), str(new_level))

    confirm_text = (
        f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ "
        f"<code>{user_id_to_manage}</code> –Ω–∞ <b>{level_name} ({new_level})</b>?"
    )
    keyboard = get_confirm_action_keyboard("set_level", user_id_to_manage, new_level)

    await callback.message.edit_text(
        confirm_text,
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()