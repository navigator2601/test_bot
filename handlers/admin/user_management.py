# handlers/admin/user_management.py
import logging

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.filters import StateFilter

import asyncpg

from database.users_db import get_user, update_user_access_level, get_all_users, is_user_authorized, update_user_authorization_status
from keyboards.admin_keyboard import get_users_list_keyboard, get_user_actions_keyboard, get_confirm_action_keyboard, get_access_level_keyboard
from common.constants import USERS_PER_PAGE, ACCESS_LEVEL_BUTTONS
from common.messages import get_access_level_description

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Å—Ç–∞–Ω–∏ —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä –∞–¥–º—ñ–Ω–∞
from common.states import AdminStates
from filters.admin_filter import AdminAccessFilter
from keyboards.callback_factories import AdminCallback, UserActionCallback, AccessLevelCallback

logger = logging.getLogger(__name__)

router = Router()

# –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –∞–¥–º—ñ–Ω-–¥–æ—Å—Ç—É–ø—É –¥–æ –≤—Å—å–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
router.callback_query.filter(AdminAccessFilter())
router.message.filter(AdminAccessFilter()) # –•–æ—á–∞ –≤ —Ü—å–æ–º—É —Ä–æ—É—Ç–µ—Ä—ñ –Ω–µ–º–∞—î message —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤, —Ü–µ –±–µ–∑–ø–µ—á–Ω–æ


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–∏–±–æ—Ä—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑—ñ —Å–ø–∏—Å–∫—É
@router.callback_query(AdminCallback.filter(F.action == "select_user"), AdminStates.user_management)
async def process_select_user(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_pool: asyncpg.Pool,
    callback_data: AdminCallback
) -> None:
    user_id_to_manage = callback_data.user_id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} –æ–±—Ä–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_manage} –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è.")

    if not user_id_to_manage:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–∫–∞–∑–∞–Ω–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.", show_alert=True)
        return

    user_info = await get_user(db_pool, user_id_to_manage)
    if not user_info:
        await callback.answer("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        return

    is_auth = await is_user_authorized(db_pool, user_id_to_manage)
    current_level = user_info.get('access_level', 0)
    
    # –û–Ω–æ–≤–ª—é—î–º–æ FSM-–¥–∞–Ω—ñ, —â–æ–± –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–∏–º –∫–µ—Ä—É—î–º–æ
    await state.update_data(selected_user_id=user_id_to_manage, current_user_access_level=current_level)

    keyboard = get_user_actions_keyboard(is_auth, current_level, user_id_to_manage)
    
    access_level_name, _ = get_access_level_description(current_level, ACCESS_LEVEL_BUTTONS)
    user_info_text = (
        f"<b>üõ†Ô∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º:</b>\n\n"
        f"<b>ID:</b> <code>{user_info.get('id')}</code>\n"
        f"<b>–Ü–º'—è:</b> {user_info.get('first_name', 'N/A')} {user_info.get('last_name', '')}\n"
        f"<b>Username:</b> @{user_info.get('username', 'N/A')}\n"
        f"<b>–†—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É:</b> {access_level_name} ({current_level})\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {'–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π ‚úÖ' if is_auth else '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π ‚ùå'}"
    )

    await callback.message.edit_text(
        user_info_text,
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó/–¥–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@router.callback_query(UserActionCallback.filter(F.action.in_({"authorize", "unauthorize"})), AdminStates.user_management)
async def process_authorize_unauthorize_user(
    callback: types.CallbackQuery,
    state: FSMContext,
    callback_data: UserActionCallback
) -> None:
    user_id_to_manage = callback_data.user_id
    action = callback_data.action # 'authorize' –∞–±–æ 'unauthorize'
    
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} —ñ–Ω—ñ—Ü—ñ—é–≤–∞–≤ {action} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_manage}.")

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥—ñ—é –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    await state.update_data(pending_action=action, pending_user_id=user_id_to_manage)
    await state.set_state(AdminStates.confirm_action)

    confirm_text = ""
    if action == "authorize":
        confirm_text = f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ <b>–∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏</b> –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{user_id_to_manage}</code>?"
    else:
        confirm_text = f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ <b>–¥–µ–∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏</b> –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{user_id_to_manage}</code>?"
    
    keyboard = get_confirm_action_keyboard(action, user_id_to_manage)

    await callback.message.edit_text(
        confirm_text,
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó/–¥–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
@router.callback_query(UserActionCallback.filter(F.action.startswith("confirm_")), AdminStates.confirm_action)
async def confirm_authorize_unauthorize_user(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_pool: asyncpg.Pool,
    callback_data: UserActionCallback # –¶–µ–π callback_data –º–æ–∂–µ –±—É—Ç–∏ UserActionCallback –∞–±–æ AccessLevelCallback
) -> None:
    user_id_to_manage = callback_data.user_id
    action_type = callback_data.action.replace("confirm_", "") # 'authorize', 'unauthorize' –∞–±–æ 'set_level'

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ {action_type} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_manage}.")

    success_message = ""
    error_message = ""

    try:
        if action_type == "authorize":
            logger.info(f"–°–ø—Ä–æ–±–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–ª—è user_id={user_id_to_manage} –Ω–∞ TRUE.")
            await update_user_authorization_status(db_pool, user_id_to_manage, True)
            success_message = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{user_id_to_manage}</code> —É—Å–ø—ñ—à–Ω–æ <b>–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ</b>."
            error_message = f"–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{user_id_to_manage}</code>."
        elif action_type == "unauthorize":
            logger.info(f"–°–ø—Ä–æ–±–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–ª—è user_id={user_id_to_manage} –Ω–∞ FALSE.")
            await update_user_authorization_status(db_pool, user_id_to_manage, False)
            success_message = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{user_id_to_manage}</code> —É—Å–ø—ñ—à–Ω–æ <b>–¥–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ</b>."
            error_message = f"–ü–æ–º–∏–ª–∫–∞ –¥–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{user_id_to_manage}</code>."
        elif action_type == "set_level":
            # –í–ò–ü–†–ê–í–õ–ï–ù–û: –û—Ç—Ä–∏–º—É—î–º–æ new_level –∑ FSMContext
            state_data = await state.get_data()
            new_level = state_data.get("pending_level")
            
            if new_level is None:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞: 'pending_level' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ FSMContext –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_manage}.")
                await callback.message.edit_text("–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –Ω–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É.", parse_mode=ParseMode.HTML)
                await state.set_state(AdminStates.user_management)
                await callback.answer()
                return

            logger.info(f"–°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–ª—è user_id={user_id_to_manage} –Ω–∞ —Ä—ñ–≤–µ–Ω—å={new_level}.")
            await update_user_access_level(db_pool, user_id_to_manage, new_level)
            success_message = f"–†—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{user_id_to_manage}</code> –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ <b>{new_level}</b>."
            error_message = f"–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{user_id_to_manage}</code> –Ω–∞ {new_level}."
        else:
            await callback.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.", show_alert=True)
            return

        await state.set_state(AdminStates.user_management)
        await callback.message.edit_text(success_message, parse_mode=ParseMode.HTML)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å {action_type} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_manage}: {e}", exc_info=True)
        await callback.message.edit_text(error_message + f" –ü—Ä–∏—á–∏–Ω–∞: {e}", parse_mode=ParseMode.HTML)
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –∞–±–æ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    await state.set_state(AdminStates.user_management)
    # –ó–Ω–æ–≤—É –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ —Å–ø–∏—Å–æ–∫
    user_info = await get_user(db_pool, user_id_to_manage) 
    if user_info:
        is_auth = await is_user_authorized(db_pool, user_id_to_manage)
        current_level = user_info.get('access_level', 0)
        keyboard = get_user_actions_keyboard(is_auth, current_level, user_id_to_manage)
        
        access_level_name, _ = get_access_level_description(current_level, ACCESS_LEVEL_BUTTONS)
        user_info_text = (
            f"<b>üõ†Ô∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º:</b>\n\n"
            f"<b>ID:</b> <code>{user_info.get('id')}</code>\n"
            f"<b>–Ü–º'—è:</b> {user_info.get('first_name', 'N/A')} {user_info.get('last_name', '')}\n"
            f"<b>Username:</b> @{user_info.get('username', 'N/A')}\n"
            f"<b>–†—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É:</b> {access_level_name} ({current_level})\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {'–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π ‚úÖ' if is_auth else '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π ‚ùå'}"
        )
        await callback.message.edit_text(user_info_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    else:
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –ø—ñ—Å–ª—è –¥—ñ—ó, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ —Å–ø–∏—Å–∫—É
        users = await get_all_users(db_pool)
        current_page = (await state.get_data()).get("users_list_page", 0)
        keyboard = get_users_list_keyboard(users, current_page, USERS_PER_PAGE)
        await callback.message.edit_text(
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{user_id_to_manage}</code> –æ–Ω–æ–≤–ª–µ–Ω–æ. –û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –¥—ñ—ó (–ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∫—Ä–æ–∫—É)
@router.callback_query(AdminCallback.filter(F.action == "cancel_action"), AdminStates.confirm_action)
async def cancel_action(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_pool: asyncpg.Pool
) -> None:
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} —Å–∫–∞—Å—É–≤–∞–≤ –¥—ñ—é.")
    state_data = await state.get_data()
    user_id_to_manage = state_data.get("pending_user_id")

    if user_id_to_manage:
        user_info = await get_user(db_pool, user_id_to_manage)
        if user_info:
            is_auth = await is_user_authorized(db_pool, user_id_to_manage)
            current_level = user_info.get('access_level', 0)
            keyboard = get_user_actions_keyboard(is_auth, current_level, user_id_to_manage)
            
            access_level_name, _ = get_access_level_description(current_level, ACCESS_LEVEL_BUTTONS)
            user_info_text = (
                f"<b>üõ†Ô∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º:</b>\n\n"
                f"<b>ID:</b> <code>{user_info.get('id')}</code>\n"
                f"<b>–Ü–º'—è:</b> {user_info.get('first_name', 'N/A')} {user_info.get('last_name', '')}\n"
                f"<b>Username:</b> @{user_info.get('username', 'N/A')}\n"
                f"<b>–†—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É:</b> {access_level_name} ({current_level})\n"
                f"<b>–°—Ç–∞—Ç—É—Å:</b> {'–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π ‚úÖ' if is_auth else '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π ‚ùå'}"
            )
            await callback.message.edit_text(user_info_text, reply_markup=keyboard, parse_mode=ParseMode.HTML) 
        else:
            await callback.message.edit_text("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.",
                                             reply_markup=get_users_list_keyboard(await get_all_users(db_pool), (await state.get_data()).get("users_list_page", 0), USERS_PER_PAGE),
                                             parse_mode=ParseMode.HTML)
    else:
        await callback.message.edit_text("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.",
                                         reply_markup=get_users_list_keyboard(await get_all_users(db_pool), (await state.get_data()).get("users_list_page", 0), USERS_PER_PAGE),
                                         parse_mode=ParseMode.HTML)
    
    await state.set_state(AdminStates.user_management)
    await state.update_data(pending_action=None, pending_user_id=None, pending_level=None) # –û—á–∏—â–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ –ø—Ä–æ –æ—á—ñ–∫—É–≤–∞–Ω—É –¥—ñ—é
    await callback.answer()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–º—ñ–Ω–∏ —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É
@router.callback_query(AdminCallback.filter(F.action == "change_access_level"), AdminStates.user_management)
async def process_change_access_level(
    callback: types.CallbackQuery,
    state: FSMContext,
    callback_data: AdminCallback
) -> None:
    user_id_to_manage = callback_data.user_id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} —ñ–Ω—ñ—Ü—ñ—é–≤–∞–≤ –∑–º—ñ–Ω—É —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–ª—è {user_id_to_manage}.")

    await state.set_state(AdminStates.set_access_level)
    await state.update_data(selected_user_id=user_id_to_manage) # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ user_id_to_manage –≤ FSM
    
    keyboard = get_access_level_keyboard(user_id_to_manage)
    
    await callback.message.edit_text(
        f"–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{user_id_to_manage}</code>:",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–∏–±–æ—Ä—É –Ω–æ–≤–æ–≥–æ —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É
@router.callback_query(AccessLevelCallback.filter(), AdminStates.set_access_level)
async def set_new_access_level(
    callback: types.CallbackQuery,
    state: FSMContext,
    callback_data: AccessLevelCallback
) -> None:
    new_level = callback_data.level
    user_id_to_manage = callback_data.user_id # –û—Ç—Ä–∏–º—É—î–º–æ user_id –∑ callback_data
    
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} –æ–±—Ä–∞–≤ —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É {new_level} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_manage}.")

    if not user_id_to_manage:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∑–º—ñ–Ω–∏ —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É.", show_alert=True)
        await state.set_state(AdminStates.user_management) # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –∫—Ä–æ–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    await state.update_data(pending_action="set_level", pending_user_id=user_id_to_manage, pending_level=new_level) # <--- –¢–£–¢ –ó–ë–ï–†–Ü–ì–ê–Ñ–ú–û pending_level
    await state.set_state(AdminStates.confirm_action)

    level_name = next((name for level, name in ACCESS_LEVEL_BUTTONS if level == new_level), str(new_level))

    confirm_text = (
        f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ "
        f"<code>{user_id_to_manage}</code> –Ω–∞ <b>{level_name} ({new_level})</b>?"
    )
    keyboard = get_confirm_action_keyboard("set_level", user_id_to_manage, new_level)

    await callback.message.edit_text(
        confirm_text,
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()