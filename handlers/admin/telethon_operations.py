# handlers/admin/telethon_operations.py

import logging
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from telethon import TelegramClient, events
from telethon.sessions import StringSession

from database.users_db import get_user_access_level
from common.telethon_states import TelethonAuthStates

# <--- –ó–ú–Ü–ù–ê –¢–£–¢: –û–Ω–æ–≤–ª–µ–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä
from keyboards.admin_keyboard import get_admin_main_keyboard, get_telethon_actions_keyboard # –ó–º—ñ–Ω–µ–Ω–æ admin_main_menu_keyboard –Ω–∞ get_admin_main_keyboard
# telethon_api_menu_keyboard —Ç–∞ telethon_login_keyboard —Ç—É—Ç –Ω–µ —ñ–º–ø–æ—Ä—Ç—É—é—Ç—å—Å—è, –æ—Å–∫—ñ–ª—å–∫–∏ —ó—Ö –Ω–µ–º–∞—î –≤ admin_keyboard.py
# –ù–∞—Ç–æ–º—ñ—Å—Ç—å, –º–∏ –±—É–¥–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ get_telethon_actions_keyboard —Ç–∞ —Å—Ç–≤–æ—Ä–∏–º–æ —Ç–∏–º—á–∞—Å–æ–≤—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤—Ö–æ–¥—É

logger = logging.getLogger(__name__)
router = Router()


@router.callback_query(F.data == "admin_telethon_api")
async def show_telethon_api_menu(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    text = "üîê **TeleKey ¬∑ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è API-–∑–≤‚Äô—è–∑–∫—É**\n\n" \
           "–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–µ—Å—ñ—è–º–∏ Telethon –∫–ª—ñ—î–Ω—Ç—ñ–≤. " \
           "–¶–µ –¥–æ–∑–≤–æ–ª–∏—Ç—å –±–æ—Ç—É –≤–∑–∞—î–º–æ–¥—ñ—è—Ç–∏ –∑ Telegram –≤—ñ–¥ —ñ–º–µ–Ω—ñ —ñ–Ω—à–æ–≥–æ –æ–±–ª—ñ–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É."
    # <--- –ó–ú–Ü–ù–ê –¢–£–¢: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ get_telethon_actions_keyboard
    await callback.message.edit_text(text, reply_markup=get_telethon_actions_keyboard()) 
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ 'üîê TeleKey ¬∑ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è API-–∑–≤‚Äô—è–∑–∫—É'.")


@router.callback_query(F.data == "telethon_auth_status")
async def check_telethon_status(callback: CallbackQuery, telethon_manager, db_pool):
    await callback.answer("–ü–µ—Ä–µ–≤—ñ—Ä—è—é —Å—Ç–∞—Ç—É—Å Telethon —Å–µ—Å—ñ–π...", cache_time=1)
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} –ø–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç—É—Å Telethon.")

    active_clients_count = len(telethon_manager.get_all_active_clients())
    
    # –ú–æ–∂–Ω–∞ —Ç–∞–∫–æ–∂ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —î —Å–µ—Å—ñ—ó –≤ –ë–î, —è–∫—ñ —â–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ñ
    db_sessions = await db_pool.fetch("SELECT phone_number FROM telethon_sessions")
    db_sessions_count = len(db_sessions)

    text = f"üåê **–°—Ç–∞—Ç—É—Å Telethon —Å–µ—Å—ñ–π**\n\n" \
           f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∏—Ö –ø—ñ–¥–∫–ª—é—á–µ–Ω—å: `{active_clients_count}`\n" \
           f"üóÑÔ∏è –ó–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Å–µ—Å—ñ–π —É –ë–î: `{db_sessions_count}`"

    if active_clients_count > 0:
        text += "\n\n**–ê–∫—Ç–∏–≤–Ω—ñ –Ω–æ–º–µ—Ä–∏:**\n"
        for phone, client in telethon_manager.get_all_active_clients().items():
            try:
                # –¶–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π –≤–∏–∫–ª–∏–∫, —Ç–æ–º—É –π–æ–≥–æ –∫—Ä–∞—â–µ –∑—Ä–æ–±–∏—Ç–∏ –æ–∫—Ä–µ–º–æ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—ñ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π
                # –£–Ω–∏–∫–Ω–µ–º–æ –π–æ–≥–æ —Ç—É—Ç, —â–æ–± –Ω–µ —É–ø–æ–≤—ñ–ª—å–Ω—é–≤–∞—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å, —è–∫—â–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ –±–∞–≥–∞—Ç–æ
                pass 
            except Exception:
                pass
            text += f"- `{phone}`\n"
    else:
        text += "\n\n*–ù–∞—Ä–∞–∑—ñ –∞–∫—Ç–∏–≤–Ω–∏—Ö Telethon –∫–ª—ñ—î–Ω—Ç—ñ–≤ –Ω–µ–º–∞—î.*"

    # <--- –ó–ú–Ü–ù–ê –¢–£–¢: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ get_telethon_actions_keyboard
    await callback.message.edit_text(text, reply_markup=get_telethon_actions_keyboard())


@router.callback_query(F.data == "telethon_authorize") # –¶–µ–π callback_data, –π–º–æ–≤—ñ—Ä–Ω–æ, –º–∞—î –±—É—Ç–∏ "telethon_start_auth"
async def start_telethon_authorization(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # <--- –î–û–î–ê–ù–û –¢–£–¢: –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Å—Ç—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤—Ö–æ–¥—É, –æ—Å–∫—ñ–ª—å–∫–∏ telethon_login_keyboard –≤—ñ–¥—Å—É—Ç–Ω—è
    login_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í—ñ–¥–º—ñ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó", callback_data="telethon_cancel_auth")]
    ])

    await callback.message.edit_text("üìû **–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Telethon**\n\n"
                                     "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `+380XXXXXXXXX`):",
                                     reply_markup=login_keyboard) # <--- –ó–ú–Ü–ù–ê –¢–£–¢: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    await state.set_state(TelethonAuthStates.waiting_for_phone_number) 
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} —ñ–Ω—ñ—Ü—ñ—é–≤–∞–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é Telethon.")


@router.message(TelethonAuthStates.waiting_for_phone_number) 
async def handle_telethon_input(message: Message, state: FSMContext, telethon_manager, db_pool):
    phone_number = message.text.strip()

    if not phone_number.startswith('+') or not phone_number[1:].isdigit():
        # <--- –î–û–î–ê–ù–û –¢–£–¢: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        login_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í—ñ–¥–º—ñ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó", callback_data="telethon_cancel_auth")]
        ])
        await message.reply("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ `+380XXXXXXXXX`.", reply_markup=login_keyboard)
        return

    await state.update_data(phone_number=phone_number)

    try:
        session_string = await telethon_manager.load_session_from_db(phone_number, db_pool)
        
        if session_string:
            client = TelegramClient(StringSession(session_string), telethon_manager.api_id, telethon_manager.api_hash)
            logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ StringSession –¥–ª—è {phone_number} –∑ –ë–î.")
        else:
            client = TelegramClient(StringSession(), telethon_manager.api_id, telethon_manager.api_hash)
            logger.info(f"–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π TelethonClient –¥–ª—è {phone_number} (–±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–æ—ó —Å–µ—Å—ñ—ó).")

        telethon_manager.add_client(phone_number, client)

        # <--- –î–û–î–ê–ù–û –¢–£–¢: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –∫–æ–¥—É
        login_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í—ñ–¥–º—ñ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó", callback_data="telethon_cancel_auth")]
        ])
        await message.reply(f"–°–ø—Ä–æ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ–¥—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–ª—è {phone_number}...", reply_markup=login_keyboard)
        logger.info(f"–°–ø—Ä–æ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ–¥—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–ª—è {phone_number}...")

        await client.connect()
        if not await client.is_user_authorized():
            try:
                phone_code_hash = (await client.send_code_request(phone_number)).phone_code_hash
                await state.update_data(phone_code_hash=phone_code_hash)
                await message.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ–¥, —è–∫–∏–π –≤–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤ Telegram:", reply_markup=login_keyboard)
                await state.set_state(TelethonAuthStates.waiting_for_code)
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ–¥—É –¥–ª—è {phone_number}: {e}", exc_info=True)
                await message.reply(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ–¥—É: {e}. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É.", reply_markup=login_keyboard)
                await state.set_state(None)
                if phone_number in telethon_manager.clients:
                    await telethon_manager.clients[phone_number].disconnect()
                    telethon_manager.clients.pop(phone_number)
                return
        else:
            await telethon_manager.save_session_to_db(phone_number, client, db_pool)
            await message.reply(f"–ö–ª—ñ—î–Ω—Ç {phone_number} –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ.", reply_markup=get_telethon_actions_keyboard())
            await state.set_state(None)

    except Exception as e:
        logger.error(f"–ù–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ handle_telethon_input: {e}", exc_info=True)
        # <--- –î–û–î–ê–ù–û –¢–£–¢: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        login_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í—ñ–¥–º—ñ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó", callback_data="telethon_cancel_auth")]
        ])
        await message.reply(f"–í–∏–Ω–∏–∫–ª–∞ –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=login_keyboard)
        await state.set_state(None)
        if phone_number in telethon_manager.clients:
            await telethon_manager.clients[phone_number].disconnect()
            telethon_manager.clients.pop(phone_number)


@router.message(TelethonAuthStates.waiting_for_code) 
async def handle_telethon_code(message: Message, state: FSMContext, telethon_manager, db_pool):
    code = message.text.strip()
    user_data = await state.get_data()
    phone_number = user_data.get('phone_number')
    phone_code_hash = user_data.get('phone_code_hash')

    # <--- –î–û–î–ê–ù–û –¢–£–¢: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    login_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í—ñ–¥–º—ñ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó", callback_data="telethon_cancel_auth")]
    ])

    if not phone_number or not phone_code_hash:
        await message.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –∑–Ω–æ–≤—É.", reply_markup=login_keyboard)
        await state.set_state(None)
        return

    client = telethon_manager.get_client(phone_number)
    if not client:
        await message.reply("–ö–ª—ñ—î–Ω—Ç Telethon –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –∑–Ω–æ–≤—É.", reply_markup=login_keyboard)
        await state.set_state(None)
        return

    try:
        await client.sign_in(phone=phone_number, code=code, phone_code_hash=phone_code_hash)
        await telethon_manager.save_session_to_db(phone_number, client, db_pool)
        
        me = await client.get_me()
        await message.reply(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞ {phone_number} —è–∫ **{me.first_name}** (ID: {me.id}).", reply_markup=get_telethon_actions_keyboard())
        logger.info(f"–ö–ª—ñ—î–Ω—Ç {phone_number} —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ —è–∫ {me.first_name} (ID: {me.id}).")
        await state.set_state(None)
        # –ù–µ –≤–∏–∫–ª–∏–∫–∞—î–º–æ show_telethon_api_menu —á–µ—Ä–µ–∑ callback, –±–æ –≤–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é.
        # –ó–∞–º—ñ—Å—Ç—å —Ü—å–æ–≥–æ, –º–æ–∂–Ω–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ —Å—Ç–∞–Ω –¥–æ None, —è–∫—â–æ –≤–≤–∞–∂–∞—î—Ç—å—Å—è, —â–æ flow –∑–∞–≤–µ—Ä—à–µ–Ω–æ.
        # –ê–±–æ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–æ–≤—É –ø–æ–±–∞—á–∏–≤ –º–µ–Ω—é, –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –π–æ–≥–æ.
        # await show_telethon_api_menu(callback=message, state=state) # –¶–µ–π —Ä—è–¥–æ–∫ –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–∏–π –∞–±–æ –∑–º—ñ–Ω–µ–Ω–∏–π

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –∑–∞ –∫–æ–¥–æ–º –¥–ª—è {phone_number}: {e}", exc_info=True)
        if "session password" in str(e).lower() or isinstance(e, events.RpcCallError) and e.code == 400 and "PASSWORD_REQUIRED" in e.text:
            await message.reply("–ü–æ—Ç—Ä—ñ–±–µ–Ω –¥–≤–æ—Ñ–∞–∫—Ç–æ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ:", reply_markup=login_keyboard)
            await state.set_state(TelethonAuthStates.waiting_for_2fa_password)
        else:
            await message.reply(f"–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {e}. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–¥.", reply_markup=login_keyboard)
            await state.set_state(None)
            if phone_number in telethon_manager.clients:
                await telethon_manager.clients[phone_number].disconnect()
                telethon_manager.clients.pop(phone_number)


@router.message(TelethonAuthStates.waiting_for_2fa_password) 
async def handle_telethon_2fa_password(message: Message, state: FSMContext, telethon_manager, db_pool):
    password = message.text.strip()
    user_data = await state.get_data()
    phone_number = user_data.get('phone_number')

    # <--- –î–û–î–ê–ù–û –¢–£–¢: –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    login_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í—ñ–¥–º—ñ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó", callback_data="telethon_cancel_auth")]
    ])

    if not phone_number:
        await message.reply("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –∑–Ω–æ–≤—É.", reply_markup=login_keyboard)
        await state.set_state(None)
        return

    client = telethon_manager.get_client(phone_number)
    if not client:
        await message.reply("–ö–ª—ñ—î–Ω—Ç Telethon –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –∑–Ω–æ–≤—É.", reply_markup=login_keyboard)
        await state.set_state(None)
        return

    try:
        await client.sign_in(password=password)
        await telethon_manager.save_session_to_db(phone_number, client, db_pool)
        
        me = await client.get_me()
        await message.reply(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ –∫–ª—ñ—î–Ω—Ç–∞ {phone_number} —è–∫ **{me.first_name}** (ID: {me.id}) –∑ 2FA.", reply_markup=get_telethon_actions_keyboard())
        logger.info(f"–ö–ª—ñ—î–Ω—Ç {phone_number} —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ –∑ 2FA —è–∫ {me.first_name} (ID: {me.id}).")
        await state.set_state(None)
        # –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–æ, —è–∫ –≤–∏—â–µ, –º–æ–∂–Ω–∞ –Ω–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ show_telethon_api_menu —á–µ—Ä–µ–∑ callback
        # await show_telethon_api_menu(callback=message, state=state)

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó 2FA –¥–ª—è {phone_number}: {e}", exc_info=True)
        await message.reply(f"–ü–æ–º–∏–ª–∫–∞ 2FA: {e}. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–∞—Ä–æ–ª—å.", reply_markup=login_keyboard)
        await state.set_state(None)
        if phone_number in telethon_manager.clients:
            await telethon_manager.clients[phone_number].disconnect()
            telethon_manager.clients.pop(phone_number)