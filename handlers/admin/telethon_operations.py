# handlers/admin/telethon_operations.py

import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from telethon import TelegramClient
from telethon.sessions import StringSession
from telethon.errors import (
    SessionPasswordNeededError, FloodWaitError, AuthKeyUnregisteredError,
    PhoneCodeExpiredError, PhoneCodeInvalidError,
)
from telethon.tl.functions.channels import JoinChannelRequest # –¶–µ–π —ñ–º–ø–æ—Ä—Ç —Ç–∞–∫–æ–∂ –º–æ–∂–µ –±—É—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–∏–π, —è–∫—â–æ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω

# --- –Ü–ú–ü–û–†–¢–ò –ö–õ–ê–í–Ü–ê–¢–£–† ---
from keyboards.admin_keyboard import (
    get_admin_main_keyboard,
    get_telethon_actions_keyboard,
    # get_telethon_code_retry_keyboard, # –í–∏–¥–∞–ª—è—î–º–æ, –±–æ –Ω–µ –±—É–¥–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
    get_cancel_keyboard,
)
from keyboards.callback_factories import AdminCallback

# --- –Ü–ú–ü–û–†–¢–ò –ó common ---
from common.states import AdminStates
from common.messages import TELETHON_AUTH_MESSAGES

from config import config
from telegram_client_module.telethon_client import TelethonClientManager

logger = logging.getLogger(__name__)

router = Router()

@router.callback_query(AdminCallback.filter(F.action == "telethon_auth"))
async def show_telethon_menu(callback: CallbackQuery):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} –≤—ñ–¥–∫—Ä–∏–≤ –º–µ–Ω—é 'TeleKey ¬∑ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è API-–∑–≤‚Äô—è–∑–∫—É'.")
    await callback.answer()
    await callback.message.edit_text(
        TELETHON_AUTH_MESSAGES["telethon_main_menu"],
        reply_markup=get_telethon_actions_keyboard()
    )

# --- –í–ò–î–ê–õ–ï–ù–û: handle_telethon_start_auth ---
# --- –í–ò–î–ê–õ–ï–ù–û: process_phone_number ---
# --- –í–ò–î–ê–õ–ï–ù–û: resend_telethon_code ---
# --- –í–ò–î–ê–õ–ï–ù–û: process_code ---
# --- –í–ò–î–ê–õ–ï–ù–û: process_password ---
# --- –í–ò–î–ê–õ–ï–ù–û: handle_telethon_cancel_auth ---

@router.callback_query(AdminCallback.filter(F.action == "telethon_check_status"))
async def check_telethon_status(callback: CallbackQuery, telethon_manager: TelethonClientManager):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å Telethon'.")
    await callback.answer(TELETHON_AUTH_MESSAGES["telethon_checking_status"], show_alert=False)

    all_client_statuses = await telethon_manager.get_all_client_statuses()

    if not all_client_statuses:
        await callback.message.edit_text(
            TELETHON_AUTH_MESSAGES["telethon_no_sessions_found"],
            reply_markup=get_telethon_actions_keyboard()
        )
        return

    status_messages = []
    for client_status in all_client_statuses:
        is_authorized = client_status['authorized']
        info = client_status['info']

        phone_number = info.get('phone', 'N/A')
        user_id = info.get('id', 'N/A')
        first_name = info.get('first_name', 'N/A')
        username = info.get('username', '–í—ñ–¥—Å—É—Ç–Ω—ñ–π')

        if is_authorized:
            status_messages.append(
                f"‚úÖ **Telethon –∫–ª—ñ—î–Ω—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π.**\n"
                f"**ID:** `{user_id}`\n"
                f"**–Ü–º'—è:** `{first_name}`\n"
                f"**–Æ–∑–µ—Ä–Ω–µ–π–º:** `{username}`\n"
                f"üìû –ù–æ–º–µ—Ä: `{phone_number}`"
            )
        else:
            status_messages.append(
                f"‚ùå **Telethon –∫–ª—ñ—î–Ω—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π.**\n"
                f"üìû –ù–æ–º–µ—Ä: `{phone_number}`\n"
                f"–°—Ç–∞—Ç—É—Å: {info.get('status', '–ù–µ–≤—ñ–¥–æ–º–æ')}"
            )

    response_text = "<b>–ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å Telethon-–∫–ª—ñ—î–Ω—Ç—ñ–≤:</b>\n\n" + "\n\n".join(status_messages)
    await callback.message.edit_text(
        response_text,
        reply_markup=get_telethon_actions_keyboard(),
        parse_mode="HTML"
    )
    logger.info(f"–°—Ç–∞—Ç—É—Å Telethon-–∫–ª—ñ—î–Ω—Ç—ñ–≤ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {callback.from_user.id}.")

@router.callback_query(AdminCallback.filter(F.action == "telethon_delete_session"))
async def handle_telethon_delete_session_menu(callback: CallbackQuery, telethon_manager: TelethonClientManager):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–í–∏–¥–∞–ª–∏—Ç–∏ —Å–µ—Å—ñ—é üóëÔ∏è'.")
    await callback.answer()

    sessions_from_db = await telethon_manager.get_all_sessions_from_db()

    if not sessions_from_db:
        await callback.message.edit_text(
            TELETHON_AUTH_MESSAGES["telethon_no_sessions_to_delete"],
            reply_markup=get_telethon_actions_keyboard()
        )
        return

    buttons = []
    for session in sessions_from_db:
        phone_number = session['phone_number']
        buttons.append([InlineKeyboardButton(text=f"üóëÔ∏è {phone_number}", callback_data=AdminCallback(action="delete_specific_session", phone_number=phone_number).pack())])

    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=AdminCallback(action="telethon_auth").pack())])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text(
        TELETHON_AUTH_MESSAGES["telethon_session_select_delete"],
        reply_markup=keyboard
    )

@router.callback_query(AdminCallback.filter(F.action == "delete_specific_session"))
async def handle_delete_specific_session(callback: CallbackQuery, telethon_manager: TelethonClientManager, callback_data: AdminCallback):
    phone_number = callback_data.phone_number
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–µ—Å—ñ—é –¥–ª—è –Ω–æ–º–µ—Ä–∞ {phone_number}.")
    await callback.answer(f"–í–∏–¥–∞–ª—è—é —Å–µ—Å—ñ—é –¥–ª—è {phone_number}...", show_alert=False)

    try:
        client_to_disconnect = telethon_manager.get_client(phone_number)
        if client_to_disconnect and client_to_disconnect.is_connected():
            await client_to_disconnect.disconnect()
            telethon_manager.clients.pop(phone_number, None)
            logger.info(f"–ê–∫—Ç–∏–≤–Ω–∏–π –∫–ª—ñ—î–Ω—Ç –¥–ª—è {phone_number} –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∫–µ—à—É –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º —Å–µ—Å—ñ—ó –∑ –ë–î.")

        await telethon_manager.delete_session(phone_number)
        await callback.message.edit_text(
            TELETHON_AUTH_MESSAGES["session_deleted"].format(phone_number=phone_number),
            reply_markup=get_telethon_actions_keyboard()
        )
        logger.info(f"–°–µ—Å—ñ—è –¥–ª—è {phone_number} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {callback.from_user.id}.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å–µ—Å—ñ—ó –¥–ª—è {phone_number} (user {callback.from_user.id}): {e}", exc_info=True)
        await callback.message.edit_text(
            f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Å–µ—Å—ñ—ó –¥–ª—è {phone_number}: {e}",
            reply_markup=get_telethon_actions_keyboard()
        )

# –ù–û–í–Ü –•–ï–ù–î–õ–ï–†–ò –î–õ–Ø –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
@router.callback_query(AdminCallback.filter(F.action == "telethon_get_user_info"))
async def handle_telethon_get_user_info(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'.")
    await callback.answer()
    await callback.message.edit_text(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –π–æ–≥–æ —é–∑–µ—Ä–Ω–µ–π–º (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `@username`) –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_telethon_input)
    await state.update_data(telethon_action="get_user_info")

# --- –í–ò–î–ê–õ–ï–ù–û: handle_telethon_join_channel ---

@router.message(AdminStates.waiting_for_telethon_input)
async def process_telethon_input(message: Message, state: FSMContext, telethon_manager: TelethonClientManager):
    user_input = message.text.strip()
    user_id = message.from_user.id
    data = await state.get_data()
    telethon_action = data.get("telethon_action")

    if not telethon_action:
        logger.error(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–≤—ñ–≤ –¥–∞–Ω—ñ –¥–ª—è Telethon, –∞–ª–µ 'telethon_action' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É —Å—Ç–∞–Ω—ñ.")
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∏–π –∑–∞–ø–∏—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é TeleKey.",
                             reply_markup=get_telethon_actions_keyboard())
        await state.clear()
        return

    client = await telethon_manager.get_any_active_client()
    if not client:
        await message.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö Telethon-–∫–ª—ñ—î–Ω—Ç—ñ–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –¥—ñ—ó. –ë—É–¥—å –ª–∞—Å–∫–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ –∫–ª—ñ—î–Ω—Ç–∞.",
                             reply_markup=get_telethon_actions_keyboard())
        await state.clear()
        return
    
    if telethon_action == "get_user_info":
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–≤—ñ–≤ '{user_input}' –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
        try:
            entity = None
            try:
                entity = await client.get_entity(int(user_input))
            except ValueError:
                entity = await client.get_entity(user_input)

            if not entity:
                await message.answer("–°—É—Ç–Ω—ñ—Å—Ç—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –∑–∞ –Ω–∞–¥–∞–Ω–∏–º ID –∞–±–æ —é–∑–µ—Ä–Ω–µ–π–º–æ–º/–ø–æ—Å–∏–ª–∞–Ω–Ω—è–º.",
                                     reply_markup=get_telethon_actions_keyboard())
                await state.clear()
                return

            info_text = (
                f"<b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å—É—Ç–Ω—ñ—Å—Ç—å:</b>\n"
                f"<b>ID:</b> <code>{entity.id}</code>\n"
                f"<b>–¢–∏–ø:</b> {type(entity).__name__}\n"
                f"<b>–Ü–º'—è:</b> {getattr(entity, 'first_name', 'N/A')}\n"
                f"<b>–ü—Ä—ñ–∑–≤–∏—â–µ:</b> {getattr(entity, 'last_name', 'N/A')}\n"
                f"<b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{getattr(entity, 'username', 'N/A')}\n"
                f"<b>–ë–æ—Ç:</b> {'–¢–∞–∫' if getattr(entity, 'bot', False) else '–ù—ñ'}\n"
                f"<b>–ê–∫–∫–∞—É–Ω—Ç Telegram Premium:</b> {'–¢–∞–∫' if getattr(entity, 'premium', False) else '–ù—ñ'}\n"
                f"<b>–ü–æ—Å–∏–ª–∞–Ω–Ω—è:</b> {getattr(entity, 'url', 'N/A')}"
            )
            await message.answer(info_text, reply_markup=get_telethon_actions_keyboard(), parse_mode="HTML")

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å—É—Ç–Ω—ñ—Å—Ç—å –¥–ª—è {user_input}: {e}", exc_info=True)
            await message.answer(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é: {e}", reply_markup=get_telethon_actions_keyboard())
        finally:
            await state.clear()

    # --- –í–ò–î–ê–õ–ï–ù–û: elif telethon_action == "join_channel": ---

    else:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∏–π –∑–∞–ø–∏—Ç. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é TeleKey.",
                             reply_markup=get_telethon_actions_keyboard())
        await state.clear()