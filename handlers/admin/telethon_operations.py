import logging
from typing import Any, Optional 
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.filters import StateFilter
from aiogram.utils.keyboard import InlineKeyboardBuilder

from telethon.tl.types import Dialog, Channel, Chat, User 

from keyboards.admin_keyboard import get_telethon_actions_keyboard, get_chat_matrix_keyboard
from common.states import AdminStates
from filters.admin_filter import AdminAccessFilter
from keyboards.callback_factories import AdminCallback

import asyncpg 

# –Ü–º–ø–æ—Ä—Ç –∑ –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ —Ñ–∞–π–ª—É telethon_chats_db.py
from database.telethon_chats_db import add_telethon_allowed_chat, get_all_telethon_allowed_chats 

logger = logging.getLogger(__name__)

router = Router()

router.callback_query.filter(AdminAccessFilter())
router.message.filter(AdminAccessFilter())

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—Ö–æ–¥—É –≤ —Ä–æ–∑–¥—ñ–ª "–ß–∞—Ç-–º–∞—Ç—Ä–∏—Ü—è"
@router.callback_query(AdminCallback.filter(F.action == "chat_matrix"), StateFilter(AdminStates.admin_main))
async def process_chat_matrix(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ 'üí¨ –ß–∞—Ç-–º–∞—Ç—Ä–∏—Ü—è'.")
    await state.set_state(AdminStates.chat_matrix_management)
    keyboard = get_chat_matrix_keyboard()
    await callback.message.edit_text(
        "<b>üí¨ –ß–∞—Ç-–º–∞—Ç—Ä–∏—Ü—è:</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —á–∞—Ç–∞–º–∏:",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üìú –°–ø–∏—Å–æ–∫ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö —á–∞—Ç—ñ–≤"
@router.callback_query(AdminCallback.filter(F.action == "list_connected_chats"), StateFilter(AdminStates.chat_matrix_management))
async def process_list_connected_chats(callback: types.CallbackQuery, db_pool: asyncpg.Pool):
    user_id = callback.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–ø–∏—Ç–∞–≤ —Å–ø–∏—Å–æ–∫ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö —á–∞—Ç—ñ–≤.")

    chats = await get_all_telethon_allowed_chats(db_pool) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é

    if not chats:
        await callback.answer("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö —á–∞—Ç—ñ–≤.", show_alert=True)
        return

    response_text = "<b>üìú –°–ø–∏—Å–æ–∫ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö —á–∞—Ç—ñ–≤:</b>\n\n"
    for chat in chats:
        response_text += (
            f"‚ñ™Ô∏è {chat['chat_title']} (ID: <code>{chat['chat_id']}</code>) "
            f"[{chat['chat_type'].capitalize() if chat['chat_type'] else '–ù–µ–≤—ñ–¥–æ–º–æ'}] "
            f"{f'@{chat["username"]}' if chat['username'] else ''}\n"
        )
    
    keyboard = get_chat_matrix_keyboard() # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ —á–∞—Ç-–º–∞—Ç—Ä–∏—Ü—ñ

    await callback.message.edit_text(
        response_text,
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üîç –ü–æ—à—É–∫ —á–∞—Ç—ñ–≤"
@router.callback_query(AdminCallback.filter(F.action == "search_chats"), StateFilter(AdminStates.chat_matrix_management))
async def process_search_chats(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ 'üîç –ü–æ—à—É–∫ —á–∞—Ç—ñ–≤'.")
    await state.set_state(AdminStates.waiting_for_telethon_input) # –ó–º—ñ–Ω—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–æ–¥—É
    await state.update_data(telethon_auth_step="chat_search_query") # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∫—Ä–æ–∫
    await callback.message.edit_text(
        "<b>üîç –ü–æ—à—É–∫ —á–∞—Ç—ñ–≤:</b>\n\n–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —á–∞—Ç—É, –∫–∞–Ω–∞–ª—É –∞–±–æ —é–∑–µ—Ä–Ω–µ–π–º –¥–ª—è –ø–æ—à—É–∫—É:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –¥–æ –ß–∞—Ç-–º–∞—Ç—Ä–∏—Ü—ñ", callback_data=AdminCallback(action="chat_matrix").pack())]
        ]),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å Telethon üëÅÔ∏è"
@router.callback_query(AdminCallback.filter(F.action == "telethon_check_status"), StateFilter(AdminStates.telethon_management))
async def telethon_check_status(callback: types.CallbackQuery, telethon_manager: Any):
    user_id = callback.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç—É—Å Telethon.")

    status_message = "‚ùå Telethon API: –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –∞–±–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤."
    if telethon_manager and telethon_manager.clients:
        connected_clients = [
            phone for phone, client_obj in telethon_manager.clients.items() 
            if client_obj.is_connected()
        ]
        if connected_clients:
            status_message = "‚úÖ Telethon API: –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ —á–µ—Ä–µ–∑ " + ", ".join(connected_clients)
        else:
            status_message = "‚ùå Telethon API: —î –∫–ª—ñ—î–Ω—Ç–∏, –∞–ª–µ –∂–æ–¥–µ–Ω –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ."
    
    await callback.answer(status_message, show_alert=True)


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏ Telethon üîë"
@router.callback_query(AdminCallback.filter(F.action == "telethon_start_auth"), StateFilter(AdminStates.telethon_management))
async def telethon_start_auth(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —ñ–Ω—ñ—Ü—ñ—é–≤–∞–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é Telethon.")
    
    await state.set_state(AdminStates.waiting_for_telethon_input)
    await state.update_data(telethon_auth_step="phone_number")
    
    await callback.message.edit_text(
        "<b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Telethon:</b>\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó (—É —Ñ–æ—Ä–º–∞—Ç—ñ +380–•–•–•–•–•–•–•–•–•):",
        reply_markup=get_telethon_actions_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ üÜî"
@router.callback_query(AdminCallback.filter(F.action == "telethon_get_user_info"), StateFilter(AdminStates.telethon_management))
async def telethon_get_user_info(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —ñ–Ω—ñ—Ü—ñ—é–≤–∞–≤ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")
    await state.set_state(AdminStates.waiting_for_telethon_input)
    await state.update_data(telethon_auth_step="get_user_info")
    await callback.message.edit_text(
        "<b>–û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:</b>\n\n–í–≤–µ–¥—ñ—Ç—å ID –∞–±–æ —é–∑–µ—Ä–Ω–µ–π–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, @username –∞–±–æ 123456789):",
        reply_markup=get_telethon_actions_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –∫–∞–Ω–∞–ª—É ‚ûï"
@router.callback_query(AdminCallback.filter(F.action == "telethon_join_channel"), StateFilter(AdminStates.telethon_management))
async def telethon_join_channel_request(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —ñ–Ω—ñ—Ü—ñ—é–≤–∞–≤ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∫–∞–Ω–∞–ª—É.")
    await state.set_state(AdminStates.waiting_for_telethon_input)
    await state.update_data(telethon_auth_step="join_channel")
    await callback.message.edit_text(
        "<b>–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è –¥–æ –∫–∞–Ω–∞–ª—É:</b>\n\n–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, https://t.me/channel_username –∞–±–æ @channel_username):",
        reply_markup=get_telethon_actions_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–≤–æ–¥—É –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É —Å—Ç–∞–Ω—ñ waiting_for_telethon_input
@router.message(StateFilter(AdminStates.waiting_for_telethon_input))
async def handle_telethon_input(message: types.Message, state: FSMContext, telethon_manager: Any):
    user_id = message.from_user.id
    state_data = await state.get_data()
    auth_step = state_data.get("telethon_auth_step")
    user_input = message.text

    if not telethon_manager or not telethon_manager.clients:
        await message.answer(
            "Telethon –∫–ª—ñ—î–Ω—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∞–±–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.",
            reply_markup=get_telethon_actions_keyboard()
        )
        await state.set_state(AdminStates.telethon_management)
        return

    # –ù–∞—Ä–∞–∑—ñ –ø—Ä–∞—Ü—é—î–º–æ —Ç—ñ–ª—å–∫–∏ –∑ –ø–µ—Ä—à–∏–º –∫–ª—ñ—î–Ω—Ç–æ–º, —è–∫—â–æ —ó—Ö –¥–µ–∫—ñ–ª—å–∫–∞
    # –î–ª—è –±—ñ–ª—å—à —Å–∫–ª–∞–¥–Ω–æ—ó –ª–æ–≥—ñ–∫–∏ –º–æ–∂–Ω–∞ –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω—É –≤–∏–±–∏—Ä–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞
    first_phone = next(iter(telethon_manager.clients), None)
    if not first_phone:
        await message.answer(
            "–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å–µ—Å—ñ–π Telethon. –ë—É–¥—å –ª–∞—Å–∫–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.",
            reply_markup=get_telethon_actions_keyboard()
        )
        await state.set_state(AdminStates.telethon_management)
        return

    active_client = telethon_manager.clients[first_phone]

    if auth_step == "phone_number":
        phone_number = user_input
        # –î–æ–¥–∞–π—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —Ñ–æ—Ä–º–∞—Ç—É –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        await state.update_data(telethon_phone_number=phone_number)
        
        try:
            # –°–ø—Ä–æ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ–¥
            await active_client.send_code_request(phone_number)
            await state.update_data(telethon_auth_step="auth_code")
            await message.answer(
                f"–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {phone_number}. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ:",
                reply_markup=get_telethon_actions_keyboard()
            )
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∫–æ–¥—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–ª—è {phone_number}: {e}", exc_info=True)
            await message.answer(
                f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∫–æ–¥—É: {e}. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–æ–º–µ—Ä.",
                reply_markup=get_telethon_actions_keyboard()
            )
            await state.set_state(AdminStates.telethon_management)

    elif auth_step == "auth_code":
        phone_number = state_data.get("telethon_phone_number")
        auth_code = user_input
        
        try:
            # –°–ø—Ä–æ–±–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è
            await active_client.sign_in(phone_number, auth_code)
            await message.answer(
                "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! Telethon –∫–ª—ñ—î–Ω—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ.",
                reply_markup=get_telethon_actions_keyboard()
            )
            await state.set_state(AdminStates.telethon_management)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–ª—è {phone_number} –∑ –∫–æ–¥–æ–º {auth_code}: {e}", exc_info=True)
            await message.answer(
                f"–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {e}. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–¥ —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                reply_markup=get_telethon_actions_keyboard()
            )

    elif auth_step == "get_user_info":
        entity_id = user_input
        try:
            entity = await active_client.get_entity(entity_id)
            info_text = (
                f"<b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ–±'—î–∫—Ç:</b>\n"
                f"–Ü–º'—è/–ó–∞–≥–æ–ª–æ–≤–æ–∫: {getattr(entity, 'title', getattr(entity, 'first_name', 'N/A'))}\n"
                f"ID: <code>{entity.id}</code>\n"
                f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{entity.username if hasattr(entity, 'username') else 'N/A'}\n"
                f"–¢–∏–ø: {type(entity).__name__}"
            )
            await message.answer(info_text, parse_mode=ParseMode.HTML, reply_markup=get_telethon_actions_keyboard())
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Å—É—Ç–Ω—ñ—Å—Ç—å {entity_id}: {e}", exc_info=True)
            await message.answer(f"–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ '{entity_id}'. –ú–æ–∂–ª–∏–≤–æ, ID –Ω–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ —Å—É—Ç–Ω—ñ—Å—Ç—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_telethon_actions_keyboard())
        finally:
            await state.set_state(AdminStates.telethon_management)

    elif auth_step == "join_channel":
        channel_link = user_input
        try:
            await active_client(JoinChannelRequest(channel_link))
            await message.answer(
                f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –ø—Ä–∏—î–¥–Ω–∞–Ω–æ –¥–æ –∫–∞–Ω–∞–ª—É/—á–∞—Ç—É: {channel_link}",
                reply_markup=get_telethon_actions_keyboard()
            )
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—ñ –¥–æ –∫–∞–Ω–∞–ª—É {channel_link}: {e}", exc_info=True)
            await message.answer(
                f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—ñ –¥–æ –∫–∞–Ω–∞–ª—É: {e}. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è.",
                reply_markup=get_telethon_actions_keyboard()
            )
        finally:
            await state.set_state(AdminStates.telethon_management)
    
    elif auth_step == "chat_search_query":
        search_query = user_input
        if not search_query or len(search_query) < 3: 
            await message.answer(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 3 —Å–∏–º–≤–æ–ª–∏ –¥–ª—è –ø–æ—à—É–∫—É.",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –¥–æ –ß–∞—Ç-–º–∞—Ç—Ä–∏—Ü—ñ", callback_data=AdminCallback(action="chat_matrix").pack())]
                ])
            )
            return

        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–≤—ñ–≤ –∑–∞–ø–∏—Ç –¥–ª—è –ø–æ—à—É–∫—É —á–∞—Ç—ñ–≤: '{search_query}'.")

        # active_client –≤–∂–µ –º–∞—î –±—É—Ç–∏ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó
        if not active_client or not active_client.is_connected():
            await message.answer("–ö–ª—ñ—î–Ω—Ç Telethon –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–ø–æ—á–∞—Ç–∫—É.", reply_markup=get_chat_matrix_keyboard())
            await state.set_state(AdminStates.chat_matrix_management)
            return
        
        found_chats = []
        try:
            all_dialogs = await active_client.get_dialogs()
            for d in all_dialogs:
                title = d.title if d.title else ""
                username_str = f"@{d.entity.username}" if hasattr(d.entity, 'username') and d.entity.username else ""
                
                chat_type = "unknown"
                if isinstance(d.entity, Channel):
                    chat_type = "channel"
                elif isinstance(d.entity, Chat):
                    chat_type = "group"
                elif isinstance(d.entity, User):
                    chat_type = "user"

                # –î–æ–¥–∞—î–º–æ —á–∞—Ç–∏, —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –∑–∞–ø–∏—Ç—É. –Ø–∫—â–æ —á–∞—Ç —î Channel —á–∏ Chat, –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ.
                if (isinstance(d.entity, (Channel, Chat, User)) and 
                    (search_query.lower() in title.lower() or (username_str and search_query.lower() in username_str.lower()))):
                    found_chats.append({
                        "id": d.id,
                        "title": title,
                        "username": username_str.lstrip('@') if username_str else None,
                        "type": chat_type
                    })


        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É —á–∞—Ç—ñ–≤ —á–µ—Ä–µ–∑ Telethon: {e}", exc_info=True)
            await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É —á–∞—Ç—ñ–≤: {e}", reply_markup=get_chat_matrix_keyboard())
            await state.set_state(AdminStates.chat_matrix_management)
            return

        if found_chats:
            response_text = "<b>–ó–Ω–∞–π–¥–µ–Ω—ñ —á–∞—Ç–∏:</b>\n\n"
            keyboard_builder = InlineKeyboardBuilder()
            for chat_info in found_chats: # –¢–µ–ø–µ—Ä —ñ—Ç–µ—Ä—É—î–º–æ –ø–æ —Å–ª–æ–≤–Ω–∏–∫–∞—Ö –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —á–∞—Ç
                response_text += (
                    f"‚ñ™Ô∏è {chat_info['title']} (ID: <code>{chat_info['id']}</code>) "
                    f"[{chat_info['type'].capitalize()}] " 
                    f"{f'@{chat_info["username"]}' if chat_info['username'] else ''}\n" 
                )
                
                keyboard_builder.row(types.InlineKeyboardButton(
                    text=f"–î–æ–¥–∞—Ç–∏ '{chat_info['title']}' –¥–æ –ë–î", 
                    callback_data=AdminCallback(
                        action="add_chat_to_db", 
                        chat_id=chat_info['id'], 
                        chat_title=chat_info['title'],
                        chat_type=chat_info['type'],      
                        username=chat_info['username']    
                    ).pack()
                ))
            keyboard_builder.row(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –¥–æ –ß–∞—Ç-–º–∞—Ç—Ä–∏—Ü—ñ", callback_data=AdminCallback(action="chat_matrix").pack()))
            await message.answer(response_text, reply_markup=keyboard_builder.as_markup(), parse_mode=ParseMode.HTML)
        else:
            await message.answer(
                "–ù–∞ –∂–∞–ª—å, —á–∞—Ç—ñ–≤ –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –¥–æ –ß–∞—Ç-–º–∞—Ç—Ä–∏—Ü—ñ", callback_data=AdminCallback(action="chat_matrix").pack())]
                ])
            )
        await state.set_state(AdminStates.chat_matrix_management)
    else:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∏–π –∫—Ä–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")
        await state.set_state(AdminStates.telethon_management)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Ç—É –¥–æ –ë–î
@router.callback_query(AdminCallback.filter(F.action == "add_chat_to_db"))
async def add_chat_to_db(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_pool: asyncpg.Pool, 
    callback_data: AdminCallback
) -> None:
    chat_id = callback_data.chat_id
    chat_title = callback_data.chat_title
    chat_type = callback_data.chat_type 
    username = callback_data.username   
    user_id = callback.from_user.id

    if chat_id is None or chat_title is None:
        logger.error(f"–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Ç—É: chat_id={chat_id}, chat_title={chat_title}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: –≤—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ —á–∞—Ç—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è.", show_alert=True)
        await state.set_state(AdminStates.chat_matrix_management)
        await callback.message.edit_text(
            "<b>üí¨ –ß–∞—Ç-–º–∞—Ç—Ä–∏—Ü—è:</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —á–∞—Ç–∞–º–∏:",
            reply_markup=get_chat_matrix_keyboard(),
            parse_mode=ParseMode.HTML
        )
        return

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–ø—Ä–æ—Å–∏–≤ –¥–æ–¥–∞—Ç–∏ —á–∞—Ç '{chat_title}' (ID: {chat_id}, Type: {chat_type}, Username: {username}) –¥–æ 'telethon_allowed_chats'.")

    success = await add_telethon_allowed_chat(db_pool, chat_id, chat_title, chat_type, username, user_id)

    if success:
        await callback.answer(f"–ß–∞—Ç '{chat_title}' (ID: {chat_id}) –¥–æ–¥–∞–Ω–æ –¥–æ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö —á–∞—Ç—ñ–≤.", show_alert=True)
    else:
        await callback.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —á–∞—Ç—É '{chat_title}' (ID: {chat_id}). –ú–æ–∂–ª–∏–≤–æ, –≤—ñ–Ω –≤–∂–µ –¥–æ–¥–∞–Ω–∏–π –∞–±–æ –≤–∏–Ω–∏–∫–ª–∞ —ñ–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞.", show_alert=True)
    
    # –ü—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é —á–∞—Ç-–º–∞—Ç—Ä–∏—Ü—ñ
    await state.set_state(AdminStates.chat_matrix_management)
    keyboard = get_chat_matrix_keyboard()
    await callback.message.edit_text(
        "<b>üí¨ –ß–∞—Ç-–º–∞—Ç—Ä–∏—Ü—è:</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —á–∞—Ç–∞–º–∏:",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )