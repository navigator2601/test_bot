# handlers/admin/chat_matrix_handlers.py
import logging
from typing import Optional

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command

# –û–Ω–æ–≤–ª–µ–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä
from keyboards.admin_keyboard import (
    get_admin_main_keyboard,
    get_chat_matrix_keyboard,
    get_search_results_keyboard,
    get_allowed_chats_list_keyboard,
    get_chat_info_keyboard,
    get_confirm_delete_chat_keyboard,
    get_back_to_chat_matrix_keyboard # <--- –ü–ï–†–ï–í–Ü–†–¢–ï, –©–û –¶–ï–ô –†–Ø–î–û–ö –ü–†–ò–°–£–¢–ù–Ü–ô!
)
# –û–Ω–æ–≤–ª–µ–Ω–∏–π —ñ–º–ø–æ—Ä—Ç —Ñ–∞–±—Ä–∏–∫ –∫–æ–ª–±–µ–∫—ñ–≤
from keyboards.callback_factories import AdminCallback, ChatListCallback, ChatInfoCallback

from database.telethon_chats_db import add_telethon_allowed_chat, get_all_telethon_allowed_chats, get_telethon_allowed_chat_by_id, delete_telethon_allowed_chat

from common.states import AdminStates
from telegram_client_module.telethon_client import TelethonClientManager
from database.db_pool_manager import get_db_pool

logger = logging.getLogger(__name__)

router = Router()

# -----------------------------------------------------------
# Chat Matrix Menu
# -----------------------------------------------------------

@router.callback_query(AdminCallback.filter(F.action == "chat_matrix"))
async def show_chat_matrix_menu(callback_query: CallbackQuery, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback_query.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ 'üí¨ –ß–∞—Ç-–º–∞—Ç—Ä–∏—Ü—è' (–≤—Ö—ñ–¥ –≤ –º–µ–Ω—é).")
    await state.set_state(AdminStates.chat_matrix_management)
    await callback_query.message.edit_text(
        "**‚öôÔ∏è –ú–µ–Ω—é –ß–∞—Ç-–º–∞—Ç—Ä–∏—Ü—ñ:**\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=get_chat_matrix_keyboard(),
        parse_mode="Markdown"
    )
    await callback_query.answer()
    
# -----------------------------------------------------------
# Search Chats
# -----------------------------------------------------------

@router.callback_query(AdminCallback.filter(F.action == "search_chats_admin"))
async def ask_for_chat_search_query(callback_query: CallbackQuery, state: FSMContext):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback_query.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ü–æ—à—É–∫ —á–∞—Ç—ñ–≤' –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ –Ω—å–æ–≥–æ.")
    await callback_query.message.edit_text(
        "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —á–∞—Ç—É –¥–ª—è –ø–æ—à—É–∫—É:",
        reply_markup=get_back_to_chat_matrix_keyboard() # <--- –í–ò–ü–†–ê–í–õ–ï–ù–û –¢–£–¢! –î–æ–¥–∞–Ω–æ reply_markup
    )
    await state.set_state(AdminStates.waiting_for_chat_search_query)
    await callback_query.answer()


@router.message(AdminStates.waiting_for_chat_search_query)
async def process_chat_search_query(message: Message, state: FSMContext, telethon_manager: TelethonClientManager):
    chat_query = message.text

    active_clients = telethon_manager.get_all_active_clients()

    if not active_clients:
        await message.answer("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö Telethon –∫–ª—ñ—î–Ω—Ç—ñ–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ—à—É–∫—É.", reply_markup=get_chat_matrix_keyboard())
        await state.set_state(AdminStates.chat_matrix_management)
        return

    telethon_client = next(iter(active_clients.values()))

    if not telethon_client or not telethon_client.is_connected() or not await telethon_client.is_user_authorized():
        await message.answer("–ê–∫—Ç–∏–≤–Ω–∏–π Telethon –∫–ª—ñ—î–Ω—Ç –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –∞–±–æ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å—Ç–∞—Ç—É—Å –∫–ª—ñ—î–Ω—Ç–∞.", reply_markup=get_chat_matrix_keyboard())
        await state.set_state(AdminStates.chat_matrix_management)
        return

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–ª—è —á–∞—Ç—É: '{chat_query}'. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∫–ª—ñ—î–Ω—Ç: {list(active_clients.keys())[0]}")

    await message.answer(f"–®—É–∫–∞—é —á–∞—Ç–∏ –∑–∞ –∑–∞–ø–∏—Ç–æ–º '{chat_query}'...")

    try:
        found_chats = []
        
        db_pool = await get_db_pool()
        existing_allowed_chats = await get_all_telethon_allowed_chats(db_pool)
        existing_chat_ids = {chat['chat_id'] for chat in existing_allowed_chats}

        async for d in telethon_client.iter_dialogs():
            if d.is_group or d.is_channel:
                if chat_query.lower() in d.title.lower():
                    found_chats.append({
                        'chat_id': d.id,
                        'chat_title': d.title,
                        'is_added': d.id in existing_chat_ids
                    })

        if found_chats:
            await message.answer(
                "–ó–Ω–∞–π–¥–µ–Ω–æ —á–∞—Ç–∏:",
                reply_markup=get_search_results_keyboard(found_chats)
            )
        else:
            await message.answer("–ß–∞—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=get_chat_matrix_keyboard())
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É —á–∞—Ç—ñ–≤ —á–µ—Ä–µ–∑ Telethon –∫–ª—ñ—î–Ω—Ç–∞: {e}", exc_info=True)
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É —á–∞—Ç—ñ–≤: {e}. –ú–æ–∂–ª–∏–≤–æ, –∫–ª—ñ—î–Ω—Ç –Ω–µ –º–∞—î –¥–æ—Å—Ç—É–ø—É –∞–±–æ –≤–∏–Ω–∏–∫–ª–∞ —ñ–Ω—à–∞ –ø—Ä–æ–±–ª–µ–º–∞.", reply_markup=get_chat_matrix_keyboard())
    finally:
        await state.set_state(AdminStates.chat_matrix_management)


# -----------------------------------------------------------
# View Chat Details and Add to Allowed
# -----------------------------------------------------------

@router.callback_query(ChatListCallback.filter(F.action == "view_chat_details"))
async def view_chat_details(callback_query: CallbackQuery, callback_data: ChatListCallback, state: FSMContext, telethon_manager: TelethonClientManager):
    chat_id = callback_data.chat_id
    current_page = callback_data.page if callback_data.page is not None else 0
    is_search_context = callback_data.from_search if callback_data.from_search is not None else False

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback_query.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏' –¥–ª—è —á–∞—Ç—É ID: {chat_id}.")

    active_clients = telethon_manager.get_all_active_clients()
    if not active_clients:
        await callback_query.answer("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö Telethon –∫–ª—ñ—î–Ω—Ç—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª–µ–π.", show_alert=True)
        return
    telethon_client = next(iter(active_clients.values()))

    if not telethon_client or not telethon_client.is_connected() or not await telethon_client.is_user_authorized():
        await callback_query.answer("–ê–∫—Ç–∏–≤–Ω–∏–π Telethon –∫–ª—ñ—î–Ω—Ç –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –∞–±–æ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π.", show_alert=True)
        return

    try:
        entity = await telethon_client.get_entity(chat_id)
        chat_title = entity.title
        participants_count = "N/A"
        if hasattr(entity, 'participants_count'):
            participants_count = entity.participants_count
        elif hasattr(entity, 'users_count'):
            participants_count = entity.users_count

        chat_type = "Group" if hasattr(entity, 'megagroup') and entity.megagroup else "Channel" if hasattr(entity, 'channel') else "Unknown"
        chat_username = getattr(entity, 'username', None)

        db_pool = await get_db_pool()
        existing_allowed_chats = await get_all_telethon_allowed_chats(db_pool)
        is_already_added = any(chat['chat_id'] == chat_id for chat in existing_allowed_chats)
        
        reply_markup = get_chat_info_keyboard(chat_id, is_already_added, current_page, is_search_context=is_search_context)

        await callback_query.message.edit_text(
            f"**–î–µ—Ç–∞–ª—ñ —á–∞—Ç—É:**\n"
            f"**–ù–∞–∑–≤–∞:** {chat_title}\n"
            f"**ID:** `{chat_id}`\n"
            f"**–¢–∏–ø:** {chat_type}\n"
            f"**–Æ–∑–µ—Ä–Ω–µ–π–º:** {chat_username if chat_username else '–í—ñ–¥—Å—É—Ç–Ω—ñ–π'}\n"
            f"**–£—á–∞—Å–Ω–∏–∫—ñ–≤:** {participants_count}\n"
            f"**–°—Ç–∞—Ç—É—Å:** {'‚úÖ –í–∂–µ –¥–æ–¥–∞–Ω–æ –¥–æ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö' if is_already_added else '‚ùå –©–µ –Ω–µ –¥–æ–¥–∞–Ω–æ'}",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —á–∞—Ç—É {chat_id}: {e}", exc_info=True)
        await callback_query.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ —á–∞—Ç—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥.", show_alert=True)
        await callback_query.message.edit_text(
            "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≥–ª—è–¥—ñ –¥–µ—Ç–∞–ª–µ–π —á–∞—Ç—É.",
            reply_markup=get_chat_matrix_keyboard()
        )
    finally:
        await callback_query.answer()


@router.callback_query(ChatInfoCallback.filter(F.action == "add_allowed_chat_from_details"))
async def add_chat_from_details(callback_query: CallbackQuery, callback_data: ChatInfoCallback, state: FSMContext, telethon_manager: TelethonClientManager):
    chat_id = callback_data.chat_id
    page = callback_data.page
    from_search = callback_data.from_search

    added_by_user_id = callback_query.from_user.id

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {added_by_user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–î–æ–¥–∞—Ç–∏ –¥–æ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö' –¥–ª—è —á–∞—Ç—É ID: {chat_id} (–∑ –¥–µ—Ç–∞–ª–µ–π).")

    active_clients = telethon_manager.get_all_active_clients()
    if not active_clients:
        await callback_query.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö Telethon –∫–ª—ñ—î–Ω—Ç—ñ–≤ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Ç—É.", show_alert=True)
        return
    
    telethon_client = next(iter(active_clients.values()))

    if not telethon_client or not telethon_client.is_connected() or not await telethon_client.is_user_authorized():
        await callback_query.answer("–ê–∫—Ç–∏–≤–Ω–∏–π Telethon –∫–ª—ñ—î–Ω—Ç –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –∞–±–æ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π. –î–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Ç—É –Ω–µ–º–æ–∂–ª–∏–≤–µ.", show_alert=True)
        return

    db_pool = await get_db_pool()

    try:
        entity = await telethon_client.get_entity(chat_id)
        chat_title = entity.title
        chat_type = "Group" if hasattr(entity, 'megagroup') and entity.megagroup else "Channel" if hasattr(entity, 'channel') else "Unknown"
        chat_username = getattr(entity, 'username', None)

        success = await add_telethon_allowed_chat(db_pool, chat_id, chat_title, chat_type, chat_username, added_by_user_id)
        
        if success:
            await callback_query.answer("–ß–∞—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö!", show_alert=True)
            if from_search:
                await view_chat_details(callback_query, ChatListCallback(action="view_chat_details", chat_id=chat_id, page=page, from_search=from_search), state, telethon_manager)
            else:
                await view_allowed_chats(callback_query, telethon_manager, ChatListCallback(action="paginate_allowed_chats", page=page))
        else:
            await callback_query.answer("–ß–∞—Ç –≤–∂–µ –±—É–≤ –¥–æ–¥–∞–Ω–∏–π –∞–±–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞.", show_alert=True)
            await view_chat_details(callback_query, ChatListCallback(action="view_chat_details", chat_id=chat_id, page=page, from_search=from_search), state, telethon_manager)


    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Ç—É {chat_id} –¥–æ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –∑ –¥–µ—Ç–∞–ª–µ–π: {e}", exc_info=True)
        await callback_query.answer(f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Ç—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥.", show_alert=True)
    finally:
        await callback_query.answer()


# -----------------------------------------------------------
# View Allowed Chats
# -----------------------------------------------------------

@router.callback_query(AdminCallback.filter(F.action == "view_allowed_chats"))
@router.callback_query(ChatListCallback.filter(F.action == "paginate_allowed_chats"))
async def view_allowed_chats(callback_query: CallbackQuery, telethon_manager: TelethonClientManager, callback_data: Optional[ChatListCallback] = None):
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback_query.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–æ–∑–≤–æ–ª–µ–Ω—ñ —á–∞—Ç–∏' –∞–±–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–≤ —Å—Ç–æ—Ä—ñ–Ω–∫—É.")
    db_pool = await get_db_pool()
    
    current_page = callback_data.page if callback_data and callback_data.page is not None else 0
    chats_per_page = 5
    
    active_clients = telethon_manager.get_all_active_clients()

    if not active_clients:
        await callback_query.answer("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö Telethon –∫–ª—ñ—î–Ω—Ç—ñ–≤. –ù–µ–º–æ–∂–ª–∏–≤–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —á–∞—Ç—ñ–≤.", show_alert=True)
        await callback_query.message.edit_text("–°–ø–∏—Å–æ–∫ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö —á–∞—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π —á–µ—Ä–µ–∑ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤.", reply_markup=get_chat_matrix_keyboard())
        return

    telethon_client = next(iter(active_clients.values()))

    if not telethon_client or not telethon_client.is_connected() or not await telethon_client.is_user_authorized():
        await callback_query.answer("–ê–∫—Ç–∏–≤–Ω–∏–π Telethon –∫–ª—ñ—î–Ω—Ç –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π –∞–±–æ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –Ω–µ–º–æ–∂–ª–∏–≤–∞.", show_alert=True)
        await callback_query.message.edit_text("–°–ø–∏—Å–æ–∫ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö —á–∞—Ç—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.", reply_markup=get_chat_matrix_keyboard())
        return

    try:
        allowed_chats = await get_all_telethon_allowed_chats(db_pool)
        if not allowed_chats:
            await callback_query.message.edit_text("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö —á–∞—Ç—ñ–≤.", reply_markup=get_chat_matrix_keyboard())
            await callback_query.answer()
            return

        response_text = "**üìú –°–ø–∏—Å–æ–∫ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö —á–∞—Ç—ñ–≤:**\n\n–û–±–µ—Ä—ñ—Ç—å —á–∞—Ç –∑—ñ —Å–ø–∏—Å–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–µ—Ç–∞–ª—ñ –∞–±–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –π–æ–≥–æ."
        
        reply_markup = get_allowed_chats_list_keyboard(allowed_chats, current_page, chats_per_page)

        await callback_query.message.edit_text(
            response_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö —á–∞—Ç—ñ–≤: {e}", exc_info=True)
        await callback_query.message.edit_text(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}", reply_markup=get_chat_matrix_keyboard())
    finally:
        await callback_query.answer()


# -----------------------------------------------------------
# Handlers for ChatInfoCallback (delete, back to list, etc.)
# -----------------------------------------------------------

@router.callback_query(ChatInfoCallback.filter(F.action == "delete_allowed_chat"))
async def ask_confirm_delete_chat(callback_query: CallbackQuery, callback_data: ChatInfoCallback):
    chat_id = callback_data.chat_id
    page = callback_data.page
    from_search = callback_data.from_search
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback_query.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–í–∏–¥–∞–ª–∏—Ç–∏ —á–∞—Ç' –¥–ª—è ID: {chat_id}.")
    
    db_pool = await get_db_pool()
    chat_info = await get_telethon_allowed_chat_by_id(db_pool, chat_id)
    chat_title = chat_info['chat_title'] if chat_info else f"–ß–∞—Ç –∑ ID: {chat_id}"

    reply_markup = get_confirm_delete_chat_keyboard(chat_id, page, from_search)

    await callback_query.message.edit_text(
        f"**–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —á–∞—Ç '{chat_title}' (ID: `{chat_id}`)?**\n"
        "–¶—è –¥—ñ—è —î –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω–æ—é.",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    await callback_query.answer()


@router.callback_query(ChatInfoCallback.filter(F.action == "confirm_delete_allowed_chat"))
async def confirm_delete_chat(callback_query: CallbackQuery, callback_data: ChatInfoCallback, telethon_manager: TelethonClientManager):
    chat_id = callback_data.chat_id
    page = callback_data.page
    from_search = callback_data.from_search
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback_query.from_user.id} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —á–∞—Ç—É ID: {chat_id}.")
    
    db_pool = await get_db_pool()
    try:
        success = await delete_telethon_allowed_chat(db_pool, chat_id)
        if success:
            await callback_query.answer("–ß–∞—Ç —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!", show_alert=True)
            # –ü—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö —á–∞—Ç—ñ–≤
            # –ó–≤–µ—Ä–Ω—ñ—Ç—å —É–≤–∞–≥—É: –º–∏ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –Ω–∞ view_allowed_chats, —è–∫–∞ —Å–∞–º–∞ –∫–µ—Ä—É—î –ø–∞–≥—ñ–Ω–∞—Ü—ñ—î—é
            # –ü–µ—Ä–µ–¥–∞—î–º–æ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π state, —è–∫—â–æ –≤—ñ–Ω –ø–æ—Ç—Ä—ñ–±–µ–Ω. –£ —Ü—å–æ–º—É –≤–∏–ø–∞–¥–∫—É, –¥–ª—è view_allowed_chats –≤—ñ–Ω –Ω–µ —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º.
            await view_allowed_chats(callback_query, telethon_manager, ChatListCallback(action="paginate_allowed_chats", page=page))
        else:
            await callback_query.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —á–∞—Ç. –ú–æ–∂–ª–∏–≤–æ, –π–æ–≥–æ –≤–∂–µ –Ω–µ–º–∞—î.", show_alert=True)
            # –Ø–∫—â–æ –Ω–µ –≤–∏–¥–∞–ª–∏–ª–∏, –∑–∞–ª–∏—à–∞—î–º–æ—Å—å –Ω–∞ –¥–µ—Ç–∞–ª—è—Ö –∞–±–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ —Å–ø–∏—Å–∫—É
            # –¢—É—Ç —Ç–∞–∫–æ–∂ –≤–∞—Ä—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ view_chat_details, —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å
            await view_chat_details(callback_query, ChatListCallback(action="view_chat_details", chat_id=chat_id, page=page, from_search=from_search), FSMContext(), telethon_manager) # –ü–µ—Ä–µ–¥–∞—î–º–æ FSMContext
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —á–∞—Ç—É {chat_id}: {e}", exc_info=True)
        await callback_query.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —á–∞—Ç—É: {e}", show_alert=True)
        # –¢—É—Ç —Ç–∞–∫–æ–∂ –≤–∞—Ä—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ view_chat_details, —â–æ–± –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å
        await view_chat_details(callback_query, ChatListCallback(action="view_chat_details", chat_id=chat_id, page=page, from_search=from_search), FSMContext(), telethon_manager) # –ü–µ—Ä–µ–¥–∞—î–º–æ FSMContext
    finally:
        await callback_query.answer()


@router.callback_query(ChatInfoCallback.filter(F.action == "back_to_chat_info"))
async def back_to_chat_info_from_confirm(callback_query: CallbackQuery, callback_data: ChatInfoCallback, state: FSMContext, telethon_manager: TelethonClientManager):
    chat_id = callback_data.chat_id
    page = callback_data.page
    from_search = callback_data.from_search
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback_query.from_user.id} –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —á–∞—Ç ID: {chat_id}.")
    await view_chat_details(callback_query, ChatListCallback(action="view_chat_details", chat_id=chat_id, page=page, from_search=from_search), state, telethon_manager)
    await callback_query.answer()


@router.callback_query(ChatListCallback.filter(F.action == "back_to_allowed_list"))
async def back_to_allowed_list_from_details(callback_query: CallbackQuery, callback_data: ChatListCallback, telethon_manager: TelethonClientManager):
    page = callback_data.page
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback_query.from_user.id} –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –¥–æ —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö —á–∞—Ç—ñ–≤ –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–µ—Ç–∞–ª–µ–π.")
    await view_allowed_chats(callback_query, telethon_manager, ChatListCallback(action="paginate_allowed_chats", page=page))
    await callback_query.answer()