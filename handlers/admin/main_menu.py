# handlers/admin/main_menu.py
import logging
import math # –î–ª—è math.ceil —É process_show_users

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.filters import StateFilter

import asyncpg

from keyboards.admin_keyboard import get_admin_main_keyboard, get_users_list_keyboard, get_telethon_actions_keyboard
from keyboards.reply_keyboard import get_main_menu_keyboard # –î–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
from database.users_db import get_user_access_level, get_all_users
from common.messages import get_access_level_description
from common.constants import USERS_PER_PAGE, ACCESS_LEVEL_BUTTONS # –î–æ–¥–∞–Ω–æ ACCESS_LEVEL_BUTTONS

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Å—Ç–∞–Ω–∏ –∑ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ —Ñ–∞–π–ª—É
from common.states import AdminStates, MenuStates
from filters.admin_filter import AdminAccessFilter # –î–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –¥–æ —Ä–æ—É—Ç–µ—Ä–∞ –∞–±–æ —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
from keyboards.callback_factories import AdminCallback, UserActionCallback, AccessLevelCallback

logger = logging.getLogger(__name__)

router = Router()

# –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ñ—ñ–ª—å—Ç—Ä –∞–¥–º—ñ–Ω-–¥–æ—Å—Ç—É–ø—É –¥–æ –≤—Å—å–æ–≥–æ —Ä–æ—É—Ç–µ—Ä–∞
# –¶–µ –≥–∞—Ä–∞–Ω—Ç—É—î, —â–æ —Ç—ñ–ª—å–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏ –∑–º–æ–∂—É—Ç—å –≤–∏–∫–ª–∏–∫–∞—Ç–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –≤ —Ü—å–æ–º—É —Ä–æ—É—Ç–µ—Ä—ñ.
router.callback_query.filter(AdminAccessFilter())
router.message.filter(AdminAccessFilter())


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –∞–¥–º—ñ–Ω-–º–µ–Ω—é
@router.callback_query(AdminCallback.filter(F.action == "cancel_admin_action"), AdminStates.admin_main)
@router.callback_query(AdminCallback.filter(F.action == "cancel_admin_action"), AdminStates.user_management)
@router.callback_query(AdminCallback.filter(F.action == "cancel_admin_action"), AdminStates.confirm_action)
@router.callback_query(AdminCallback.filter(F.action == "cancel_admin_action"), AdminStates.set_access_level)
@router.callback_query(AdminCallback.filter(F.action == "cancel_admin_action"), AdminStates.telethon_management)
@router.callback_query(AdminCallback.filter(F.action == "cancel_admin_action"), AdminStates.waiting_for_telethon_input)
@router.callback_query(AdminCallback.filter(F.action == "cancel_admin_action"), AdminStates.chat_matrix_management) # –í–ò–ü–†–ê–í–õ–ï–ù–û: –î–æ–¥–∞–Ω–æ —Å—Ç–∞–Ω –¥–ª—è –ß–∞—Ç-–º–∞—Ç—Ä–∏—Ü—ñ
async def back_to_admin_main_menu(
    callback: types.CallbackQuery,
    state: FSMContext
) -> None:
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é'.")
    await state.set_state(AdminStates.admin_main)
    keyboard = get_admin_main_keyboard()
    await callback.message.edit_text(
        "<b>–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å:</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É–≤–∞–Ω–Ω—è"
@router.callback_query(AdminCallback.filter(F.action == "close_admin_panel"), AdminStates.admin_main)
async def close_admin_panel(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_pool: asyncpg.Pool # db_pool –ø–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É
) -> None:
    user_id = callback.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ 'üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É–≤–∞–Ω–Ω—è'.")

    await state.set_state(MenuStates.main_menu)
    
    access_level = await get_user_access_level(db_pool, user_id)
    if access_level is None:
        access_level = 0
    
    current_state_data = await state.get_data()
    current_page = current_state_data.get("menu_page", 0) # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –Ω–∞ —Ç—É –∂ —Å—Ç–æ—Ä—ñ–Ω–∫—É –º–µ–Ω—é, —â–æ –±—É–ª–∞

    keyboard = await get_main_menu_keyboard(access_level, current_page)
    
    level_name, level_description = get_access_level_description(access_level, ACCESS_LEVEL_BUTTONS)

    await callback.message.delete() # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ inline-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
    await callback.message.answer( # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ ReplyKeyboardMarkup
        f"–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.\n\n–í–∞—à —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É:\n<b>{level_name}</b>\n{level_description}",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üë• –Æ–∑–µ—Ä-–º–∞—Ç—Ä–∏—Ü—è ¬∑ –†–µ–¥–∞–∫—Ç–æ—Ä –¥–æ—Å—Ç—É–ø—É"
@router.callback_query(
    AdminCallback.filter(F.action == "show_users"),
    StateFilter(AdminStates.admin_main, AdminStates.user_management)
)
async def process_show_users(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_pool: asyncpg.Pool,
    callback_data: AdminCallback
) -> None:
    user_id = callback.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–Æ–∑–µ—Ä-–º–∞—Ç—Ä–∏—Ü—è'.")

    await state.set_state(AdminStates.user_management)
    
    current_page = callback_data.page if callback_data.page is not None else 0
    await state.update_data(users_list_page=current_page)

    users = await get_all_users(db_pool)
    if not users:
        await callback.answer("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.", show_alert=True)
        await callback.message.edit_text(
            "<b>üë• –Æ–∑–µ—Ä-–º–∞—Ç—Ä–∏—Ü—è ¬∑ –†–µ–¥–∞–∫—Ç–æ—Ä –¥–æ—Å—Ç—É–ø—É:</b>\n\n–ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.",
            reply_markup=get_admin_main_keyboard(), # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é
            parse_mode=ParseMode.HTML
        )
        return

    keyboard = get_users_list_keyboard(users, current_page, USERS_PER_PAGE)
    
    total_pages = math.ceil(len(users) / USERS_PER_PAGE) if len(users) > 0 else 1
    
    message_text = (
        f"<b>üë• –Æ–∑–µ—Ä-–º–∞—Ç—Ä–∏—Ü—è ¬∑ –†–µ–¥–∞–∫—Ç–æ—Ä –¥–æ—Å—Ç—É–ø—É:</b>\n\n"
        f"–û–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É ({current_page + 1}/{total_pages}):"
    )
    
    await callback.message.edit_text(
        message_text,
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üì° ReLink ¬∑ –°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª—É –∑–≤'—è–∑–∫—É"
# !!! –¶–ï–ô –•–ï–ù–î–õ–ï–† –ú–ê–Ñ –ë–£–¢–ò –í–ò–î–ê–õ–ï–ù–ò–ô –ü–Ü–°–õ–Ø –£–°–ü–Ü–®–ù–û–ì–û –ó–ê–ü–£–°–ö–£ –ë–û–¢–ê –ó –û–ù–û–í–õ–ï–ù–û–Æ –°–¢–†–£–ö–¢–£–†–û–Æ.
# !!! –í–Ü–ù –¢–ò–ú–ß–ê–°–û–í–û –î–£–ë–õ–Æ–Ñ–¢–¨–°–Ø –í telethon_operations.py
# !!! –Ø –ó–ê–õ–ò–®–ò–í –ô–û–ì–û –¢–£–¢ –î–õ–Ø –ü–û–¢–û–ß–ù–û–á –ü–ï–†–ï–í–Ü–†–ö–ò, –ê–õ–ï –í–Ü–ù –ó–ê–ô–í–ò–ô.
# !!! –õ–û–ì–Ü–ö–ê –î–õ–Ø –¶–Ü–Ñ–á –ö–ù–û–ü–ö–ò –ü–û–í–ò–ù–ù–ê –û–ë–†–û–ë–õ–Ø–¢–ò–°–Ø –í telethon_operations.py
# @router.callback_query(
#      AdminCallback.filter(F.action == "connection_status"), # –¶–µ callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üì° ReLink ¬∑ –°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª—É –∑–≤'—è–∑–∫—É"
#      StateFilter(AdminStates.admin_main, AdminStates.telethon_management)
# )
# async def telethon_connection_status(
#      callback: types.CallbackQuery,
#      telethon_manager: Any # telethon_manager –º–∞—î –±—É—Ç–∏ –ø–µ—Ä–µ–¥–∞–Ω–∏–π —á–µ—Ä–µ–∑ Middleware
# ) -> None:
#      user_id = callback.from_user.id
#      logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç—É—Å –∑'—î–¥–Ω–∞–Ω–Ω—è.")
#      logger.debug(f"Telethon Manager received in telethon_connection_status: {telethon_manager}")
    
#      status_message = "‚ùå Telethon API: –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –∞–±–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤."

#      if telethon_manager and telethon_manager.clients:
#          for phone_number, client_obj in telethon_manager.clients.items():
#              if client_obj.is_connected():
#                  status_message = f"‚úÖ Telethon API: –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ (—á–µ—Ä–µ–∑ {phone_number})"
#                  break
    
#      await callback.answer(status_message, show_alert=True)