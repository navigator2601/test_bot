# handlers/admin/main_menu.py

import logging
import math
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.filters import StateFilter

import asyncpg

from keyboards.admin_keyboard import get_admin_main_keyboard, get_users_list_keyboard, get_telethon_actions_keyboard
from keyboards.reply_keyboard import get_main_menu_keyboard
from database.users_db import get_user_access_level, get_all_users
from common.messages import get_access_level_description, get_random_admin_welcome_message # <--- –î–æ–¥–∞–Ω–æ —ñ–º–ø–æ—Ä—Ç
from common.constants import USERS_PER_PAGE, ACCESS_LEVEL_BUTTONS

from common.states import AdminStates, MenuStates
from filters.admin_filter import AdminAccessFilter
from keyboards.callback_factories import AdminCallback, UserActionCallback, AccessLevelCallback

logger = logging.getLogger(__name__)

router = Router()

router.callback_query.filter(AdminAccessFilter())
router.message.filter(AdminAccessFilter())


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –∞–¥–º—ñ–Ω-–º–µ–Ω—é
# –¶–µ–π —Ö–µ–Ω–¥–ª–µ—Ä –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è, –∫–æ–ª–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—Ç–∏—Å–∫–∞—î "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é" –∑ –ø—ñ–¥–º–µ–Ω—é
@router.callback_query(AdminCallback.filter(F.action == "cancel_admin_action"), AdminStates.admin_main)
@router.callback_query(AdminCallback.filter(F.action == "cancel_admin_action"), AdminStates.user_management)
@router.callback_query(AdminCallback.filter(F.action == "cancel_admin_action"), AdminStates.confirm_action)
@router.callback_query(AdminCallback.filter(F.action == "cancel_admin_action"), AdminStates.set_access_level)
@router.callback_query(AdminCallback.filter(F.action == "cancel_admin_action"), AdminStates.telethon_management)
@router.callback_query(AdminCallback.filter(F.action == "cancel_admin_action"), AdminStates.waiting_for_telethon_input)
@router.callback_query(AdminCallback.filter(F.action == "cancel_admin_action"), AdminStates.chat_matrix_management)
async def back_to_admin_main_menu(
    callback: types.CallbackQuery,
    state: FSMContext
) -> None:
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é'.")
    await state.set_state(AdminStates.admin_main)
    keyboard = get_admin_main_keyboard()
    
    # <--- –ó–ú–Ü–ù–ï–ù–û –¢–£–¢: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–∞–Ω–¥–æ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    welcome_message = get_random_admin_welcome_message()
    
    await callback.message.edit_text(
        welcome_message, # <--- –†–∞–Ω–¥–æ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É–≤–∞–Ω–Ω—è"
@router.callback_query(AdminCallback.filter(F.action == "close_admin_panel"), AdminStates.admin_main)
async def close_admin_panel(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_pool: asyncpg.Pool
) -> None:
    user_id = callback.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ 'üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É–≤–∞–Ω–Ω—è'.")

    await state.set_state(MenuStates.main_menu)
    
    access_level = await get_user_access_level(db_pool, user_id)
    if access_level is None:
        access_level = 0
    
    current_state_data = await state.get_data()
    current_page = current_state_data.get("menu_page", 0)

    keyboard = await get_main_menu_keyboard(access_level, current_page)
    
    level_name, level_description = get_access_level_description(access_level, ACCESS_LEVEL_BUTTONS)

    await callback.message.delete()
    await callback.message.answer(
        f"–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.\n\n–í–∞—à —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É:\n<b>{level_name}</b>\n{level_description}",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üë• –Æ–∑–µ—Ä-–º–∞—Ç—Ä–∏—Ü—è ¬∑ –†–µ–¥–∞–∫—Ç–æ—Ä –¥–æ—Å—Ç—É–ø—É"
@router.callback_query(
    AdminCallback.filter(F.action == "show_users"),
    StateFilter(AdminStates.admin_main, AdminStates.user_management)
)
async def process_show_users(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_pool: asyncpg.Pool,
    callback_data: AdminCallback
) -> None:
    user_id = callback.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–Æ–∑–µ—Ä-–º–∞—Ç—Ä–∏—Ü—è'.")

    await state.set_state(AdminStates.user_management)
    
    current_page = callback_data.page if callback_data.page is not None else 0
    await state.update_data(users_list_page=current_page)

    users = await get_all_users(db_pool)
    if not users:
        await callback.answer("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.", show_alert=True)
        await callback.message.edit_text(
            f"{get_random_admin_welcome_message()}\n\n" # <--- –ú–æ–∂–ª–∏–≤–æ, —Ç—É—Ç —Ç–µ–∂ –≤–∞—Ä—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ä–∞–Ω–¥–æ–º–Ω–µ
            "<b>üë• –Æ–∑–µ—Ä-–º–∞—Ç—Ä–∏—Ü—è ¬∑ –†–µ–¥–∞–∫—Ç–æ—Ä –¥–æ—Å—Ç—É–ø—É:</b>\n\n–ù–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.",
            reply_markup=get_admin_main_keyboard(),
            parse_mode=ParseMode.HTML
        )
        return

    keyboard = get_users_list_keyboard(users, current_page, USERS_PER_PAGE)
    
    total_pages = math.ceil(len(users) / USERS_PER_PAGE) if len(users) > 0 else 1
    
    message_text = (
        f"<b>üë• –Æ–∑–µ—Ä-–º–∞—Ç—Ä–∏—Ü—è ¬∑ –†–µ–¥–∞–∫—Ç–æ—Ä –¥–æ—Å—Ç—É–ø—É:</b>\n\n"
        f"–û–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø—É ({current_page + 1}/{total_pages}):"
    )
    
    await callback.message.edit_text(
        message_text,
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üîê TeleKey ¬∑ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è API-–∑–≤‚Äô—è–∑–∫—É" ---
@router.callback_query(AdminCallback.filter(F.action == "telethon_auth"), AdminStates.admin_main)
async def process_telethon_auth_button(
    callback: types.CallbackQuery,
    state: FSMContext
) -> None:
    user_id = callback.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ 'üîê TeleKey ¬∑ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è API-–∑–≤‚Äô—è–∑–∫—É'.")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ —Å—Ç–∞–Ω —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è Telethon
    await state.set_state(AdminStates.telethon_management)
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ–ø—Ü—ñ—è–º–∏ –¥–ª—è Telethon
    keyboard = get_telethon_actions_keyboard()
    await callback.message.edit_text(
        "<b>üîê TeleKey ¬∑ –ü–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è API-–∑–≤‚Äô—è–∑–∫–æ–º:</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üí¨ –ß–∞—Ç-–º–∞—Ç—Ä–∏—Ü—è ¬∑ –ü–µ—Ä–µ–≥–ª—è–¥ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–æ–Ω"
@router.callback_query(AdminCallback.filter(F.action == "chat_matrix"), AdminStates.admin_main)
async def process_chat_matrix_button(
    callback: types.CallbackQuery,
    state: FSMContext
) -> None:
    user_id = callback.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ 'üí¨ –ß–∞—Ç-–º–∞—Ç—Ä–∏—Ü—è'.")
    
    await state.set_state(AdminStates.chat_matrix_management)
    
    keyboard = get_chat_matrix_keyboard() # –ü–æ—Ç—Ä—ñ–±–Ω–æ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ get_chat_matrix_keyboard
    await callback.message.edit_text(
        "<b>üí¨ –ß–∞—Ç-–º–∞—Ç—Ä–∏—Ü—è ¬∑ –ü–µ—Ä–µ–≥–ª—è–¥ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–æ–Ω:</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()