import logging
import math
from aiogram import Router, types, Bot, Dispatcher, F 
import asyncpg
from keyboards.reply_keyboard import get_main_menu_keyboard, BUTTONS_PER_PAGE, BUTTONS_CONFIG
from keyboards.admin_keyboard import get_admin_main_keyboard
from database.users_db import get_user_access_level
import random # <--- –î–û–î–ê–ù–û –¶–ï–ô –Ü–ú–ü–û–†–¢

logger = logging.getLogger(__name__)
router = Router()
user_menu_page = {}

ADMIN_WELCOME_MESSAGES = [
    "<b>‚öôÔ∏è Refridex OS:</b>\n ‚Äú–°–∏–≥–Ω–∞–ª –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –í—ñ–¥–∫—Ä–∏–≤–∞—é –ø–∞–Ω–µ–ª—å –∫–æ–º–∞–Ω–¥—É–≤–∞–Ω–Ω—è —è–¥—Ä–æ–º.‚Äù",
    "<b>üíª Refridex OS:</b>\n ‚Äú–ê–¥–º—ñ–Ω-–¥–æ—Å—Ç—É–ø –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ. –û–±–µ—Ä–∏ —Å–≤—ñ–π —à–ª—è—Ö, –ö–æ–Ω—Ç—Ä–æ–ª–µ—Ä–µ.‚Äù",
    "<b>üîê Refridex OS:</b>\n ‚Äú–¢–∏ –ø—Ä–æ–π—à–æ–≤ –∫—Ä—ñ–∑—å —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é. –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞.‚Äù",
    "<b>üßä Refridex OS:</b>\n ‚Äú–ü—Ä–∏–≤—ñ—Ç, –•—Ä–∞–Ω–∏—Ç–µ–ª—é —Å–∏—Å—Ç–µ–º–∏. –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø—ñ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º.‚Äù",
    "<b>üì° Refridex OS:</b>\n ‚Äú–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ö–æ–º–∞–Ω–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ.‚Äù",
    "<b>ü™û Refridex OS:</b>\n ‚Äú–ü–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–∞. –¢–≤–æ—è –≤–æ–ª—è ‚Äî –º—ñ–π –ø—Ä–æ—Ç–æ–∫–æ–ª.‚Äù",
    "<b>üß¨ Refridex OS:</b>\n ‚Äú–¢–∏ –≤ —Ü–µ–Ω—Ç—Ä—ñ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è. –°–∏—Å—Ç–µ–º–∞ —Å–ª—É—Ö–∞—î.‚Äù",
    "<b>üß† Refridex OS:</b>\n ‚Äú–ê–¥–º—ñ–Ω-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω–æ. –î—ñ—ó –æ—á—ñ–∫—É—é—Ç—å—Å—è...‚Äù",
    "<b>üíø Refridex OS:</b>\n ‚Äú–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞ –∫–æ–Ω—Å–æ–ª—å –∞–∫—Ç–∏–≤–Ω–∞. –í–∏–±–µ—Ä–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é, –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–µ.‚Äù",
    "<b>‚ö° Refridex OS:</b>\n ‚Äú–ù—É–ª—å–æ–≤–∏–π –¥–æ—Å—Ç—É–ø –æ–±—ñ–π–¥–µ–Ω–æ. –ü–∞–Ω–µ–ª—å –≤—ñ–¥–∫—Ä–∏—Ç–æ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –ø–æ—Ä—Ç.‚Äù",
    "<b>üßØ Refridex OS:</b>\n ‚Äú–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –∑'—è–≤–∏–≤—Å—è. –í—ñ–¥–∫—Ä–∏–≤–∞—é –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è.‚Äù",
    "<b>üìü Refridex OS:</b>\n ‚Äú–î–æ—Å—Ç—É–ø –¥–æ –ø–∞–Ω–µ–ª—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ. –ó—á–∏—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏–≤—ñ–ª–µ—ó–≤...‚Äù",
    "<b>üîß Refridex OS:</b>\n ‚Äú–°–µ—Ä—Ü–µ —Å–∏—Å—Ç–µ–º–∏ –≤—ñ–¥–∫—Ä–∏—Ç–æ. –í–∏–∫–æ–Ω—É–π —Å–≤—ñ–π –ø—Ä–æ—Ç–æ–∫–æ–ª.‚Äù",
    "<b>üß≠ Refridex OS:</b>\n ‚Äú–¢–∏ ‚Äî –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–º—É —Ü–µ–Ω—Ç—Ä—ñ. –í–∏–∑–Ω–∞—á —Å–≤–æ—é —Ü—ñ–ª—å.‚Äù",
    "<b>üîä Refridex OS:</b>\n ‚Äú–Ø —Å–ª—É—Ö–∞—é, –ö–µ—Ä—ñ–≤–Ω–∏–∫—É. –û–±–∏—Ä–∞–π –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é.‚Äù"
]
# ---------------------------------------------------

def get_access_level_description(access_level: int) -> tuple[str, str]:
    if access_level == 0:
        return "üåê –ì—ñ—Å—Ç—å –°–∏—Å—Ç–µ–º–∏", "–ú–∞—î –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –±–∞–∑–æ–≤–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π."
    elif 1 <= access_level <= 2:
        return "üéÆ –ü—ñ–ª–æ—Ç –ë–ª–æ–∫—É", "–ú–æ–∂–µ —É–ø—Ä–∞–≤–ª—è—Ç–∏ –¥–µ—è–∫–∏–º–∏ —Ä–µ–∂–∏–º–∞–º–∏ —Ç–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É."
    elif 3 <= access_level <= 5:
        return "üîß –Ü–Ω–∂–µ–Ω–µ—Ä –ó–æ–Ω–∏", "–ú–∞—î –¥–æ—Å—Ç—É–ø –¥–æ –∑–≤—ñ—Ç–Ω–æ—Å—Ç—ñ, —Ä–æ–∑—à–∏—Ä–µ–Ω–∏—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å."
    elif 6 <= access_level <= 9:
        return "üß† –¢–µ—Ö–Ω–æ-–û–ø–µ—Ä–∞—Ç–æ—Ä HVAC", "–ó–Ω–∞—î, —â–æ —Ç–∞–∫–µ —Å—É–±–æ—Ö–æ–ª–æ–¥–∂–µ–Ω–Ω—è. –ê–Ω–∞–ª—ñ–∑—É—î –¥–∞–Ω—ñ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î –±–∞–ª–∞–Ω—Å."
    elif access_level >= 10:
        return "üß¨ –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –Ø–¥—Ä–∞", "–ú–∞—î –∫–ª—é—á –¥–æ –≤—Å—ñ—Ö –±–∞–∑. –ú–æ–∂–µ –ø–µ—Ä–µ–ø—Ä–æ—à–∏—Ç–∏ —Å–∞–º—É —Å—É—Ç—å –†–µ—Ñ—Ä—ñ–¥–µ–∫—Å–∞."
    else:
        return "‚ùì –ù–µ–≤—ñ–¥–æ–º–∏–π —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É", "–ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."

@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
@router.message(F.text == "‚û°Ô∏è –Ü—â–µ")
async def show_main_menu(message: types.Message, dispatcher: Dispatcher) -> None:
    db_pool = dispatcher.workflow_data.get('db_pool_instance')
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    is_pagination_action = message.text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚û°Ô∏è –Ü—â–µ"]
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –∑–∞–ø–∏—Ç–∞–≤ –º–µ–Ω—é –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—É–≤ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é.")
    
    if not db_pool:
        logger.error("db_pool_instance –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ dispatcher.workflow_data –¥–ª—è show_main_menu!")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    access_level = await get_user_access_level(db_pool, user_id) 
    if access_level is None:
        access_level = 0
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –º–∞—î —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É: {access_level}.")
    
    all_available_buttons_for_user = []
    for level_key in sorted(BUTTONS_CONFIG.keys()):
        if access_level >= level_key:
            for button_text, min_button_level in BUTTONS_CONFIG[level_key]:
                if access_level >= min_button_level and button_text not in [btn[0] for btn in all_available_buttons_for_user]:
                    all_available_buttons_for_user.append((button_text, min_button_level))
    
    current_page = user_menu_page.get(user_id, 0)
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        current_page = max(0, current_page - 1)
    elif message.text == "‚û°Ô∏è –Ü—â–µ":
        total_buttons = len(all_available_buttons_for_user)
        total_pages = math.ceil(total_buttons / BUTTONS_PER_PAGE) if total_buttons > 0 else 1
        current_page = min(total_pages - 1, current_page + 1)
    
    user_menu_page[user_id] = current_page
    
    buttons_on_current_page_count = len(all_available_buttons_for_user[current_page * BUTTONS_PER_PAGE : (current_page * BUTTONS_PER_PAGE) + BUTTONS_PER_PAGE])
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_name} (ID: {user_id}) –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î—Ç—å—Å—è {buttons_on_current_page_count} –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ {current_page + 1}.")
    
    menu_message_text = ""
    if is_pagination_action:
        if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            menu_message_text = "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏."
        elif message.text == "‚û°Ô∏è –Ü—â–µ":
            menu_message_text = "–í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏."
    else:
        level_name, level_description = get_access_level_description(access_level)
        menu_message_text = (
            "–í–∞—à —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É:\n"
            f"<b>{level_name}</b>\n"
            f"{level_description}"
        )
            
    keyboard = await get_main_menu_keyboard(access_level, current_page)
    await message.answer(menu_message_text, reply_markup=keyboard, parse_mode='HTML')


# –ù–û–í–ò–ô –•–ï–ù–î–õ–ï–† –î–õ–Ø –ö–ù–û–ü–ö–ò "‚öôÔ∏è –ê–î–ú–Ü–ù–Ü–°–¢–†–£–í–ê–ù–ù–Ø"
@router.message(F.text == "‚öôÔ∏è –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è")
async def handle_admin_button(message: types.Message, dispatcher: Dispatcher) -> None:
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    db_pool = dispatcher.workflow_data.get('db_pool_instance')

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É '‚öôÔ∏è –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è'.")

    if not db_pool:
        logger.error("db_pool_instance –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ dispatcher.workflow_data –¥–ª—è handle_admin_button!")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    access_level = await get_user_access_level(db_pool, user_id)
    if access_level is None:
        access_level = 0 
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É 10 –∞–±–æ –≤–∏—â–µ –¥–ª—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
    if access_level >= 10: 
        admin_keyboard = get_admin_main_keyboard() # –û—Ç—Ä–∏–º—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
        
        # --- –ó–ú–Ü–ù–ï–ù–û: –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ —Ñ–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç ---
        welcome_admin_text = random.choice(ADMIN_WELCOME_MESSAGES)
        await message.answer(
            f"{welcome_admin_text}", 
            reply_markup=admin_keyboard, 
            parse_mode='HTML'
        )
        # --- –ö–Ü–ù–ï–¶–¨ –ó–ú–Ü–ù ---
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id} (—Ä—ñ–≤–µ–Ω—å {access_level}) –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ –ø–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    else:
        # –Ø–∫—â–æ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –π–æ–≥–æ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –ø–∞–Ω–µ–ª—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", 
            reply_markup=await get_main_menu_keyboard(access_level, user_menu_page.get(user_id, 0)) # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –º–µ–Ω—é
        )
        logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} (—Ä—ñ–≤–µ–Ω—å {access_level}) —Å–ø—Ä–æ–±—É–≤–∞–≤ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ –±–µ–∑ –¥–æ–∑–≤–æ–ª—É.")