# handlers/admin_handler.py

import logging
from aiogram import Router, types, Bot, F
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
import asyncpg
from typing import Any, Optional

from database import users_db
from keyboards.admin_keyboard import (
    get_admin_main_keyboard,
    get_users_list_keyboard,
    get_user_actions_keyboard,
    get_confirm_action_keyboard,
    get_access_level_keyboard,
    get_telethon_actions_keyboard
)
from keyboards.reply_keyboard import get_main_menu_keyboard # –î–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
from common.messages import get_access_level_description, get_random_admin_welcome_message # <--- –û–ù–û–í–õ–ï–ù–û –Ü–ú–ü–û–†–¢–ò
from common.constants import ACCESS_LEVEL_BUTTONS, BUTTONS_PER_PAGE # <--- –û–ù–û–í–õ–ï–ù–û –Ü–ú–ü–û–†–¢–ò


logger = logging.getLogger(__name__)

router = Router()

# –ö–ª–∞—Å–∏ Callbacks –¥–ª—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
class AdminCallback(CallbackData, prefix="admin"):
    action: str
    user_id: Optional[int] = None
    page: Optional[int] = 0
    level: Optional[int] = None

class UserActionCallback(CallbackData, prefix="user_action"):
    action: str # authorize, unauthorize, change_level
    user_id: int

class AccessLevelCallback(CallbackData, prefix="access_level"):
    level: int
    user_id: int

# –°–¢–ê–ù–ò FSM –î–õ–Ø –ê–î–ú–Ü–ù-–ü–ê–ù–ï–õ–Ü
class AdminStates(StatesGroup):
    admin_main = State() # –ì–æ–ª–æ–≤–Ω–∞ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å
    user_management = State() # –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
    confirm_action = State() # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥—ñ—ó
    set_access_level = State() # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É
    telethon_management = State() # –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è Telethon

# ACCESS_LEVEL_BUTTONS –ë–Ü–õ–¨–®–ï –ù–ï –ü–û–¢–†–Ü–ë–ï–ù –Ü –ô–û–ì–û –°–õ–Ü–î –í–ò–î–ê–õ–ò–¢–ò –ó –¶–¨–û–ì–û –§–ê–ô–õ–£!

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (—â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –∫–æ–¥—É)
async def _get_user_info_message(db_pool: asyncpg.Pool, user_id: int) -> str:
    user = await users_db.get_user(db_pool, user_id)
    if not user:
        return f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID {user_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

    user_info_parts = [
        f"<b>‚öôÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (ID: <code>{user.get('id')}</code>):</b>",
        f"–Ü–º'—è: <b>{user.get('first_name', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}</b>",
        f"–ü—Ä—ñ–∑–≤–∏—â–µ: <b>{user.get('last_name', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}</b>",
        f"Username: <b>@{user.get('username', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}</b>",
        f"–†—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É: <b>{user.get('access_level', 0)}</b>"
    ]
    is_authorized_text = "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π" if user.get('is_authorized', False) else "‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π"
    user_info_parts.append(f"–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {is_authorized_text}")
    user_info_parts.append(f"–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: {user.get('registration_date', 'N/A').strftime('%Y-%m-%d %H:%M:%S')}")
    user_info_parts.append(f"–û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {user.get('last_activity', 'N/A').strftime('%Y-%m-%d %H:%M:%S')}")

    return "\n".join(user_info_parts)


@router.callback_query(AdminCallback.filter(F.action == "show_users"), AdminStates.admin_main | AdminStates.user_management)
async def show_users_list(
    callback: types.CallbackQuery,
    callback_data: AdminCallback,
    db_pool: asyncpg.Pool,
    state: FSMContext
) -> None:
    user_id = callback.from_user.id
    user_name = callback.from_user.full_name
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –Ω–∞—Ç–∏—Å–Ω—É–≤ 'show_users_list'.")

    await state.set_state(AdminStates.user_management)

    current_page = callback_data.page
    if current_page is None: # –ù–∞ –≤–∏–ø–∞–¥–æ–∫ –ø—Ä—è–º–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –±–µ–∑ page
        current_page = 0
    
    users = await users_db.get_all_users(db_pool)
    users.sort(key=lambda u: u.get('id', 0)) # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ ID –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—ó –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó

    keyboard = get_users_list_keyboard(users, current_page, BUTTONS_PER_PAGE) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ BUTTONS_PER_PAGE –∑ common.constants

    await callback.message.edit_text(
        "<b>üë• –Æ–∑–µ—Ä-–º–∞—Ç—Ä–∏—Ü—è:</b>\n\n–°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Å–∏—Å—Ç–µ–º–∏:",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id} –ø–æ–∫–∞–∑–∞–Ω–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (—Å—Ç–æ—Ä—ñ–Ω–∫–∞ {current_page + 1}).")

# –û–±—Ä–æ–±–∫–∞ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
@router.callback_query(AdminCallback.filter(F.action == "users_page"), AdminStates.user_management)
async def process_users_pagination(
    callback: types.CallbackQuery,
    callback_data: AdminCallback,
    db_pool: asyncpg.Pool,
    state: FSMContext
) -> None:
    await show_users_list(callback, callback_data, db_pool, state)
    await callback.answer()

@router.callback_query(F.data.startswith("user_"), AdminStates.user_management)
async def process_user_selection(
    callback: types.CallbackQuery,
    db_pool: asyncpg.Pool,
    state: FSMContext
) -> None:
    user_id = callback.from_user.id
    user_name = callback.from_user.full_name
    selected_user_id = int(callback.data.split('_')[1])
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –≤–∏–±—Ä–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {selected_user_id} –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è.")

    user_to_manage = await users_db.get_user(db_pool, selected_user_id)
    if not user_to_manage:
        await callback.message.edit_text("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await callback.answer()
        return

    is_authorized = user_to_manage.get('is_authorized', False)
    current_access_level = user_to_manage.get('access_level', 0)

    user_info_message = await _get_user_info_message(db_pool, selected_user_id) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ö–µ–ª–ø–µ—Ä
    keyboard = get_user_actions_keyboard(is_authorized, current_access_level, selected_user_id)

    await state.update_data(selected_user_id=selected_user_id) # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –æ–±—Ä–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å—Ç–∞–Ω—ñ
    await callback.message.edit_text(user_info_message, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    await callback.answer()


@router.callback_query(UserActionCallback.filter(F.action.in_({"authorize", "unauthorize"})), AdminStates.user_management)
async def process_authorize_unauthorize(
    callback: types.CallbackQuery,
    callback_data: UserActionCallback,
    db_pool: asyncpg.Pool,
    state: FSMContext
) -> None:
    user_id = callback.from_user.id
    selected_user_id = callback_data.user_id
    action_type = callback_data.action # 'authorize' –∞–±–æ 'unauthorize'
    
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —ñ–Ω—ñ—Ü—ñ—é–≤–∞–≤ {action_type} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {selected_user_id}.")

    current_state_data = await state.get_data()
    stored_selected_user_id = current_state_data.get('selected_user_id')

    if stored_selected_user_id != selected_user_id:
        logger.warning(f"–ù–µ–≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å user_id: {stored_selected_user_id} (state) != {selected_user_id} (callback_data).")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: –í–∏–±—Ä–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø–æ—Ç–æ—á–Ω–æ–º—É —Å—Ç–∞–Ω—É.", show_alert=True)
        return

    action_text = "–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é" if action_type == "authorize" else "–¥–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é"
    confirm_message = f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–∫–æ–Ω–∞—Ç–∏ {action_text} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID <code>{selected_user_id}</code>?"
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥—ñ—é –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    await state.update_data(pending_action={'type': action_type, 'user_id': selected_user_id})
    keyboard = get_confirm_action_keyboard(f"{action_type}_{selected_user_id}")
    
    await callback.message.edit_text(confirm_message, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    await state.set_state(AdminStates.confirm_action)
    await callback.answer()


@router.callback_query(AccessLevelCallback.filter(), AdminStates.set_access_level)
async def process_set_access_level(
    callback: types.CallbackQuery,
    callback_data: AccessLevelCallback,
    db_pool: asyncpg.Pool,
    state: FSMContext
) -> None:
    user_id = callback.from_user.id
    selected_user_id = callback_data.user_id
    new_access_level = callback_data.level
    
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Å–ø—Ä–æ–±—É–≤–∞–≤ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É {new_access_level} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {selected_user_id}.")

    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∞–¥–º—ñ–Ω–∞, —â–æ–± –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –π–æ–≥–æ —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É
    admin_access_level = await users_db.get_user_access_level(db_pool, user_id)
    if admin_access_level is None or admin_access_level < 10:
        await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –¥—ñ—ó.", show_alert=True)
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞ —Å–ø—Ä–æ–±–∞ –∑–º—ñ–Ω–∏ —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user_id} –¥–ª—è {selected_user_id}.")
        # –ú–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Å—Ç–∞–Ω—É, –∞–ª–µ, –π–º–æ–≤—ñ—Ä–Ω–æ, –∫—Ä–∞—â–µ –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ—Å—Ç–æ –∑–∞–ª–∏—à–∏—Ç–∏—Å—å
        # —É –ø–æ—Ç–æ—á–Ω–æ–º—É –º–µ–Ω—é –∞–±–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é.
        await state.set_state(AdminStates.user_management) # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
        await callback.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤. –î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.",
            reply_markup=get_user_actions_keyboard(
                await users_db.is_user_authorized(db_pool, selected_user_id),
                (await users_db.get_user(db_pool, selected_user_id)).get('access_level', 0),
                selected_user_id
            ),
            parse_mode=ParseMode.HTML
        )
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –Ω–µ –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–Ω–∏–∑–∏—Ç–∏ –∞–±–æ –ø—ñ–¥–≤–∏—â–∏—Ç–∏ —Å–µ–±–µ –∞–±–æ —ñ–Ω—à–æ–≥–æ –∞–¥–º—ñ–Ω–∞ –≤–∏—â–æ–≥–æ —Ä—ñ–≤–Ω—è
    if selected_user_id == user_id and new_access_level > admin_access_level:
        await callback.answer("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—ñ–¥–≤–∏—â–∏—Ç–∏ —Å–≤—ñ–π –≤–ª–∞—Å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É —Ç–∞–∫–∏–º —á–∏–Ω–æ–º.", show_alert=True)
        logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Å–ø—Ä–æ–±—É–≤–∞–≤ –ø—ñ–¥–≤–∏—â–∏—Ç–∏ —Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É.")
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–æ –º–µ–Ω—é –≤–∏–±–æ—Ä—É —Ä—ñ–≤–Ω—è, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º—ñ–≥ –≤–∏–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π —Ä—ñ–≤–µ–Ω—å –∞–±–æ —Å–∫–∞—Å—É–≤–∞—Ç–∏
        await callback.message.edit_text(
            "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—ñ–¥–≤–∏—â–∏—Ç–∏ —Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É —Ç–∞–∫–∏–º —á–∏–Ω–æ–º.",
            reply_markup=get_access_level_keyboard(selected_user_id),
            parse_mode=ParseMode.HTML
        )
        return
    
    target_user_current_level = (await users_db.get_user(db_pool, selected_user_id)).get('access_level', 0)
    if admin_access_level <= target_user_current_level and selected_user_id != user_id:
        await callback.answer("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ä—ñ–≤–Ω–µ–º, —Ä—ñ–≤–Ω–∏–º –∞–±–æ –≤–∏—â–∏–º –∑–∞ –≤–∞—à.", show_alert=True)
        logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Å–ø—Ä–æ–±—É–≤–∞–≤ –∑–º—ñ–Ω–∏—Ç–∏ —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {selected_user_id} –∑ —Ä—ñ–≤–Ω–µ–º {target_user_current_level}, —è–∫–∏–π –±—ñ–ª—å—à–∏–π –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –π–æ–≥–æ –≤–ª–∞—Å–Ω–æ–º—É {admin_access_level}.")
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–æ –º–µ–Ω—é –≤–∏–±–æ—Ä—É —Ä—ñ–≤–Ω—è
        await callback.message.edit_text(
            "–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ä—ñ–≤–Ω–µ–º, —Ä—ñ–≤–Ω–∏–º –∞–±–æ –≤–∏—â–∏–º –∑–∞ –≤–∞—à.",
            reply_markup=get_access_level_keyboard(selected_user_id),
            parse_mode=ParseMode.HTML
        )
        return

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥—ñ—é –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    await state.update_data(pending_action={'type': 'set_access_level', 'user_id': selected_user_id, 'level': new_access_level})
    
    level_name = next((name for level, name in ACCESS_LEVEL_BUTTONS if level == new_access_level), f"–†—ñ–≤–µ–Ω—å {new_access_level}")
    confirm_message = (
        f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É "
        f"<b>{level_name} ({new_access_level})</b> –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID <code>{selected_user_id}</code>?"
    )
    keyboard = get_confirm_action_keyboard(f"set_access_level_{new_access_level}_{selected_user_id}")
    
    await callback.message.edit_text(confirm_message, reply_markup=keyboard, parse_mode=ParseMode.HTML)
    await state.set_state(AdminStates.confirm_action)
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_"), AdminStates.confirm_action)
async def process_confirm_action(
    callback: types.CallbackQuery,
    db_pool: asyncpg.Pool,
    state: FSMContext
) -> None:
    user_id = callback.from_user.id
    action_full_data = callback.data.split('confirm_')[1]
    
    current_state_data = await state.get_data()
    pending_action = current_state_data.get('pending_action')

    if not pending_action:
        logger.error(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Å–ø—Ä–æ–±—É–≤–∞–≤ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –¥—ñ—é, –∞–ª–µ pending_action –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: –ù–µ–º–∞—î –¥—ñ—ó –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.", show_alert=True)
        await state.set_state(AdminStates.user_management) # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
        await callback.message.edit_text("–î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É. –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.", reply_markup=get_admin_main_keyboard(), parse_mode=ParseMode.HTML)
        return

    action_type = pending_action['type']
    selected_user_id = pending_action['user_id']
    
    success_message = "–î—ñ—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω–∞."
    error_message = "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥—ñ—ó."
    
    try:
        if action_type == "authorize":
            await users_db.set_user_authorization_status(db_pool, selected_user_id, True)
            success_message = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á <code>{selected_user_id}</code> —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π."
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {selected_user_id}.")
        elif action_type == "unauthorize":
            await users_db.set_user_authorization_status(db_pool, selected_user_id, False)
            success_message = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á <code>{selected_user_id}</code> —É—Å–ø—ñ—à–Ω–æ –¥–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π."
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –¥–µ–∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {selected_user_id}.")
        elif action_type == "set_access_level":
            new_access_level = pending_action['level']
            await users_db.set_user_access_level(db_pool, selected_user_id, new_access_level)
            level_name = next((name for level, name in ACCESS_LEVEL_BUTTONS if level == new_access_level), f"–†—ñ–≤–µ–Ω—å {new_access_level}")
            success_message = (
                f"–†—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{selected_user_id}</code> —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ "
                f"<b>{level_name} ({new_access_level})</b>."
            )
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤—Å—Ç–∞–Ω–æ–≤–∏–≤ —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É {new_access_level} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {selected_user_id}.")
        else:
            await callback.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.", show_alert=True)
            logger.warning(f"–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: {action_type}.")
            await state.set_state(AdminStates.user_management) # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
            await callback.message.edit_text("–î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.", reply_markup=get_admin_main_keyboard(), parse_mode=ParseMode.HTML)
            return

        await callback.message.edit_text(success_message, parse_mode=ParseMode.HTML)
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –∞–±–æ –¥–æ —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        await state.set_state(AdminStates.user_management) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ —Å—Ç–∞–Ω —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
        user_info_message = await _get_user_info_message(db_pool, selected_user_id)
        is_authorized_after_action = await users_db.is_user_authorized(db_pool, selected_user_id)
        current_access_level_after_action = (await users_db.get_user(db_pool, selected_user_id)).get('access_level', 0)
        keyboard = get_user_actions_keyboard(is_authorized_after_action, current_access_level_after_action, selected_user_id)
        await callback.message.answer(user_info_message, reply_markup=keyboard, parse_mode=ParseMode.HTML)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ –¥—ñ—ó '{action_type}' –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {selected_user_id}: {e}", exc_info=True)
        await callback.message.edit_text(error_message, parse_mode=ParseMode.HTML)
        await state.set_state(AdminStates.user_management) # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
        user_info_message = await _get_user_info_message(db_pool, selected_user_id)
        is_authorized_after_action = await users_db.is_user_authorized(db_pool, selected_user_id)
        current_access_level_after_action = (await users_db.get_user(db_pool, selected_user_id)).get('access_level', 0)
        keyboard = get_user_actions_keyboard(is_authorized_after_action, current_access_level_after_action, selected_user_id)
        await callback.message.answer(user_info_message, reply_markup=keyboard, parse_mode=ParseMode.HTML)

    await callback.answer()


@router.callback_query(F.data == "cancel_action", AdminStates.confirm_action)
async def process_cancel_action(
    callback: types.CallbackQuery,
    db_pool: asyncpg.Pool,
    state: FSMContext
) -> None:
    user_id = callback.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Å–∫–∞—Å—É–≤–∞–≤ –¥—ñ—é.")

    current_state_data = await state.get_data()
    pending_action = current_state_data.get('pending_action')
    
    if pending_action and 'user_id' in pending_action:
        selected_user_id = pending_action['user_id']
        await state.set_state(AdminStates.user_management) # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
        user_info_message = await _get_user_info_message(db_pool, selected_user_id)
        is_authorized_after_action = await users_db.is_user_authorized(db_pool, selected_user_id)
        current_access_level_after_action = (await users_db.get_user(db_pool, selected_user_id)).get('access_level', 0)
        keyboard = get_user_actions_keyboard(is_authorized_after_action, current_access_level_after_action, selected_user_id)
        await callback.message.edit_text("–î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.", reply_markup=keyboard, parse_mode=ParseMode.HTML)
    else:
        # –Ø–∫—â–æ –Ω–µ–º–∞—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ pending_action –Ω–µ–≤—ñ—Ä–Ω–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–æ –≥–æ–ª–æ–≤–Ω–æ—ó –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
        await state.set_state(AdminStates.admin_main)
        await callback.message.edit_text(
            "–î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞. –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ—ó –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.",
            reply_markup=get_admin_main_keyboard(),
            parse_mode=ParseMode.HTML
        )
    
    await state.update_data(pending_action=None) # –û—á–∏—â–∞—î–º–æ pending_action
    await callback.answer("–î—ñ—è —Å–∫–∞—Å–æ–≤–∞–Ω–∞.")


@router.callback_query(F.data.startswith("change_access_level_"), AdminStates.user_management)
async def process_change_access_level_button(
    callback: types.CallbackQuery,
    state: FSMContext
) -> None:
    user_id = callback.from_user.id
    selected_user_id = int(callback.data.split('_')[3])
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —ñ–Ω—ñ—Ü—ñ—é–≤–∞–≤ –∑–º—ñ–Ω—É —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {selected_user_id}.")

    await state.set_state(AdminStates.set_access_level)
    await state.update_data(selected_user_id=selected_user_id) # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –æ–±—Ä–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    keyboard = get_access_level_keyboard(selected_user_id) # –ü–µ—Ä–µ–¥–∞—î–º–æ selected_user_id –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–∫–∞—Å—É–≤–∞—Ç–∏"
    await callback.message.edit_text(
        f"–í–∏–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID <code>{selected_user_id}</code>:",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()


@router.callback_query(AdminCallback.filter(F.action == "telethon_auth"), AdminStates.admin_main | AdminStates.telethon_management)
async def process_telethon_auth(
    callback: types.CallbackQuery,
    db_pool: asyncpg.Pool,
    state: FSMContext
) -> None:
    user_id = callback.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ 'TeleKey ¬∑ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è API-–∑–≤‚Äô—è–∑–∫—É'.")
    
    await state.set_state(AdminStates.telethon_management) # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –¥–ª—è Telethon —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è

    keyboard = get_telethon_actions_keyboard()
    await callback.message.edit_text(
        "<b>üîê TeleKey ¬∑ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è API-–∑–≤‚Äô—è–∑–∫—É:</b>\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è Telethon API:",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

@router.callback_query(F.data == "cancel_admin_action", AdminStates.user_management | AdminStates.telethon_management | AdminStates.set_access_level)
async def cancel_admin_action(
    callback: types.CallbackQuery,
    db_pool: asyncpg.Pool,
    state: FSMContext,
    bot: Bot # –ü–æ—Ç—Ä—ñ–±–µ–Ω, —è–∫—â–æ send_message –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –Ω–µ —á–µ—Ä–µ–∑ callback.message
) -> None:
    user_id = callback.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Å–∫–∞—Å—É–≤–∞–≤ –∞–¥–º—ñ–Ω-–¥—ñ—é —ñ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é.")
    
    await state.set_state(AdminStates.admin_main) # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ—ó –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
    await state.update_data(pending_action=None, selected_user_id=None) # –û—á–∏—â–∞—î–º–æ –¥–∞–Ω—ñ

    await callback.message.edit_text(
        "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ—ó –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.",
        reply_markup=get_admin_main_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

@router.callback_query(F.data == "close_admin_panel", AdminStates.admin_main)
async def close_admin_panel(
    callback: types.CallbackQuery,
    db_pool: asyncpg.Pool,
    state: FSMContext
) -> None:
    user_id = callback.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–∫—Ä–∏–≤–∞—î –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å.")

    await state.clear() # –û—á–∏—â–∞—î–º–æ –≤—Å—ñ —Å—Ç–∞–Ω–∏ FSM
    await state.set_state(MenuStates.main_menu) # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é

    access_level = await users_db.get_user_access_level(db_pool, user_id)
    if access_level is None:
        access_level = 0
    
    # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∑ handlers.menu_handler
    # –¶–µ –≤–∏–º–∞–≥–∞—î –ø–µ—Ä–µ–¥–∞—á—ñ message, bot, db_pool, state.
    # –û—Å–∫—ñ–ª—å–∫–∏ —Ç—É—Ç callback, –º–∏ –º–æ–∂–µ–º–æ –∞–±–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ send_message
    # –∞–±–æ —ñ–º—ñ—Ç—É–≤–∞—Ç–∏ message –¥–ª—è show_main_menu_handler.
    
    # –ö—Ä–∞—â–µ –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –≥–æ–ª–æ–≤–Ω–∏–º –º–µ–Ω—é, –Ω–µ –≤–∏–∫–ª–∏–∫–∞—é—á–∏ —Ö–µ–Ω–¥–ª–µ—Ä.
    await callback.message.edit_text(
        "–í–∏ –≤–∏–π—à–ª–∏ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ. –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
        reply_markup=await get_main_menu_keyboard(access_level, 0), # page=0 –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        parse_mode=ParseMode.HTML
    )
    await callback.answer("–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä–∏—Ç–æ.")
    logger.info(f"–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä–∏—Ç–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}.")