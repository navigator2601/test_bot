# handlers/admin_handler.py
import logging
from aiogram import Router, types, F, Bot, Dispatcher
import asyncpg
from aiogram.fsm.context import FSMContext
from datetime import datetime, timezone
import random
import asyncio # –î–æ–¥–∞–Ω–æ –¥–ª—è sys.exit() —ñ asyncio.sleep()
import sys     # –î–æ–¥–∞–Ω–æ –¥–ª—è sys.exit()

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –ø–∞–∫–µ—Ç—É keyboards
from keyboards import get_main_menu_keyboard

# –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –∞–¥–º—ñ–Ω—Å—å–∫—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –º–æ–¥—É–ª—è admin_keyboard
from keyboards.admin_keyboard import (
    get_admin_main_keyboard,
    get_users_list_keyboard,
    get_user_actions_keyboard,
    get_access_level_keyboard,
    ACCESS_LEVEL_BUTTONS
)

# !!! –í–ò–ü–†–ê–í–õ–ï–ù–û –®–õ–Ø–• –î–û –Ü–ú–ü–û–†–¢–£ –ë–ê–ó–ò –î–ê–ù–ò–• !!!
from database.users_db import get_user, add_user, update_user_activity, get_user_access_level, get_all_users, update_user_authorization_status

# --- –°–ü–ò–°–û–ö –í–Ü–¢–ê–õ–¨–ù–ò–• –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ –î–õ–Ø –°–ü–ò–°–ö–£ –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í ---
USER_LIST_MESSAGES = [
    "<b>üßæ Refridex OS:</b>\n ‚Äú–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö ID –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±–µ—Ä–∏ —Ü—ñ–ª—å –∑—ñ —Å–ø–∏—Å–∫—É.‚Äù",
    "<b>üìÇ Refridex OS:</b>\n ‚Äú–Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –û–±–µ—Ä–∏ —Å—É–±‚Äô—î–∫—Ç–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è.‚Äù",
    "<b>üîç Refridex OS:</b>\n ‚Äú–î–æ—Å—Ç—É–ø–Ω—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —è–¥—Ä–∞. –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –æ–¥–Ω–æ–≥–æ ‚Äî –Ω–∞ —Ç–≤—ñ–π –≤–∏–±—ñ—Ä.‚Äù",
    "<b>üë§ Refridex OS:</b>\n ‚Äú–í–∏—è–≤–ª–µ–Ω–æ –æ–±–ª—ñ–∫–æ–≤—ñ –æ–¥–∏–Ω–∏—Ü—ñ. –û–±–µ—Ä–∏ –æ–±'—î–∫—Ç –≤–∑–∞—î–º–æ–¥—ñ—ó –∑—ñ —Å–ø–∏—Å–∫—É.‚Äù",
    "<b>üì° Refridex OS:</b>\n ‚Äú–ú–æ–¥—É–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–æ. –û–±–µ—Ä–∏ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä.‚Äù",
    "<b>üß¨ Refridex OS:</b>\n ‚Äú–°–ø–∏—Å–æ–∫ –∞–≤–∞—Ç–∞—Ä—ñ–≤ —Å–∏—Å—Ç–µ–º–∏ –≥–æ—Ç–æ–≤–∏–π –¥–æ –¥—ñ–π. –û–±–µ—Ä–∏ –Ω–∞–ø—Ä—è–º–æ–∫ –∫–æ–Ω—Ç—Ä–æ–ª—é.‚Äù",
    "<b>üí† Refridex OS:</b>\n ‚Äú–¶–∏—Ñ—Ä–æ–≤—ñ —Å–∏–≥–Ω–∞—Ç—É—Ä–∏ –∞–∫—Ç–∏–≤–Ω—ñ. –ö–æ–≥–æ –ø—Ä–æ—Å–∫–∞–Ω—É–≤–∞—Ç–∏ –¥–∞–ª—ñ?‚Äù",
    "<b>üìú Refridex OS:</b>\n ‚Äú–Ü–Ω–¥–µ–∫—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ. –†–æ–∑–ø–æ—á–Ω–∏ –≤–∑–∞—î–º–æ–¥—ñ—é.‚Äù",
    "<b>üïπÔ∏è Refridex OS:</b>\n ‚Äú–û–±‚Äô—î–∫—Ç–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω—ñ. –°–∏—Å—Ç–µ–º–∞ –æ—á—ñ–∫—É—î –≤–∏–±–æ—Ä—É.‚Äù",
    "<b>üìä Refridex OS:</b>\n ‚Äú–ê–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –ø–µ—Ä–µ–≥–ª—è–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤. –û–±–µ—Ä–∏ –æ–¥–∏–Ω–∏—Ü—é –¥–ª—è –¥—ñ–π.‚Äù"
]
# -----------------------------------------------------------

# --- –°–ü–ò–°–û–ö –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ –ü–†–ò –ü–û–í–ï–†–ù–ï–ù–ù–Ü –î–û –ê–î–ú–Ü–ù-–ú–ï–ù–Æ ---
ADMIN_RETURN_MESSAGES = [
    "üß† Refridex OS:\n–°–µ–∞–Ω—Å –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.\nüîÅ –í–∏ –∑–Ω–æ–≤—É –ø–µ—Ä–µ–±—É–≤–∞—î—Ç–µ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n‚åÅ –û—á—ñ–∫—É—é –ø–æ–¥–∞–ª—å—à–∏—Ö —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π‚Ä¶",
    "üß† Refridex OS:\n–ê–¥–º—ñ–Ω-–¥–æ—Å—Ç—É–ø –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.\nüõ°Ô∏è –ü–∞–Ω–µ–ª—å –∫–æ–º–∞–Ω–¥ –∞–∫—Ç–∏–≤–Ω–∞.\n‚åÅ –ß–∞—Å –∫–µ—Ä—É–≤–∞—Ç–∏ –ö–æ–Ω–¥–∏-–õ–µ–Ω–¥–æ–º.",
    "üß† Refridex OS:\n–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —É –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∏–π —Ü–µ–Ω—Ç—Ä –≤–∏–∫–æ–Ω–∞–Ω–æ.\nüîß –°–∏—Å—Ç–µ–º–Ω—ñ —à–∏–Ω–∏ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ.\n‚åÅ –ì–æ—Ç–æ–≤–∏–π –¥–æ –º–∞–Ω—ñ–ø—É–ª—è—Ü—ñ–π.",
    "üß† Refridex OS:\n–û–ø–µ—Ä–∞—Ç–æ—Ä —É —Å–∏—Å—Ç–µ–º—ñ.\n‚òëÔ∏è –ü—Ä–æ—Ç–æ–∫–æ–ª–∏ –±–µ–∑–ø–µ–∫–∏ –ø—Ä–æ–π–¥–µ–Ω–æ.\n‚åÅ –ß–µ–∫–∞—é –Ω–∞ –≤–∞—à –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ö—ñ–¥.",
    "üß† Refridex OS:\n–í–∏ –∑–Ω–æ–≤—É –±—ñ–ª—è —è–¥—Ä–∞.\nüß¨ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É —Ä—ñ–≤–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.\n‚åÅ –°–∫–∞–Ω—É—é –º–æ–∂–ª–∏–≤—ñ –¥—ñ—ó‚Ä¶",
    "üß† Refridex OS:\n–ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ–≤–µ—Ä–Ω—É—Ç–æ.\nüìä –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –≥–æ—Ç–æ–≤–∏–π –¥–æ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—ñ–≤.\n‚åÅ –í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É.",
    "üß† Refridex OS:\n–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞ –ø–∞–Ω–µ–ª—å —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–∞.\n‚öôÔ∏è –ü—Ä–∏–≤'—è–∑–∫–∞ –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é ‚Äî –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞.\n‚åÅ –Ø–¥—Ä–æ –≤ —Ä–µ–∂–∏–º—ñ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è.",
    "üß† Refridex OS:\nüîÑ –ü–µ—Ä–µ—Ö—ñ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n–í–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n‚åÅ –ü—ñ–¥—Å–∏—Å—Ç–µ–º–∞ —Å–ª—É—Ö–∞—î.",
    "üß† Refridex OS:\n–í—Ö—ñ–¥ –¥–æ –∞–¥–º—ñ–Ω-—Ç–µ—Ä–º—ñ–Ω–∞–ª—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\nüõ†Ô∏è –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–Ω–æ–≤–ª–µ–Ω–æ.\n‚åÅ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–π–º–∞—î –∫–æ–º–∞–Ω–¥–∏.",
    "üß† Refridex OS:\n–°–∏–≥–Ω–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ.\nüéõÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.\n‚åÅ –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥ ‚Äî —É –≤–∞—à–æ–º—É —Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—ñ.",
    "üß† Refridex OS:\n–ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –ø–∞–Ω–µ–ª–ª—é –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.\nüì° –†—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É: ROOT.\n‚åÅ –ß–∞—Å –¥—ñ—è—Ç–∏, –∫–æ–º–∞–Ω–¥–∏—Ä–µ.",
    "üß† Refridex OS:\n–î–æ–±—Ä–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å, –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–µ.\nüîê –í–∞—à–µ –º—ñ—Å—Ü–µ –∑–∞ –ø—É–ª—å—Ç–æ–º –∫–æ–Ω—Ç—Ä–æ–ª—é.\n‚åÅ –ö–æ–Ω–¥–∏-—Å–≤—ñ—Ç–ª–æ –≥–æ—Ç–æ–≤–µ –¥–æ –≤–∞—à–æ—ó –≤–æ–ª—ñ.",
    "üß† Refridex OS:\n–ü–æ—Ä—Ç –∫–µ—Ä—É–≤–∞–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏—Ç–æ.\nüß≠ –í–∏ –≤ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º—É –º–æ–¥—É–ª—ñ.\n‚åÅ –ù–∞–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–∏—Å—Ç–µ–º—É.",
    "üß† Refridex OS:\n–í—ñ—Ç–∞—é –≤ –µ–ø—ñ—Ü–µ–Ω—Ç—Ä—ñ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è.\n‚ö°Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø–æ–≤–Ω—ñ—Å—Ç—é –≤ –æ–Ω–ª–∞–π–Ω—ñ.\n‚åÅ –ß–µ–∫–∞—é –Ω–∞ –≤—Ö—ñ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É.",
    "üß† Refridex OS:\n–û–ø–µ—Ä–∞—Ü—ñ–π–Ω–∞ –ª—ñ–Ω—ñ—è –∞–∫—Ç–∏–≤–Ω–∞.\nüéØ –ü–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–∏–≤–µ–¥–µ–Ω–æ –Ω–∞ –ø–µ—Ä–µ–¥–Ω—ñ–π –ø–ª–∞–Ω.\n‚åÅ –í–≤–µ–¥—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é."
]
# -----------------------------------------------------------

try:
    from telethon_client import get_telethon_status, get_dialogs_list_telethon, TelethonClientManager
except ImportError:
    logging.warning("Telethon client not found. Telethon related functions will be disabled.")
    async def get_telethon_status(client=None) -> str:
        return "‚ùì Telethon –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∞–±–æ –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ."
    async def get_dialogs_list_telethon(client=None) -> list:
        return []
    class TelethonClientManager:
        def __init__(self, db_pool):
            self.client = None
            self.db_pool = db_pool
        async def start_client(self): pass
        async def disconnect_client(self): pass
        async def authorize_client(self, phone_number): return False
        async def sign_in_client(self, code, password=None): return False
        async def get_client(self): return None
        # –î–æ–¥–∞–Ω—ñ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –Ω–æ–≤–∏—Ö –º–µ—Ç–æ–¥—ñ–≤
        async def is_client_connected(self): return False
        def get_session_name(self): return "N/A"
        def get_phone_number(self): return "N/A"
        def get_user_id(self): return "N/A"
        def get_session_hash(self): return "N/A"


logger = logging.getLogger(__name__)
router = Router()
user_list_pages = {}

# --- NEW HANDLER FOR CONNECTION STATUS ---
@router.callback_query(F.data == "admin_connection_status")
async def process_connection_status(callback: types.CallbackQuery, telethon_manager: TelethonClientManager, db_pool_instance: asyncpg.Pool):
    user_id = callback.from_user.id
    current_message = callback.message

    logger.info(f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –∑–∞–ø–∏—Ç–∞–≤ —Å—Ç–∞—Ç—É—Å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è.")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É
    access_level = await get_user_access_level(db_pool_instance, user_id)
    if access_level < 10: # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ —Ä—ñ–≤–µ–Ω—å 10 (–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –Ø–¥—Ä–∞) –∞–±–æ –≤–∏—â–µ –º–æ–∂–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ —Å—Ç–∞—Ç—É—Å
        await callback.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç—É—Å—É –∑–≤'—è–∑–∫—É.", show_alert=True)
        logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} (—Ä—ñ–≤–µ–Ω—å {access_level}) –Ω–∞–º–∞–≥–∞–≤—Å—è –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç—É—Å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –±–µ–∑ –¥–æ—Å—Ç–∞—Ç–Ω—ñ—Ö –ø—Ä–∞–≤.")
        return

    await current_message.edit_text("üì° ReLink: –ó—á–∏—Ç—É—é –¥–∞–Ω—ñ –∫–∞–Ω–∞–ª—É –∑–≤'—è–∑–∫—É... –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ.")

    status_text = "üìä **ReLink: –°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª—É –∑–≤'—è–∑–∫—É**\n\n"
    connection_successful = True

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É Telethon
        is_connected = await telethon_manager.is_client_connected()
        session_name = telethon_manager.get_session_name()
        phone_number = telethon_manager.get_phone_number()

        status_text += f"‚ñ™Ô∏è **Telethon:** "
        if is_connected:
            status_text += "‚úÖ **–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ**\n"
            status_text += f"  ‚Ä¢ –Ü–º'—è —Å–µ—Å—ñ—ó: `{session_name}`\n"
            status_text += f"  ‚Ä¢ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: `{phone_number if phone_number else '–ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ'}`\n"
            status_text += f"  ‚Ä¢ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telethon: `{telethon_manager.get_user_id() if telethon_manager.get_user_id() else '–ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ'}`\n"
            status_text += f"  ‚Ä¢ –•–µ—à —Å–µ—Å—ñ—ó: `{telethon_manager.get_session_hash()[:8]}...`\n" # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à—ñ 8 —Å–∏–º–≤–æ–ª—ñ–≤ —Ö–µ—à—É
        else:
            status_text += "‚ùå **–í—ñ–¥–∫–ª—é—á–µ–Ω–æ**\n"
            status_text += "  ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: –ó–∞–ø—É—Å—Ç—ñ—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é TeleKey.\n"
            connection_successful = False

        # –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —ñ–Ω—à–∏—Ö –ø—ñ–¥–∫–ª—é—á–µ–Ω—å –∞–±–æ —Å–µ—Ä–≤—ñ—Å—ñ–≤

        # –î–æ–¥–∞–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å
        if connection_successful:
            status_text += "\nüåü **–ó–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω:** –í—Å—ñ –æ—Å–Ω–æ–≤–Ω—ñ —Å–∏—Å—Ç–µ–º–∏ –∑–≤'—è–∑–∫—É –ø—Ä–∞—Ü—é—é—Ç—å —Å—Ç–∞–±—ñ–ª—å–Ω–æ."
        else:
            status_text += "\n‚ö†Ô∏è **–ó–∞–≥–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω:** –í–∏—è–≤–ª–µ–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º–∏. –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞."

    except Exception as e:
        status_text = f"‚ùå **ReLink: –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –∑–≤'—è–∑–∫—É!**\n"
        status_text += f"–î–µ—Ç–∞–ª—ñ: `{e}`\n"
        status_text += "\n–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞."
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Å—Ç–∞—Ç—É—Å—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}", exc_info=True)

    await current_message.edit_text(status_text, reply_markup=get_admin_main_keyboard(), parse_mode="Markdown")
    await callback.answer() # –ó–∞–≤–µ—Ä—à—É—î–º–æ –æ–±—Ä–æ–±–∫—É callback-–∑–∞–ø–∏—Ç—É
# --- END NEW HANDLER ---

# --- NEW HANDLER FOR BOT RESTART ---
@router.callback_query(F.data == "admin_restart_bot") # –¶–µ callback, —è–∫–∏–π –≤–∏ –¥–æ–¥–∞—Å—Ç–µ –≤ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
async def admin_restart_bot_handler(callback_query: types.CallbackQuery, dispatcher: Dispatcher) -> None:
    user_id = callback_query.from_user.id
    db_pool = dispatcher.workflow_data.get('db_pool_instance')
    bot = callback_query.bot

    logger.info(f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –∑–∞–ø—Ä–æ—Å–∏–≤ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞.")

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –¥–ª—è –±–µ–∑–ø–µ–∫–∏)
    if not db_pool:
        logger.error("db_pool_instance –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ workflow_data –¥–ª—è admin_restart_bot_handler!")
        await callback_query.answer("–í–∏–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    admin_access_level = await get_user_access_level(db_pool, user_id)
    if admin_access_level < 100: # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ 100 - —Ü–µ —Ä—ñ–≤–µ–Ω—å —Å—É–ø–µ—Ä-–∞–¥–º—ñ–Ω–∞ (–ê—Ä—Ö—ñ—Ç–µ–∫—Ç–æ—Ä –°–∏—Å—Ç–µ–º–∏)
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.", show_alert=True)
        logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} (—Ä—ñ–≤–µ–Ω—å {admin_access_level}) –Ω–∞–º–∞–≥–∞–≤—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ –±–µ–∑ –¥–æ—Å—Ç–∞—Ç–Ω—ñ—Ö –ø—Ä–∞–≤.")
        return

    try:
        restart_message = "üîÑ Refridex OS: –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ç–æ–∫–æ–ª '–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–∏'.\n–û—á—ñ–∫—É–π—Ç–µ, –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–≤'—è–∑–∫—É –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è –∑–∞ –¥–µ–∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥..."
        await callback_query.message.edit_text(restart_message)
        await callback_query.answer("–ó–∞–ø–∏—Ç –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.", show_alert=False)
        logger.info(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}.")

        # –í–∞–∂–ª–∏–≤–æ: –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤—Å—ñ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó —Ç–∞ –∑–∞–∫—Ä–∏—Ç–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è
        if db_pool:
            logger.info("–ó–∞–∫—Ä–∏–≤–∞—é –ø—É–ª –∑'—î–¥–Ω–∞–Ω—å –¥–æ –ë–î...")
            await db_pool.close()
            logger.info("–ü—É–ª –∑'—î–¥–Ω–∞–Ω—å –¥–æ –ë–î –∑–∞–∫—Ä–∏—Ç–æ.")

        # –Ø–∫—â–æ —É –≤–∞—Å —î –º–µ–Ω–µ–¥–∂–µ—Ä Telethon, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–∫–ª—é—á–∏—Ç–∏ –ø–µ—Ä–µ–¥ –≤–∏—Ö–æ–¥–æ–º
        telethon_manager = dispatcher.workflow_data.get('telethon_manager')
        if telethon_manager:
            logger.info("–í—ñ–¥–∫–ª—é—á–∞—é Telethon –∫–ª—ñ—î–Ω—Ç–∞...")
            await telethon_manager.disconnect_client()
            logger.info("Telethon –∫–ª—ñ—î–Ω—Ç –≤—ñ–¥–∫–ª—é—á–µ–Ω–∏–π.")

        # –ù–µ–≤–µ–ª–∏–∫–∏–π —Ç–∞–π–º–∞—É—Ç, —â–æ–± Telegram –≤—Å—Ç–∏–≥ –æ–±—Ä–æ–±–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await asyncio.sleep(1)

        logger.critical(f"–ë–æ—Ç —ñ–Ω—ñ—Ü—ñ—é—î –≤–∏—Ö—ñ–¥ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –∑–∞ –∑–∞–ø–∏—Ç–æ–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user_id}.")
        sys.exit(0) # –ó–∞–≤–µ—Ä—à—É—î–º–æ –ø—Ä–æ—Ü–µ—Å –±–æ—Ç–∞

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞—Ü—ñ—ó –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞ –¥–ª—è {user_id}: {e}", exc_info=True)
        await callback_query.message.answer("–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–ø—Ä–æ–±–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏.")
        await callback_query.answer("–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É.", show_alert=True)
# --- END NEW HANDLER FOR BOT RESTART ---


@router.callback_query(F.data == "admin_show_users")
async def admin_show_users_handler(callback_query: types.CallbackQuery, dispatcher: Dispatcher) -> None:
    db_pool = dispatcher.workflow_data.get('db_pool_instance')
    bot = callback_query.bot
    logger.info(f"!!! –°–ø—Ä–∞—Ü—é–≤–∞–≤ –æ–±—Ä–æ–±–Ω–∏–∫ admin_show_users_handler –¥–ª—è {callback_query.from_user.id} !!!")
    logger.info(f"DB Pool: {db_pool is not None}, Bot: {bot is not None}")
    logger.info(f"Callback data: {callback_query.data}")

    if not db_pool:
        logger.error("db_pool_instance –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ workflow_data –¥–ª—è admin_show_users_handler!")
        await callback_query.answer("–í–∏–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    users = await get_all_users(db_pool)
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ {len(users)} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –ë–î.")

    user_list_pages[callback_query.from_user.id] = 0
    current_page = user_list_pages[callback_query.from_user.id]
    users_per_page = 5
    total_users = len(users)
    total_pages = (total_users + users_per_page - 1) // users_per_page if total_users > 0 else 1

    user_list_welcome_text = random.choice(USER_LIST_MESSAGES)

    response_text = ""
    reply_markup = None

    if not users:
        response_text = "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."
        reply_markup = get_admin_main_keyboard()
        logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback_query.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–≤ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, –∞–ª–µ —ó—Ö –Ω–µ–º–∞—î.")
    else:
        response_text = (
            f"{user_list_welcome_text}\n\n"
            f"<i>(—Å—Ç–æ—Ä. {current_page + 1}/{total_pages}):</i>"
        )
        reply_markup = get_users_list_keyboard(users, current_page, users_per_page)
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {callback_query.from_user.id} –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ {current_page + 1}.")

    try:
        await callback_query.message.edit_text(
            response_text,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ {callback_query.from_user.id}: {e}", exc_info=True)
        await callback_query.message.answer(
            response_text,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    await callback_query.answer()

@router.callback_query(F.data == "cancel_admin_action")
async def cancel_admin_action_handler(callback_query: types.CallbackQuery, dispatcher: Dispatcher) -> None:
    user_id = callback_query.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –¥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é'.")

    # –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É
    return_message = random.choice(ADMIN_RETURN_MESSAGES)

    try:
        await callback_query.message.edit_text(
            return_message, # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–∞–Ω–¥–æ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            parse_mode='HTML',
            reply_markup=get_admin_main_keyboard()
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}", exc_info=True)
        await callback_query.message.answer(
            return_message, # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–∞–Ω–¥–æ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            parse_mode='HTML',
            reply_markup=get_admin_main_keyboard()
        )
    await callback_query.answer()

@router.callback_query(F.data.startswith("page_"))
async def paginate_users_list(callback_query: types.CallbackQuery, dispatcher: Dispatcher) -> None:
    user_id = callback_query.from_user.id
    db_pool = dispatcher.workflow_data.get('db_pool_instance')

    if not db_pool:
        logger.error("db_pool_instance –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ workflow_data –¥–ª—è paginate_users_list!")
        await callback_query.answer("–í–∏–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    new_page = int(callback_query.data.split('_')[1])
    user_list_pages[user_id] = new_page

    users = await get_all_users(db_pool)
    users_per_page = 5
    total_users = len(users)
    total_pages = (total_users + users_per_page - 1) // users_per_page if total_users > 0 else 1

    user_list_welcome_text = random.choice(USER_LIST_MESSAGES)

    if not users:
        response_text = "–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤."
        reply_markup = get_admin_main_keyboard()
    else:
        response_text = (
            f"{user_list_welcome_text}\n\n"
            f"<b>–û–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑—ñ —Å–ø–∏—Å–∫—É (—Å—Ç–æ—Ä. {new_page + 1}/{total_pages}):</b>"
        )
        reply_markup = get_users_list_keyboard(users, new_page, users_per_page)

    try:
        await callback_query.message.edit_text(
            response_text,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó —Å–ø–∏—Å–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è {user_id}: {e}", exc_info=True)
        await callback_query.message.answer(
            response_text,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    await callback_query.answer()

@router.callback_query(F.data.startswith("user_"))
async def show_user_management_menu(callback_query: types.CallbackQuery, dispatcher: Dispatcher) -> None:
    user_id_to_manage = int(callback_query.data.split('_')[1])
    current_admin_id = callback_query.from_user.id
    db_pool = dispatcher.workflow_data.get('db_pool_instance')
    bot = callback_query.bot

    logger.info(f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {current_admin_id} –æ–±—Ä–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_manage} –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è.")

    if not db_pool:
        logger.error("db_pool_instance –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ workflow_data –¥–ª—è show_user_management_menu!")
        await callback_query.answer("–í–∏–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    user_info = await get_user(db_pool, user_id_to_manage)
    if not user_info:
        logger.warning(f"–°–ø—Ä–æ–±–∞ –∫–µ—Ä—É–≤–∞—Ç–∏ –Ω–µ—ñ—Å–Ω—É—é—á–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user_id_to_manage} –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {current_admin_id}.")
        await callback_query.answer("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
        await admin_show_users_handler(callback_query, dispatcher)
        return

    is_authorized = user_info.get('is_authorized', False)
    access_level = user_info.get('access_level', 0)

    access_level_display_name = "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä—ñ–≤–µ–Ω—å"
    for level, name in ACCESS_LEVEL_BUTTONS:
        if level == access_level:
            access_level_display_name = name
            break

    status_text = "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π ‚úÖ" if is_authorized else "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π ‚ùå"

    # !!! –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è 'registered_at' –¥–ª—è –¥–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó !!!
    registered_at_dt = user_info.get('registered_at', datetime.now(timezone.utc))
    last_activity_dt = user_info.get('last_activity', datetime.now(timezone.utc))

    registered_at_str = registered_at_dt.strftime('%d.%m.%Y / %H:%M')
    last_activity_str = last_activity_dt.strftime('%d.%m.%Y / %H:%M')

    response_text = (
        f"<b>üßæ ID-–∫–ª—é—á:</b> <code>{user_id_to_manage}</code>\n"
        f"<b>üßë‚ÄçüöÄ –ê–≥–µ–Ω—Ç:</b> {user_info.get('first_name', '')} {user_info.get('last_name', '')}\n"
        f"<b>üí¨ –ü–æ–∑–∏–≤–Ω–∏–π:</b> @{user_info.get('username', 'N/A')}\n"
        f"<b>üõ°Ô∏è –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–æ—Å—Ç—É–ø—É:</b> {access_level_display_name}\n"
        f"<b>üì∂ –°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
        f"<b>üì• –ó–∞–Ω–µ—Å–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É:</b> {registered_at_str}\n"
        f"<b>üìà –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b> {last_activity_str}\n"
        f"‚ò∞‚ò±‚ò≤‚ò≥‚ò¥‚òµ‚ò∂‚ò∑‚ò∞‚ò±‚ò≤‚ò≥‚ò¥‚òµ‚ò∂‚ò∑‚ò∞‚ò±‚ò≤‚ò≥\n"
        f"<b>üì° –ö–æ–º–∞–Ω–¥–Ω–∏–π —Ü–µ–Ω—Ç—Ä –∞–∫—Ç–∏–≤–Ω–∏–π. –û—á—ñ–∫—É—î—Ç—å—Å—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è‚Ä¶</b>"
    )

    reply_markup = get_user_actions_keyboard(is_authorized, access_level, user_id_to_manage)

    try:
        await callback_query.message.edit_text(
            response_text,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user_id_to_manage}: {e}", exc_info=True)
        await callback_query.message.answer(
            response_text,
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    await callback_query.answer()


@router.callback_query(F.data.startswith("change_access_level_"))
async def request_change_access_level(callback_query: types.CallbackQuery, dispatcher: Dispatcher) -> None:
    user_id_to_manage = int(callback_query.data.split('_')[3])
    admin_id = callback_query.from_user.id
    db_pool = dispatcher.workflow_data.get('db_pool_instance')

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {admin_id} –∑–∞–ø—Ä–æ—Å–∏–≤ –∑–º—ñ–Ω—É —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–ª—è {user_id_to_manage}.")

    if not db_pool:
        logger.error("db_pool_instance –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ workflow_data –¥–ª—è request_change_access_level!")
        await callback_query.answer("–í–∏–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    user_info = await get_user(db_pool, user_id_to_manage)

    user_name_display = f"ID: {user_id_to_manage}"
    if user_info:
        first_name = user_info.get('first_name')
        last_name = user_info.get('last_name')

        if first_name and last_name:
            user_name_display = f"{first_name} {last_name} (ID: {user_id_to_manage})"
        elif first_name:
            user_name_display = f"{first_name} (ID: {user_id_to_manage})"

    reply_markup = get_access_level_keyboard(user_id_to_manage)

    try:
        await callback_query.message.edit_text(
            f"–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <b>{user_name_display}</b>:",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –∑–º—ñ–Ω–∏ —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–ª—è {user_id_to_manage}: {e}", exc_info=True)
        await callback_query.message.answer(
            f"–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <b>{user_name_display}</b>:",
            parse_mode='HTML',
            reply_markup=reply_markup
        )
    await callback_query.answer()

@router.callback_query(F.data.startswith("set_access_level_"))
async def set_new_access_level(callback_query: types.CallbackQuery, dispatcher: Dispatcher) -> None:
    parts = callback_query.data.split('_')
    new_level = int(parts[3])
    user_id_to_manage = int(parts[4])
    admin_id = callback_query.from_user.id
    db_pool = dispatcher.workflow_data.get('db_pool_instance')
    bot = callback_query.bot

    logger.info(f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É {new_level} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_manage}.")

    if not db_pool:
        logger.error("db_pool_instance –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ workflow_data –¥–ª—è set_new_access_level!")
        await callback_query.answer("–í–∏–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    try:
        async with db_pool.acquire() as conn:
            await conn.execute(
                "UPDATE users SET access_level = $1 WHERE id = $2",
                new_level,
                user_id_to_manage
            )
        await callback_query.answer(f"–†—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_manage} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {new_level}.", show_alert=True)
        logger.info(f"–†—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_manage} –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {new_level} –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_id}.")

        user_info = await get_user(db_pool, user_id_to_manage)
        if not user_info:
            logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_manage} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É. –ù–µ–º–æ–∂–ª–∏–≤–æ –æ–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å.")
            return

        is_authorized = user_info.get('is_authorized', False)
        access_level = user_info.get('access_level', 0)

        access_level_display_name = "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä—ñ–≤–µ–Ω—å"
        for level, name in ACCESS_LEVEL_BUTTONS:
            if level == access_level:
                access_level_display_name = name
                break

        status_text = "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π ‚úÖ" if is_authorized else "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π ‚ùå"

        # !!! –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è 'registered_at' –¥–ª—è –¥–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó !!!
        registered_at_dt = user_info.get('registered_at', datetime.now(timezone.utc))
        last_activity_dt = user_info.get('last_activity', datetime.now(timezone.utc))

        registered_at_str = registered_at_dt.strftime('%d.%m.%Y / %H:%M')
        last_activity_str = last_activity_dt.strftime('%d.%m.%Y / %H:%M')

        response_text = (
            f"<b>üßæ ID-–∫–ª—é—á:</b> <code>{user_id_to_manage}</code>\n"
            f"<b>üßë‚ÄçüöÄ –ê–≥–µ–Ω—Ç:</b> {user_info.get('first_name', '')} {user_info.get('last_name', '')}\n"
            f"<b>üí¨ –ü–æ–∑–∏–≤–Ω–∏–π:</b> @{user_info.get('username', 'N/A')}\n"
            f"<b>üõ°Ô∏è –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–æ—Å—Ç—É–ø—É:</b> {access_level_display_name}\n"
            f"<b>üì∂ –°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
            f"<b>üì• –ó–∞–Ω–µ—Å–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É:</b> {registered_at_str}\n"
            f"<b>üìà –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b> {last_activity_str}\n"
            f"‚ò∞‚ò±‚ò≤‚ò≥‚ò¥‚òµ‚ò∂‚ò∑‚ò∞‚ò±‚ò≤‚ò≥‚ò¥‚òµ‚ò∂‚ò∑‚ò∞‚ò±‚ò≤‚ò≥\n"
            f"<b>üì° –ö–æ–º–∞–Ω–¥–Ω–∏–π —Ü–µ–Ω—Ç—Ä –∞–∫—Ç–∏–≤–Ω–∏–π. –û—á—ñ–∫—É—î—Ç—å—Å—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è‚Ä¶</b>"
        )

        reply_markup = get_user_actions_keyboard(is_authorized, access_level, user_id_to_manage)

        try:
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=response_text,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            logger.info(f"–û–Ω–æ–≤–ª–µ–Ω–æ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_manage} –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ —Ä—ñ–≤–Ω—è.")
        except Exception as edit_e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user_id_to_manage} –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ —Ä—ñ–≤–Ω—è: {edit_e}", exc_info=True)
            await bot.send_message(
                chat_id=callback_query.message.chat.id,
                text=response_text,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            logger.warning(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–º—ñ—Å—Ç—å —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_manage} –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ —Ä—ñ–≤–Ω—è.")

    except Exception as e:
        logger.error(f"–ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ set_new_access_level –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_manage}: {e}", exc_info=True)
        await callback_query.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É.", show_alert=True)
        user_info = await get_user(db_pool, user_id_to_manage)
        if user_info:
            is_authorized = user_info.get('is_authorized', False)
            access_level = user_info.get('access_level', 0)

            access_level_display_name = "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä—ñ–≤–µ–Ω—å"
            for level, name in ACCESS_LEVEL_BUTTONS:
                if level == access_level:
                    access_level_display_name = name
                    break

            status_text = "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π ‚úÖ" if is_authorized else "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π ‚ùå"

            # !!! –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è 'registered_at' –¥–ª—è –¥–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó !!!
            registered_at_dt = user_info.get('registered_at', datetime.now(timezone.utc))
            last_activity_dt = user_info.get('last_activity', datetime.now(timezone.utc))

            registered_at_str = registered_at_dt.strftime('%d.%m.%Y / %H:%M')
            last_activity_str = last_activity_dt.strftime('%d.%m.%Y / %H:%M')

            response_text_error = (
                f"<b>üßæ ID-–∫–ª—é—á:</b> <code>{user_id_to_manage}</code>\n"
                f"<b>üßë‚ÄçüöÄ –ê–≥–µ–Ω—Ç:</b> {user_info.get('first_name', '')} {user_info.get('last_name', '')}\n"
                f"<b>üí¨ –ü–æ–∑–∏–≤–Ω–∏–π:</b> @{user_info.get('username', 'N/A')}\n"
                f"<b>üõ°Ô∏è –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–æ—Å—Ç—É–ø—É:</b> {access_level_display_name}\n"
                f"<b>üì∂ –°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
                f"<b>üì• –ó–∞–Ω–µ—Å–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É:</b> {registered_at_str}\n"
                f"<b>üìà –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b> {last_activity_str}\n"
                f"‚ò∞‚ò±‚ò≤‚ò≥‚ò¥‚òµ‚ò∂‚ò∑‚ò∞‚ò±‚ò≤‚ò≥‚ò¥‚òµ‚ò∂‚ò∑‚ò∞‚ò±‚ò≤‚ò≥\n"
                f"<b>üì° –ö–æ–º–∞–Ω–¥–Ω–∏–π —Ü–µ–Ω—Ç—Ä –∞–∫—Ç–∏–≤–Ω–∏–π. –û—á—ñ–∫—É—î—Ç—å—Å—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è‚Ä¶</b>"
            )
            reply_markup_error = get_user_actions_keyboard(is_authorized, access_level, user_id_to_manage)
            try:
                await bot.edit_message_text(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    text=response_text_error,
                    parse_mode='HTML',
                    reply_markup=reply_markup_error
                )
            except Exception as final_e:
                logger.error(f"–§–Ü–ù–ê–õ–¨–ù–ê –ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏/–≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏ –∑–º—ñ–Ω–∏ —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–ª—è {user_id_to_manage}: {final_e}", exc_info=True)

# !!! –î–û–î–ê–ù–û –ù–û–í–ò–ô –û–ë–†–û–ë–ù–ò–ö –î–õ–Ø –ê–í–¢–û–†–ò–ó–ê–¶–Ü–á/–î–ï–ê–í–¢–û–†–ò–ó–ê–¶–Ü–á !!!
@router.callback_query(F.data.startswith(("unauthorize_user_", "authorize_user_")))
async def toggle_user_authorization(callback_query: types.CallbackQuery, dispatcher: Dispatcher) -> None:
    parts = callback_query.data.split('_')

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥—ñ—é —Ç–∞ user_id_to_manage –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø—Ä–µ—Ñ—ñ–∫—Å—É
    if parts[0] == "unauthorize":
        action = "deauthorize"
        user_id_to_manage = int(parts[2])
    elif parts[0] == "authorize":
        action = "authorize"
        user_id_to_manage = int(parts[2])
    else:
        logger.error(f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è toggle_user_authorization: {callback_query.data}")
        await callback_query.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è.", show_alert=True)
        return

    admin_id = callback_query.from_user.id
    db_pool = dispatcher.workflow_data.get('db_pool_instance')
    bot = callback_query.bot

    logger.info(f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è {action} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_manage}.")

    if not db_pool:
        logger.error("db_pool_instance –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ workflow_data –¥–ª—è toggle_user_authorization!")
        await callback_query.answer("–í–∏–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    is_authorized_status = True if action == "authorize" else False

    try:
        await update_user_authorization_status(db_pool, user_id_to_manage, is_authorized_status)

        status_message = "–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" if is_authorized_status else "–¥–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ"
        await callback_query.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_manage} —É—Å–ø—ñ—à–Ω–æ {status_message}.", show_alert=True)
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_manage} —É—Å–ø—ñ—à–Ω–æ {status_message} –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_id}.")

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É
        user_info = await get_user(db_pool, user_id_to_manage)
        if not user_info:
            logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_manage} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –ù–µ–º–æ–∂–ª–∏–≤–æ –æ–Ω–æ–≤–∏—Ç–∏ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å.")
            return

        is_authorized = user_info.get('is_authorized', False)
        access_level = user_info.get('access_level', 0)

        access_level_display_name = "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä—ñ–≤–µ–Ω—å"
        for level, name in ACCESS_LEVEL_BUTTONS:
            if level == access_level:
                access_level_display_name = name
                break

        status_text = "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π ‚úÖ" if is_authorized else "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π ‚ùå"

        # !!! –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è 'registered_at' –¥–ª—è –¥–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó !!!
        registered_at_dt = user_info.get('registered_at', datetime.now(timezone.utc))
        last_activity_dt = user_info.get('last_activity', datetime.now(timezone.utc))

        registered_at_str = registered_at_dt.strftime('%d.%m.%Y / %H:%M')
        last_activity_str = last_activity_dt.strftime('%d.%m.%Y / %H:%M')

        response_text = (
            f"<b>üßæ ID-–∫–ª—é—á:</b> <code>{user_id_to_manage}</code>\n"
            f"<b>üßë‚ÄçüöÄ –ê–≥–µ–Ω—Ç:</b> {user_info.get('first_name', '')} {user_info.get('last_name', '')}\n"
            f"<b>üí¨ –ü–æ–∑–∏–≤–Ω–∏–π:</b> @{user_info.get('username', 'N/A')}\n"
            f"<b>üõ°Ô∏è –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–æ—Å—Ç—É–ø—É:</b> {access_level_display_name}\n"
            f"<b>üì∂ –°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
            f"<b>üì• –ó–∞–Ω–µ—Å–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É:</b> {registered_at_str}\n"
            f"<b>üìà –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b> {last_activity_str}\n"
            f"‚ò∞‚ò±‚ò≤‚ò≥‚ò¥‚òµ‚ò∂‚ò∑‚ò∞‚ò±‚ò≤‚ò≥‚ò¥‚òµ‚ò∂‚ò∑‚ò∞‚ò±‚ò≤‚ò≥\n"
            f"<b>üì° –ö–æ–º–∞–Ω–¥–Ω–∏–π —Ü–µ–Ω—Ç—Ä –∞–∫—Ç–∏–≤–Ω–∏–π. –û—á—ñ–∫—É—î—Ç—å—Å—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è‚Ä¶</b>"
        )
        reply_markup = get_user_actions_keyboard(is_authorized, access_level, user_id_to_manage)

        try:
            await bot.edit_message_text(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                text=response_text,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            logger.info(f"–û–Ω–æ–≤–ª–µ–Ω–æ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_manage} –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.")
        except Exception as edit_e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º {user_id_to_manage} –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó: {edit_e}", exc_info=True)
            await bot.send_message(
                chat_id=callback_query.message.chat.id,
                text=response_text,
                parse_mode='HTML',
                reply_markup=reply_markup
            )
            logger.warning(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–∞–º—ñ—Å—Ç—å —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_manage} –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id_to_manage}: {e}", exc_info=True)
        await callback_query.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Å—Ç–∞—Ç—É—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó.", show_alert=True)
        user_info = await get_user(db_pool, user_id_to_manage)
        if user_info:
            is_authorized = user_info.get('is_authorized', False)
            access_level = user_info.get('access_level', 0)
            access_level_display_name = "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä—ñ–≤–µ–Ω—å"
            for level, name in ACCESS_LEVEL_BUTTONS:
                if level == access_level:
                    access_level_display_name = name
                    break
            status_text = "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π ‚úÖ" if is_authorized else "–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π ‚ùå"

            # !!! –í–ò–ü–†–ê–í–õ–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è 'registered_at' –¥–ª—è –¥–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó !!!
            registered_at_dt = user_info.get('registered_at', datetime.now(timezone.utc))
            last_activity_dt = user_info.get('last_activity', datetime.now(timezone.utc))

            registered_at_str = registered_at_dt.strftime('%d.%m.%Y / %H:%M')
            last_activity_str = last_activity_dt.strftime('%d.%m.%Y / %H:%M')

            response_text_error = (
                f"<b>üßæ ID-–∫–ª—é—á:</b> <code>{user_id_to_manage}</code>\n"
                f"<b>üßë‚ÄçüöÄ –ê–≥–µ–Ω—Ç:</b> {user_info.get('first_name', '')} {user_info.get('last_name', '')}\n"
                f"<b>üí¨ –ü–æ–∑–∏–≤–Ω–∏–π:</b> @{user_info.get('username', 'N/A')}\n"
                f"<b>üõ°Ô∏è –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–æ—Å—Ç—É–ø—É:</b> {access_level_display_name}\n"
                f"<b>üì∂ –°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
                f"<b>üì• –ó–∞–Ω–µ—Å–µ–Ω–æ –≤ —Å–∏—Å—Ç–µ–º—É:</b> {registered_at_str}\n"
                f"<b>üìà –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b> {last_activity_str}\n"
                f"‚ò∞‚ò±‚ò≤‚ò≥‚ò¥‚òµ‚ò∂‚ò∑‚ò∞‚ò±‚ò≤‚ò≥‚ò¥‚òµ‚ò∂‚ò∑‚ò∞‚ò±‚ò≤‚ò≥\n"
                f"<b>üì° –ö–æ–º–∞–Ω–¥–Ω–∏–π —Ü–µ–Ω—Ç—Ä –∞–∫—Ç–∏–≤–Ω–∏–π. –û—á—ñ–∫—É—î—Ç—å—Å—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è‚Ä¶</b>"
            )
            reply_markup_error = get_user_actions_keyboard(is_authorized, access_level, user_id_to_manage)
            try:
                await bot.edit_message_text(
                    chat_id=callback_query.message.chat.id,
                    message_id=callback_query.message.message_id,
                    text=response_text_error,
                    parse_mode='HTML',
                    reply_markup=reply_markup_error
                )
            except Exception as final_e:
                logger.error(f"–§–Ü–ù–ê–õ–¨–ù–ê –ü–û–ú–ò–õ–ö–ê: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏/–≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏ –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–ª—è {user_id_to_manage}: {final_e}", exc_info=True)


@router.callback_query(F.data == "close_admin_panel")
async def close_admin_panel(callback_query: types.CallbackQuery, dispatcher: Dispatcher) -> None:
    user_id = callback_query.from_user.id
    db_pool = dispatcher.workflow_data.get('db_pool_instance')
    bot = callback_query.bot

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–∫—Ä–∏–≤–∞—î –ø–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

    if not db_pool:
        logger.error("db_pool_instance –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ workflow_data –¥–ª—è close_admin_panel!")
        await callback_query.answer("–í–∏–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    access_level = await get_user_access_level(db_pool, user_id)

    try:
        await bot.delete_message(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id
        )
        logger.info(f"–í–∏–¥–∞–ª–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª–ª—é –¥–ª—è {user_id}.")

        # –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
        return_message = random.choice(ADMIN_RETURN_MESSAGES)

        await bot.send_message(
            chat_id=callback_query.message.chat.id,
            text=return_message, # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–∞–Ω–¥–æ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            parse_mode='HTML',
            reply_markup=await get_main_menu_keyboard(access_level, user_list_pages.get(user_id, 0))
        )
        logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –¥–ª—è {user_id} –ø—ñ—Å–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.")

    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}: {e}", exc_info=True)
        await bot.send_message(
            chat_id=callback_query.message.chat.id,
            text="–í–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –ø–∞–Ω–µ–ª—ñ. –ü–æ–≤–µ—Ä–Ω—É—Ç–æ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", # –°—Ç–∞—Ç–∏—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
            reply_markup=await get_main_menu_keyboard(access_level, user_list_pages.get(user_id, 0))
        )
    await callback_query.answer()