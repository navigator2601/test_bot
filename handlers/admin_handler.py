# handlers/admin_handler.py

import logging
from aiogram import Router, types, Bot, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
import asyncpg
from typing import Any, Optional

from database import users_db
from keyboards.admin_keyboard import (
    get_admin_main_keyboard,
    get_users_list_keyboard,
    get_user_actions_keyboard,
    get_confirm_action_keyboard,
    get_access_level_keyboard,
    get_telethon_actions_keyboard
)
from keyboards.reply_keyboard import get_main_menu_keyboard
from common.messages import get_access_level_description, get_random_admin_welcome_message
from common.constants import ACCESS_LEVEL_BUTTONS, BUTTONS_PER_PAGE
from keyboards.callback_factories import AdminCallback, UserActionCallback, AccessLevelCallback
from handlers.menu_handler import MenuStates

logger = logging.getLogger(__name__)

router = Router()

class AdminStates(StatesGroup):
    admin_main = State()
    user_management = State()
    confirm_action = State()
    set_access_level = State()
    telethon_management = State()
    waiting_for_telethon_input = State()

# ----------------------------------------------------------------------
# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
# ----------------------------------------------------------------------

async def _send_admin_welcome_message(message: types.Message, state: FSMContext) -> None:
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –≤–∏–ø–∞–¥–∫–æ–≤–µ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É."""
    welcome_admin_text = get_random_admin_welcome_message()
    await state.set_state(AdminStates.admin_main)
    await message.answer(
        welcome_admin_text,
        reply_markup=get_admin_main_keyboard(),
        parse_mode=ParseMode.HTML
    )

async def _get_user_info_text(db_pool: asyncpg.Pool, user_id: int) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è."""
    user = await users_db.get_user(db_pool, user_id)
    if not user:
        return "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

    access_level_name, access_level_desc = get_access_level_description(user['access_level'])
    auth_status = "–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π ‚úÖ" if user['is_authorized'] else "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π ‚ùå"
    registered_at_local = user['registered_at'].strftime("%Y-%m-%d %H:%M:%S") if user['registered_at'] else "–ù–µ–≤—ñ–¥–æ–º–æ"
    last_activity_local = user['last_activity'].strftime("%Y-%m-%d %H:%M:%S") if user['last_activity'] else "–ù–µ–≤—ñ–¥–æ–º–æ"

    user_info_text = (
        f"<b>‚öôÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:</b>\n\n"
        f"  <b>ID:</b> <code>{user['id']}</code>\n"
        f"  <b>Username:</b> @{user['username'] if user['username'] else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
        f"  <b>–Ü–º'—è:</b> {user['first_name'] if user['first_name'] else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
        f"  <b>–ü—Ä—ñ–∑–≤–∏—â–µ:</b> {user['last_name'] if user['last_name'] else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
        f"  <b>–†—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É:</b> {user['access_level']} (<i>{access_level_name}</i>)\n"
        f"  <b>–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:</b> {auth_status}\n"
        f"  <b>–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π:</b> {registered_at_local}\n"
        f"  <b>–û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:</b> {last_activity_local}\n\n"
        f"<i>{access_level_desc}</i>"
    )
    return user_info_text

# ----------------------------------------------------------------------
# –•–µ–Ω–¥–ª–µ—Ä–∏ –¥–ª—è –≥–æ–ª–æ–≤–Ω–æ–≥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é
# ----------------------------------------------------------------------

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é –∑ –±—É–¥—å-—è–∫–æ–≥–æ –ø—ñ–¥–º–µ–Ω—é (–∑–∞–≥–∞–ª—å–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥")
@router.callback_query(
    AdminCallback.filter(F.action == "cancel_admin_action"),
    StateFilter(AdminStates.user_management, AdminStates.telethon_management, AdminStates.set_access_level, AdminStates.confirm_action, AdminStates.waiting_for_telethon_input)
)
async def cancel_admin_action(
    callback: types.CallbackQuery,
    state: FSMContext
) -> None:
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} —Å–∫–∞—Å—É–≤–∞–≤ –∞–¥–º—ñ–Ω-–¥—ñ—é —ñ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é.")
    await state.set_state(AdminStates.admin_main)
    await state.update_data(pending_action=None, selected_user_id=None, temp_access_level=None, telethon_auth_step=None, telethon_phone_number=None) # –û—á–∏—â–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ
    await callback.message.edit_text(
        "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ—ó –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.",
        reply_markup=get_admin_main_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ
@router.callback_query(
    AdminCallback.filter(F.action == "close_admin_panel"),
    StateFilter(AdminStates)
)
async def close_admin_panel(
    callback: types.CallbackQuery,
    db_pool: asyncpg.Pool,
    state: FSMContext
) -> None:
    user_id = callback.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–∫—Ä–∏–≤–∞—î –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å.")
    await state.clear()
    await state.set_state(MenuStates.main_menu)

    access_level = await users_db.get_user_access_level(db_pool, user_id)
    if access_level is None:
        access_level = 0

    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —ñ–Ω–ª–∞–π–Ω-–∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ: {e}")
        pass

    await callback.message.answer(
        "–í–∏ –≤–∏–π—à–ª–∏ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ. –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
        reply_markup=await get_main_menu_keyboard(access_level, 0),
        parse_mode=ParseMode.HTML
    )
    await callback.answer("–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä–∏—Ç–æ.")
    logger.info(f"–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä–∏—Ç–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}.")

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üë• –Æ–∑–µ—Ä-–º–∞—Ç—Ä–∏—Ü—è ¬∑ –†–µ–¥–∞–∫—Ç–æ—Ä –¥–æ—Å—Ç—É–ø—É"
@router.callback_query(
    AdminCallback.filter(F.action == "show_users"),
    StateFilter(AdminStates.admin_main, AdminStates.user_management)
)
async def show_users_list(
    callback: types.CallbackQuery,
    callback_data: AdminCallback,
    db_pool: asyncpg.Pool,
    state: FSMContext
) -> None:
    user_id = callback.from_user.id
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ '–Æ–∑–µ—Ä-–º–∞—Ç—Ä–∏—Ü—è'.")
    await state.set_state(AdminStates.user_management)

    users = await users_db.get_all_users(db_pool)
    users.sort(key=lambda u: u.get('registered_at', u.get('id')), reverse=True)

    current_page = callback_data.page if callback_data.page is not None else 0
    users_per_page = BUTTONS_PER_PAGE

    keyboard = get_users_list_keyboard(users, current_page, users_per_page)
    await callback.message.edit_text(
        "<b>üë• –Æ–∑–µ—Ä-–º–∞—Ç—Ä–∏—Ü—è:</b>\n–û–±–µ—Ä—ñ—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∏.",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–∏–±–æ—Ä—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑—ñ —Å–ø–∏—Å–∫—É
@router.callback_query(
    AdminCallback.filter(F.action == "select_user"),
    StateFilter(AdminStates.user_management, AdminStates.set_access_level)
)
async def select_user_from_list(
    callback: types.CallbackQuery,
    callback_data: AdminCallback,
    db_pool: asyncpg.Pool,
    state: FSMContext
) -> None:
    selected_user_id = callback_data.user_id
    if selected_user_id is None:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.", show_alert=True)
        return

    logger.info(f"–ê–¥–º—ñ–Ω {callback.from_user.id} –æ–±—Ä–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {selected_user_id} –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è.")
    await state.set_state(AdminStates.user_management)

    await state.update_data(selected_user_id=selected_user_id)

    user_info_text = await _get_user_info_text(db_pool, selected_user_id)
    user_data = await users_db.get_user(db_pool, selected_user_id)
    if not user_data:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.", show_alert=True)
        return

    keyboard = get_user_actions_keyboard(
        is_authorized=user_data['is_authorized'],
        current_access_level=user_data['access_level'],
        user_id_to_manage=selected_user_id
    )
    await callback.message.edit_text(
        user_info_text,
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

# ----------------------------------------------------------------------
# –•–µ–Ω–¥–ª–µ—Ä–∏ –¥–ª—è –¥—ñ–π –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è/–¥–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è)
# ----------------------------------------------------------------------

@router.callback_query(
    UserActionCallback.filter(F.action.in_({"authorize", "unauthorize"})),
    StateFilter(AdminStates.user_management)
)
async def request_authorization_confirm(
    callback: types.CallbackQuery,
    callback_data: UserActionCallback,
    state: FSMContext
) -> None:
    selected_user_id = callback_data.user_id
    action_type = callback_data.action

    logger.info(f"–ê–¥–º—ñ–Ω {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–≤ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –¥–ª—è {action_type} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {selected_user_id}.")

    await state.set_state(AdminStates.confirm_action)
    await state.update_data(
        selected_user_id=selected_user_id,
        pending_action=action_type
    )

    action_text = "–∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏" if action_type == "authorize" else "–¥–µ–∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏"
    question_text = f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ <b>{action_text}</b> –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{selected_user_id}</code>?"
    keyboard = get_confirm_action_keyboard(action=action_type, user_id=selected_user_id)

    await callback.message.edit_text(
        question_text,
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

@router.callback_query(
    UserActionCallback.filter(F.action.in_({"confirm_authorize", "confirm_unauthorize"})),
    StateFilter(AdminStates.confirm_action)
)
async def confirm_authorization_action(
    callback: types.CallbackQuery,
    callback_data: UserActionCallback,
    db_pool: asyncpg.Pool,
    state: FSMContext
) -> None:
    state_data = await state.get_data()
    selected_user_id = state_data.get("selected_user_id")
    pending_action = state_data.get("pending_action")

    if not selected_user_id or not pending_action:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–∏—Ö –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.", show_alert=True)
        await state.set_state(AdminStates.admin_main)
        await callback.message.edit_text(
            "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ—ó –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.",
            reply_markup=get_admin_main_keyboard(),
            parse_mode=ParseMode.HTML
        )
        return

    is_authorized = (pending_action == "authorize")
    await users_db.update_user_authorization_status(db_pool, selected_user_id, is_authorized)

    status_text = "–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ" if is_authorized else "–¥–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ"
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {selected_user_id} –±—É–ª–æ {status_text} –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {callback.from_user.id}.")

    await state.set_state(AdminStates.user_management)
    await state.update_data(pending_action=None)

    user_info_text = await _get_user_info_text(db_pool, selected_user_id)
    user_data = await users_db.get_user(db_pool, selected_user_id)
    keyboard = get_user_actions_keyboard(
        is_authorized=user_data['is_authorized'],
        current_access_level=user_data['access_level'],
        user_id_to_manage=selected_user_id
    )

    await callback.message.edit_text(
        f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{selected_user_id}</code> —É—Å–ø—ñ—à–Ω–æ <b>{status_text}</b>.\n\n{user_info_text}",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {selected_user_id} —É—Å–ø—ñ—à–Ω–æ {status_text}.")

@router.callback_query(
    AdminCallback.filter(F.action == "cancel_action"),
    StateFilter(AdminStates.confirm_action)
)
async def cancel_pending_action(
    callback: types.CallbackQuery,
    state: FSMContext,
    db_pool: asyncpg.Pool
) -> None:
    state_data = await state.get_data()
    selected_user_id = state_data.get("selected_user_id")

    logger.info(f"–ê–¥–º—ñ–Ω {callback.from_user.id} —Å–∫–∞—Å—É–≤–∞–≤ –æ—á—ñ–∫—É–≤–∞–Ω—É –¥—ñ—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {selected_user_id}.")
    await state.set_state(AdminStates.user_management)
    await state.update_data(pending_action=None)

    if selected_user_id:
        user_info_text = await _get_user_info_text(db_pool, selected_user_id)
        user_data = await users_db.get_user(db_pool, selected_user_id)
        keyboard = get_user_actions_keyboard(
            is_authorized=user_data['is_authorized'],
            current_access_level=user_data['access_level'],
            user_id_to_manage=selected_user_id
        )
        await callback.message.edit_text(
            f"–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º <code>{selected_user_id}</code>.\n\n{user_info_text}",
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML
        )
    else:
        await callback.message.edit_text(
            "–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ—ó –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.",
            reply_markup=get_admin_main_keyboard(),
            parse_mode=ParseMode.HTML
        )
        await state.set_state(AdminStates.admin_main)
    await callback.answer("–î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")

# ----------------------------------------------------------------------
# –•–µ–Ω–¥–ª–µ—Ä–∏ –¥–ª—è –∑–º—ñ–Ω–∏ —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É
# ----------------------------------------------------------------------

@router.callback_query(
    AdminCallback.filter(F.action == "change_access_level"),
    StateFilter(AdminStates.user_management)
)
async def request_change_access_level(
    callback: types.CallbackQuery,
    callback_data: AdminCallback,
    state: FSMContext
) -> None:
    selected_user_id = callback_data.user_id
    if selected_user_id is None:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.", show_alert=True)
        return

    logger.info(f"–ê–¥–º—ñ–Ω {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–≤ –∑–º—ñ–Ω—É —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {selected_user_id}.")
    await state.set_state(AdminStates.set_access_level)
    await state.update_data(selected_user_id=selected_user_id)

    keyboard = get_access_level_keyboard(selected_user_id)
    await callback.message.edit_text(
        f"–û–±–µ—Ä—ñ—Ç—å –Ω–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{selected_user_id}</code>:",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

@router.callback_query(
    AccessLevelCallback.filter(),
    StateFilter(AdminStates.set_access_level)
)
async def confirm_set_access_level(
    callback: types.CallbackQuery,
    callback_data: AccessLevelCallback,
    state: FSMContext,
    db_pool: asyncpg.Pool
) -> None:
    selected_user_id = callback_data.user_id
    new_access_level = callback_data.level

    if selected_user_id is None or new_access_level is None:
        await callback.answer("–ü–æ–º–∏–ª–∫–∞: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–∏—Ö –¥–ª—è –∑–º—ñ–Ω–∏ —Ä—ñ–≤–Ω—è –¥–æ—Å—Ç—É–ø—É.", show_alert=True)
        return

    logger.info(f"–ê–¥–º—ñ–Ω {callback.from_user.id} –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É {new_access_level} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {selected_user_id}.")

    await users_db.update_user_access_level(db_pool, selected_user_id, new_access_level)

    await state.set_state(AdminStates.user_management)
    await state.update_data(temp_access_level=None)

    user_info_text = await _get_user_info_text(db_pool, selected_user_id)
    user_data = await users_db.get_user(db_pool, selected_user_id)
    keyboard = get_user_actions_keyboard(
        is_authorized=user_data['is_authorized'],
        current_access_level=user_data['access_level'],
        user_id_to_manage=selected_user_id
    )

    await callback.message.edit_text(
        f"–†—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ <code>{selected_user_id}</code> —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ <b>{new_access_level}</b>.\n\n{user_info_text}",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer(f"–†—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {new_access_level}.")

# ----------------------------------------------------------------------
# –•–µ–Ω–¥–ª–µ—Ä–∏ –¥–ª—è Telethon (–ø–æ–∫–∏ –∑–∞–≥–ª—É—à–∫–∏)
# ----------------------------------------------------------------------

@router.callback_query(
    AdminCallback.filter(F.action == "telethon_auth"),
    StateFilter(AdminStates.admin_main, AdminStates.telethon_management)
)
async def process_telethon_auth(
    callback: types.CallbackQuery,
    state: FSMContext
) -> None:
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} –Ω–∞—Ç–∏—Å–Ω—É–≤ 'TeleKey ¬∑ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è API-–∑–≤‚Äô—è–∑–∫—É'.")
    await state.set_state(AdminStates.telethon_management)
    keyboard = get_telethon_actions_keyboard()
    await callback.message.edit_text(
        "<b>üîê TeleKey ¬∑ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è API-–∑–≤‚Äô—è–∑–∫—É:</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è Telethon API:",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

@router.callback_query(
    AdminCallback.filter(F.action == "telethon_check_status"),
    StateFilter(AdminStates.telethon_management)
)
async def telethon_check_status(
    callback: types.CallbackQuery,
    telethon_manager: Any,
    state: FSMContext
) -> None:
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} –ø–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç—É—Å Telethon.")
    if telethon_manager and telethon_manager.client and telethon_manager.client.is_connected():
        msg = "‚úÖ Telethon –∫–ª—ñ—î–Ω—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ."
    else:
        msg = "‚ùå Telethon –∫–ª—ñ—î–Ω—Ç –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ."

    await callback.answer(msg, show_alert=True)
    await state.set_state(AdminStates.telethon_management)

@router.callback_query(
    AdminCallback.filter(F.action == "telethon_start_auth"),
    StateFilter(AdminStates.telethon_management)
)
async def telethon_start_auth(
    callback: types.CallbackQuery,
    telethon_manager: Any,
    state: FSMContext
) -> None:
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} —ñ–Ω—ñ—Ü—ñ—é—î –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é Telethon.")

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–ª—ñ—î–Ω—Ç –≤–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π
    if telethon_manager and telethon_manager.client and telethon_manager.client.is_connected():
        await callback.answer("–ö–ª—ñ—î–Ω—Ç Telethon –≤–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ. –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏, —Å–ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–∫–ª—é—á—ñ—Ç—å.", show_alert=True)
        return

    await callback.answer("–ü–æ—á–∞—Ç–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó Telethon...", show_alert=True)

    await callback.message.edit_text(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó Telethon (—É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX):",
        reply_markup=get_telethon_actions_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_telethon_input)
    await state.update_data(telethon_auth_step="phone_number")


@router.message(StateFilter(AdminStates.waiting_for_telethon_input))
async def handle_telethon_input(message: types.Message, state: FSMContext, telethon_manager: Any):
    user_id = message.from_user.id
    state_data = await state.get_data()
    auth_step = state_data.get("telethon_auth_step")
    user_input = message.text

    if auth_step == "phone_number":
        phone_number = user_input
        if not phone_number or not phone_number.startswith('+') or not phone_number[1:].isdigit():
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX.")
            return

        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è Telethon –≤—ñ–¥ {user_id}: {phone_number}")
        # –¢—É—Ç –≤–∏–∫–ª–∏–∫ telethon_manager.send_code(phone_number)
        try:
            # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ telethon_manager –º–∞—î –º–µ—Ç–æ–¥ send_code
            await telethon_manager.send_code(phone_number)
            await message.answer(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –Ω–∞ –Ω–æ–º–µ—Ä {phone_number}. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ:")
            await state.update_data(telethon_auth_step="auth_code", telethon_phone_number=phone_number)
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∫–æ–¥—É Telethon –¥–ª—è {phone_number}: {e}")
            await message.answer(
                f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ–¥: {e}. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–æ–º–µ—Ä.",
                reply_markup=get_telethon_actions_keyboard()
            )
            await state.set_state(AdminStates.telethon_management) # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –¥–æ –º–µ–Ω—é Telethon


    elif auth_step == "auth_code":
        auth_code = user_input
        if not auth_code or not auth_code.isdigit():
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ü–∏—Ñ—Ä–æ–≤–∏–π –∫–æ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.")
            return

        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –¥–ª—è Telethon –≤—ñ–¥ {user_id}: {auth_code}")
        phone_number = state_data.get("telethon_phone_number")

        if not phone_number:
            await message.answer("–ü–æ–º–∏–ª–∫–∞: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –∑–Ω–æ–≤—É.")
            await state.set_state(AdminStates.telethon_management)
            return

        try:
            # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ telethon_manager –º–∞—î –º–µ—Ç–æ–¥ sign_in
            await telethon_manager.sign_in(phone_number, auth_code)
            auth_status_msg = "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Telethon —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
            logger.info(f"–ö–ª—ñ—î–Ω—Ç {phone_number} —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π —á–µ—Ä–µ–∑ Telethon.")
        except Exception as e:
            auth_status_msg = f"–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó Telethon: {e}. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó Telethon –¥–ª—è {phone_number}: {e}")

        await message.answer("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–¥—É...")
        await state.set_state(AdminStates.telethon_management)
        await state.update_data(telethon_auth_step=None, telethon_phone_number=None)
        await message.answer(
            auth_status_msg,
            reply_markup=get_telethon_actions_keyboard(),
            parse_mode=ParseMode.HTML
        )
    else:
        await message.answer("–ù–µ–≤—ñ–¥–æ–º–∏–π –∫—Ä–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")
        await state.set_state(AdminStates.telethon_management)

@router.callback_query(
    AdminCallback.filter(F.action == "telethon_get_user_info"),
    StateFilter(AdminStates.telethon_management)
)
async def telethon_get_user_info(
    callback: types.CallbackQuery,
    telethon_manager: Any,
    state: FSMContext
) -> None:
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–≤ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ Telethon –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.")

    if not telethon_manager or not telethon_manager.client or not telethon_manager.client.is_connected():
        await callback.answer("–ö–ª—ñ—î–Ω—Ç Telethon –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–ø–æ—á–∞—Ç–∫—É.", show_alert=True)
        return

    await callback.answer("–û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telethon...", show_alert=True)

    try:
        me = await telethon_manager.client.get_me()
        user_info_text = (
            f"<b>–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ Telethon –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:</b>\n"
            f"  <b>ID:</b> <code>{me.id}</code>\n"
            f"  <b>–Ü–º'—è:</b> {me.first_name if me.first_name else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"  <b>–ü—Ä—ñ–∑–≤–∏—â–µ:</b> {me.last_name if me.last_name else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"  <b>Username:</b> @{me.username if me.username else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
            f"  <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {me.phone if me.phone else '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n"
        )
    except Exception as e:
        user_info_text = f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telethon: {e}"
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telethon: {e}")

    await callback.message.edit_text(
        user_info_text,
        reply_markup=get_telethon_actions_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await state.set_state(AdminStates.telethon_management)
    await callback.answer()

@router.callback_query(
    AdminCallback.filter(F.action == "telethon_join_channel"),
    StateFilter(AdminStates.telethon_management)
)
async def telethon_join_channel(
    callback: types.CallbackQuery,
    telethon_manager: Any,
    state: FSMContext
) -> None:
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–≤ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è Telethon –¥–æ –∫–∞–Ω–∞–ª—É.")

    if not telethon_manager or not telethon_manager.client or not telethon_manager.client.is_connected():
        await callback.answer("–ö–ª—ñ—î–Ω—Ç Telethon –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–ø–æ—á–∞—Ç–∫—É.", show_alert=True)
        return

    await callback.answer("–ü—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∫–∞–Ω–∞–ª—É Telethon...", show_alert=True)
    await callback.message.edit_text(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∞–±–æ username –∫–∞–Ω–∞–ª—É/—á–∞—Ç—É, –¥–æ —è–∫–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è:",
        reply_markup=get_telethon_actions_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await state.set_state(AdminStates.waiting_for_telethon_input)
    await state.update_data(telethon_auth_step="join_channel")

@router.callback_query(
    AdminCallback.filter(F.action == "connection_status"),
    StateFilter(AdminStates.admin_main, AdminStates.telethon_management)
)
async def telethon_connection_status(
    callback: types.CallbackQuery,
    telethon_manager: Any
) -> None:
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {callback.from_user.id} –ø–µ—Ä–µ–≤—ñ—Ä—è—î —Å—Ç–∞—Ç—É—Å –∑'—î–¥–Ω–∞–Ω–Ω—è.")
    if telethon_manager and telethon_manager.client and telethon_manager.client.is_connected():
        status_message = "‚úÖ Telethon API: –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ"
    else:
        status_message = "‚ùå Telethon API: –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ"
    await callback.answer(status_message, show_alert=True)