# handlers/admin_handler.py

import logging
from aiogram import Router, types, Bot, F
from aiogram.filters import StateFilter  # –î–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –¥–µ–∫—ñ–ª—å–∫–æ—Ö —Å—Ç–∞–Ω—ñ–≤ FSMContext —É aiogram 3.x
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode
import asyncpg
from typing import Any, Optional

from database import users_db
from keyboards.admin_keyboard import (
    get_admin_main_keyboard,
    get_users_list_keyboard,
    get_user_actions_keyboard,
    get_confirm_action_keyboard,
    get_access_level_keyboard,
    get_telethon_actions_keyboard
)
from keyboards.reply_keyboard import get_main_menu_keyboard
from common.messages import get_access_level_description, get_random_admin_welcome_message
from common.constants import ACCESS_LEVEL_BUTTONS, BUTTONS_PER_PAGE
from keyboards.callback_factories import AdminCallback, UserActionCallback, AccessLevelCallback  # <--- –Ü–ú–ü–û–†–¢ callback-—Ñ–∞–±—Ä–∏–∫

router = Router()  # router –º–∞—î –±—É—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–æ –î–û –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —É –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞—Ö

class AdminStates(StatesGroup):
    admin_main = State()
    user_management = State()
    confirm_action = State()
    set_access_level = State()
    telethon_management = State()

# ...–∑–∞–ª–∏—à–∞—î—à —ñ–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –±–µ–∑ –∑–º—ñ–Ω...

# –£–í–ê–ì–ê! –î–µ–∫–æ—Ä–∞—Ç–æ—Ä–∏ –Ω–∏–∂—á–µ –ù–ï –º–∞—é—Ç—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä | –¥–ª—è State!
# –ó–∞–º—ñ—Å—Ç—å —Ü—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ StateFilter

@router.callback_query(
    AdminCallback.filter(F.action == "telethon_auth"),
    StateFilter(AdminStates.admin_main, AdminStates.telethon_management)
)
async def process_telethon_auth(
    callback: types.CallbackQuery,
    db_pool: asyncpg.Pool,
    state: FSMContext
) -> None:
    user_id = callback.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ 'TeleKey ¬∑ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è API-–∑–≤‚Äô—è–∑–∫—É'.")
    await state.set_state(AdminStates.telethon_management)
    keyboard = get_telethon_actions_keyboard()
    await callback.message.edit_text(
        "<b>üîê TeleKey ¬∑ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è API-–∑–≤‚Äô—è–∑–∫—É:</b>\n\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è Telethon API:",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

@router.callback_query(
    F.data == "cancel_admin_action",
    StateFilter(AdminStates.user_management, AdminStates.telethon_management, AdminStates.set_access_level)
)
async def cancel_admin_action(
    callback: types.CallbackQuery,
    db_pool: asyncpg.Pool,
    state: FSMContext,
    bot: Bot
) -> None:
    user_id = callback.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Å–∫–∞—Å—É–≤–∞–≤ –∞–¥–º—ñ–Ω-–¥—ñ—é —ñ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –∞–¥–º—ñ–Ω-–º–µ–Ω—é.")
    await state.set_state(AdminStates.admin_main)
    await state.update_data(pending_action=None, selected_user_id=None)
    await callback.message.edit_text(
        "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ—ó –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ.",
        reply_markup=get_admin_main_keyboard(),
        parse_mode=ParseMode.HTML
    )
    await callback.answer()

@router.callback_query(
    F.data == "close_admin_panel",
    StateFilter(AdminStates)  # <--- –û–ù–û–í–õ–ï–ù–û: —Ä–µ–∞–≥—É—î –Ω–∞ –±—É–¥—å-—è–∫–∏–π –ø—ñ–¥—Å—Ç–∞–Ω AdminStates
)
async def close_admin_panel(
    callback: types.CallbackQuery,
    db_pool: asyncpg.Pool,
    state: FSMContext
) -> None:
    user_id = callback.from_user.id
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–∫—Ä–∏–≤–∞—î –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å.")
    await state.clear()
    await state.set_state(MenuStates.main_menu)
    access_level = await users_db.get_user_access_level(db_pool, user_id)
    if access_level is None:
        access_level = 0

    try:
        await callback.message.edit_text(
            callback.message.text,
            reply_markup=None
        )
    except Exception:
        pass

    await callback.message.answer(
        "–í–∏ –≤–∏–π—à–ª–∏ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ. –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.",
        reply_markup=await get_main_menu_keyboard(access_level, 0),
        parse_mode=ParseMode.HTML
    )
    await callback.answer("–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä–∏—Ç–æ.")
    logging.info(f"–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä–∏—Ç–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}.")

# ...—ñ —Ç–∞–∫ –¥–∞–ª—ñ –¥–ª—è —ñ–Ω—à–∏—Ö —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤...

# –ö–û–ú–ï–ù–¢–ê–†:
# 1. router = Router() –º–∞—î –±—É—Ç–∏ –¥–æ –≤—Å—ñ—Ö –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ñ–≤.
# 2. –î–ª—è –¥–µ–∫—ñ–ª—å–∫–æ—Ö —Å—Ç–∞–Ω—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ª–∏—à–µ StateFilter.
# 3. –¢–≤–æ—è –ª–æ–≥—ñ–∫–∞ –π —Ä–µ—à—Ç–∞ –∫–æ–¥—É –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –Ω–µ–∑–º—ñ–Ω–Ω–∏–º–∏, –ª–∏—à–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Ä—è–¥–æ–∫ —ñ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ aiogram 3.x.