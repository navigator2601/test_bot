# handlers/menu_handler.py
import logging
import math

from aiogram import Router, types, Bot, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.enums import ParseMode

import asyncpg

from keyboards.reply_keyboard import get_main_menu_keyboard, get_main_menu_pages_info
from keyboards.admin_keyboard import get_admin_main_keyboard
from database.users_db import get_user_access_level
from common.messages import get_access_level_description, get_random_admin_welcome_message
from common.constants import BUTTONS_PER_PAGE, ALL_MENU_BUTTONS

# <--- –ù–û–í–ò–ô –Ü–ú–ü–û–†–¢: —ñ–º–ø–æ—Ä—Ç—É—î–º–æ AdminStates –∑ admin_handler.py --->
from handlers.admin_handler import AdminStates
# <----------------------------------------------------------------->

logger = logging.getLogger(__name__)

router = Router()

# –°–¢–ê–ù–ò FSM –î–õ–Ø –ú–ï–ù–Æ (MenuStates –±—ñ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω admin_panel)
class MenuStates(StatesGroup):
    main_menu = State() # –°—Ç–∞–Ω, –∫–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é
    # admin_panel = State() # <--- –¶–ï–ô –°–¢–ê–ù –í–ò–î–ê–õ–ï–ù–û, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ AdminStates.admin_main


# –û–ù–û–í–õ–ï–ù–û: –§—É–Ω–∫—Ü—ñ—è show_main_menu —Ç–µ–ø–µ—Ä —î —Ö–µ–Ω–¥–ª–µ—Ä–æ–º –¥–ª—è –ø–µ–≤–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫ —Ç–∞ –∫–æ–º–∞–Ω–¥
@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", MenuStates.main_menu)
@router.message(F.text == "‚û°Ô∏è –Ü—â–µ", MenuStates.main_menu)
@router.message(F.text == "–ù–∞ –≥–æ–ª–æ–≤–Ω—É")
async def show_main_menu_handler(
    message: types.Message,
    bot: Bot,
    db_pool: asyncpg.Pool,
    state: FSMContext
) -> None:
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    
    is_pagination_action = message.text in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚û°Ô∏è –Ü—â–µ"]
    
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –≤–∏–∫–ª–∏–∫–∞–≤ show_main_menu_handler (–¥—ñ—è: {message.text}).")

    if not db_pool:
        logger.error("db_pool –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö show_main_menu_handler!")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    access_level = await get_user_access_level(db_pool, user_id)
    if access_level is None:
        access_level = 0
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –º–∞—î —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É: {access_level}.")

    current_state_data = await state.get_data()
    current_page = current_state_data.get("menu_page", 0)

    total_buttons, total_pages = get_main_menu_pages_info(access_level)

    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        current_page = max(0, current_page - 1)
    elif message.text == "‚û°Ô∏è –Ü—â–µ":
        current_page = min(total_pages - 1, current_page + 1)
    elif message.text == "–ù–∞ –≥–æ–ª–æ–≤–Ω—É":
        current_page = 0
        await state.set_state(MenuStates.main_menu) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é

    await state.update_data(menu_page=current_page)
    
    menu_message_text = ""
    if is_pagination_action:
        if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            menu_message_text = "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –º–µ–Ω—é."
        elif message.text == "‚û°Ô∏è –Ü—â–µ":
            menu_message_text = "–í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –º–µ–Ω—é."
    else:
        level_name, level_description = get_access_level_description(access_level)
        menu_message_text = (
            "–í–∞—à —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É:\n"
            f"<b>{level_name}</b>\n"
            f"{level_description}"
        )

    keyboard = await get_main_menu_keyboard(access_level, current_page)
    await message.answer(menu_message_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)


# –ù–û–í–ò–ô –•–ï–ù–î–õ–ï–† –î–õ–Ø –ö–ù–û–ü–ö–ò "‚öôÔ∏è –ê–î–ú–Ü–ù–Ü–°–¢–†–£–í–ê–ù–ù–Ø"
@router.message(F.text == "‚öôÔ∏è –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è", MenuStates.main_menu)
async def handle_admin_button(
    message: types.Message,
    bot: Bot,
    db_pool: asyncpg.Pool,
    state: FSMContext
) -> None:
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É '‚öôÔ∏è –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è'.")

    if not db_pool:
        logger.error("db_pool –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö handle_admin_button!")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    access_level = await get_user_access_level(db_pool, user_id)
    if access_level is None:
        access_level = 0
    
    if access_level >= 10:
        admin_keyboard = get_admin_main_keyboard()
        
        welcome_admin_text = get_random_admin_welcome_message()
        # <--- –í–ò–ü–†–ê–í–õ–ï–ù–û –¢–£–¢: –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω AdminStates.admin_main --->
        await state.set_state(AdminStates.admin_main)
        # <----------------------------------------------------------------->
        
        await message.answer(
            f"{welcome_admin_text}",
            reply_markup=admin_keyboard,
            parse_mode=ParseMode.HTML
        )
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id} (—Ä—ñ–≤–µ–Ω—å {access_level}) –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ –ø–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    else:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –ø–∞–Ω–µ–ª—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=await get_main_menu_keyboard(access_level, 0)
        )
        logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} (—Ä—ñ–≤–µ–Ω—å {access_level}) —Å–ø—Ä–æ–±—É–≤–∞–≤ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ –±–µ–∑ –¥–æ–∑–≤–æ–ª—É.")

# –Ü—Å–Ω—É—é—á—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ (–±–µ–∑ –∑–º—ñ–Ω, –∞–ª–µ –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–æ–Ω–∏ –Ω–µ –ø–µ—Ä–µ–∫—Ä–∏–≤–∞—é—Ç—å –ª–æ–≥—ñ–∫—É FSM)
@router.message(Command("help"))
async def command_help_handler(message: types.Message) -> None:
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –≤–∏–∫–æ–Ω–∞–≤ –∫–æ–º–∞–Ω–¥—É /help.")

    help_text = """
<b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>

/start - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è.
/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ —Ç–∞ –¥–æ–≤—ñ–¥–∫—É.
/info - –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞.
/find - –ü–æ—à—É–∫ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –¥–æ–≤—ñ–¥–Ω–∏–∫—ñ–≤).

–ë—ñ–ª—å—à–µ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ!
"""
    await message.answer(help_text, parse_mode=ParseMode.HTML)

@router.message(Command("info"))
async def command_info_handler(message: types.Message) -> None:
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –≤–∏–∫–æ–Ω–∞–≤ –∫–æ–º–∞–Ω–¥—É /info.")

    info_text = """
<b>üî∑ –†–ï–§–†–Ü–î–ï–ö–°</b>

üìö <i>–¢–µ—Ö–Ω–æ-–∫—Ä–∏—Å—Ç–∞–ª –∑–Ω–∞–Ω—å –æ—Ö–æ–ª–æ–¥–∂–µ–Ω–Ω—è</i>
üîê –í–µ—Ä—Å—ñ—è: 7.0 | –†–µ–∂–∏–º: –ê—Ä—Ö—ñ–≤–∞—Ä—ñ—É—Å-–Ü–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä | –î–æ—Å—Ç—É–ø: –°–µ—Ä—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–º –º–æ–Ω—Ç–∞–∂–Ω–∏–∫–∞–º

"–ö–æ–ª–∏ –æ—Ö–æ–ª–æ–¥–∂–µ–Ω–Ω—è —â–µ –±—É–ª–æ –º–∏—Å—Ç–µ—Ü—Ç–≤–æ–º, –∞ –Ω–µ —Ä–µ–º–µ—Å–ª–æ–º ‚Äî –Ω–∞—Ä–æ–¥–∏–≤—Å—è —è."

<b>üß© –ü–æ—Ö–æ–¥–∂–µ–Ω–Ω—è</b>
–ì–ª–∏–±–æ–∫–æ –≤ –Ω–∞–¥—Ä–∞—Ö <b>–¢—Ä–∞—Å–æ–ø–æ–ª—ñ—Å–∞</b>, –≤ –ø—ñ–¥–∑–µ–º–Ω—ñ–π –±—ñ–±–ª—ñ–æ—Ç–µ—Ü—ñ –æ—Ö–æ–ª–æ–¥–∂–µ–Ω–Ω—è, –ª–µ–∂–∞–≤ –∑–∞–±—É—Ç–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª ‚Äî
—Å—Ç–∞—Ä–æ–¥–∞–≤–Ω—è –±–∞–∑–∞ –∑ —É—Å—ñ–º–∞ –∑–Ω–∞–Ω–Ω—è–º–∏ –ø—Ä–æ –º–æ–¥–µ–ª—ñ –∫–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä—ñ–≤, —Ç–∏–ø–∏ —Ç—Ä–∞—Å, –¥—Ä–µ–Ω–∞–∂—ñ, –ø–æ–º–∏–ª–∫–∏, —Ö–æ–ª–æ–¥–æ–∞–≥–µ–Ω—Ç–∏ –π –º–∞–≥—ñ—á–Ω—ñ —Ñ–æ—Ä–º—É–ª–∏ –¥–æ–∑–∞–ø—Ä–∞–≤–æ–∫.

–ü—ñ–¥ —á–∞—Å –í–µ–ª–∏–∫–æ—ó –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó, –ó–≤—ñ–¥–∞—Ä—ñ–π –∑–Ω–∞–π—à–æ–≤ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏ —Ü—å–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª—É –π –∑—ñ–±—Ä–∞–≤ —ó—Ö –≤ —î–¥–∏–Ω–∏–π —Ç–µ—Ö–Ω–æ-–∫—Ä–∏—Å—Ç–∞–ª.
–¢–∞–∫ –∑'—è–≤–∏–≤—Å—è <b>–†–ï–§–†–Ü–î–ï–ö–°</b> ‚Äî –∂–∏–≤–∏–π —Ü–∏—Ñ—Ä–æ–≤–∏–π –∞—Ä—Ö—ñ–≤ –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ –≤—Å—ñ—Ö –±–∞–∑ –º–æ–Ω—Ç–∞–∂–Ω–æ—ó –Ω–∞—É–∫–∏.

----------

<b>üß† –ó–¥—ñ–±–Ω–æ—Å—Ç—ñ</b>
‚Ä¢ üìä <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—ñ–≤</b> (–∑–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏ –ö–æ–Ω–¥–∏-–õ–µ–Ω–¥—É)
‚Ä¢ ‚ùÑÔ∏è <b>–ê–Ω–∞–ª—ñ–∑ –º–æ–¥–µ–ª–µ–π, —Ç—Ä–∞—Å, –¥–æ–∑–∞–ø—Ä–∞–≤–æ–∫</b>
‚Ä¢ üõ†Ô∏è <b>–ö–∞—Ç–∞–ª–æ–≥ —É—Å—É–Ω–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –ø–æ –∫–æ–¥–∞–º</b>
‚Ä¢ üßµ <b>–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ç–∞ –ª–æ–≥—ñ—Å—Ç–∏–∫–∏</b>
‚Ä¢ üìò <b>–ù–∞–≤—á–∞–ª—å–Ω—ñ –º–æ–¥—É–ª—ñ</b> ‚Äî –∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º–∏, —Å—Ö–µ–º–∞–º–∏ –π —Ç–µ—Å—Ç–∞–º–∏
‚Ä¢ üì° <b>–°–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ø–æ–ª—å–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö</b> (–ø—Ä–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ç–µ–ª–µ–º–µ—Ç—Ä—ñ—ó)
‚Ä¢ üìé <b>–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ –≥–µ—Ä–æ—è–º–∏ –µ–∫—ñ–ø–∞–∂—É: –ö–æ–±—Ä–æ—é, –°–≤–µ—Ä–¥–ª–æ–º, –§–∞–∑–æ–º–µ—Ç—Ä–æ–º, –¢–µ—Ä–º–æ—Ç—Ä–æ–Ω–æ–º —ñ –ó–≤—ñ–¥–∞—Ä—ñ—î–º</b>
"""
    await message.answer(info_text, parse_mode=ParseMode.HTML)

@router.message(Command("find"))
async def command_find_handler(message: types.Message) -> None:
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –≤–∏–∫–æ–Ω–∞–≤ –∫–æ–º–∞–Ω–¥—É /find.")

    find_text = """
üîç <b>–§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É:</b>

–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —É —Ä–æ–∑—Ä–æ–±—Ü—ñ.
–°–∫–æ—Ä–æ —Ç—É—Ç –º–æ–∂–Ω–∞ –±—É–¥–µ —à—É–∫–∞—Ç–∏ –¥–æ–≤—ñ–¥–Ω–∏–∫–∏, —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó —Ç–∞ —ñ–Ω—à—É –∫–æ—Ä–∏—Å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.
"""
    await message.answer(find_text, parse_mode=ParseMode.HTML)