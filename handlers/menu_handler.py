# –§–∞–π–ª: handlers/menu_handler.py
# –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –∫–Ω–æ–ø–æ–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é —Ç–∞ –∫–æ–º–∞–Ω–¥.
# –ú—ñ—Å—Ç–∏—Ç—å –ª–æ–≥—ñ–∫—É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó, –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ —Ç–∞ –Ω–æ–≤–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –ø–æ—à—É–∫—É.

import logging
import math

from aiogram import Router, types, Bot, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

import asyncpg

from keyboards.reply_keyboard import get_main_menu_keyboard, get_main_menu_pages_info, get_cancel_keyboard
from keyboards.admin_keyboard import get_admin_main_keyboard
from database.users_db import get_user_access_level
#from database.db_search_functions import find_in_database, format_search_results
from common.messages import (
    get_access_level_description,
    get_random_admin_welcome_message,
    HELP_MESSAGE_TEXT,
    INFO_MESSAGE_TEXT,
    FIND_MESSAGE_TEXT,
    SEARCH_PROMPT,
    SEARCH_NO_RESULTS
)
from common.constants import BUTTONS_PER_PAGE, ALL_MENU_BUTTONS, ACCESS_LEVEL_BUTTONS

from common.states import AdminStates, MenuStates

logger = logging.getLogger(__name__)

router = Router()

# –¶–ï–ô –û–ë–†–û–ë–ù–ò–ö –ú–ê–Ñ –ë–£–¢–ò –ü–ï–†–®–ò–ú!
# –í—ñ–Ω –±—É–¥–µ —Å–ø—Ä–∞—Ü—å–æ–≤—É–≤–∞—Ç–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è "–∫–∞—Ç–∞–ª–æ–≥"
@router.message(F.text.lower() == "–∫–∞—Ç–∞–ª–æ–≥")
async def show_catalog_from_text_handler(message: types.Message, db_pool: asyncpg.Pool, state: FSMContext):
    """
    –û–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç –Ω–∞ –ø–æ–∫–∞–∑ –∫–∞—Ç–∞–ª–æ–≥—É, –≤–≤–µ–¥–µ–Ω–∏–π –≤—Ä—É—á–Ω—É.
    """
    await show_catalog_handler(message, db_pool, state)



@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", MenuStates.main_menu)
@router.message(F.text == "‚û°Ô∏è –Ü—â–µ", MenuStates.main_menu)
@router.message(F.text == "–ù–∞ –≥–æ–ª–æ–≤–Ω—É", MenuStates.any)
async def show_main_menu_handler(
    message: types.Message,
    bot: Bot,
    db_pool: asyncpg.Pool,
    state: FSMContext
) -> None:
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    
    is_pagination_action_forward = message.text == "‚û°Ô∏è –Ü—â–µ"
    is_pagination_action_backward = message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    is_main_menu_return = message.text == "–ù–∞ –≥–æ–ª–æ–≤–Ω—É"
    is_initial_menu_entry = not (is_pagination_action_forward or is_pagination_action_backward or is_main_menu_return)

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –≤–∏–∫–ª–∏–∫–∞–≤ show_main_menu_handler (–¥—ñ—è: {message.text}).")

    if not db_pool:
        logger.error("db_pool –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö show_main_menu_handler!")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    access_level = await get_user_access_level(db_pool, user_id)
    if access_level is None:
        access_level = 0
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –º–∞—î —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É: {access_level}.")

    current_state_data = await state.get_data()
    current_page = current_state_data.get("menu_page", 0)

    total_buttons, total_pages = get_main_menu_pages_info(access_level)

    if is_pagination_action_backward:
        current_page = max(0, current_page - 1)
    elif is_pagination_action_forward:
        current_page = min(total_pages - 1, current_page + 1)
    elif is_main_menu_return:
        current_page = 0
        await state.set_state(MenuStates.main_menu)

    await state.update_data(menu_page=current_page)
    
    menu_message_text = ""
    if is_main_menu_return or is_initial_menu_entry:
        level_name, level_description = get_access_level_description(access_level, ACCESS_LEVEL_BUTTONS)
        menu_message_text = (
            "–í–∞—à —Ä—ñ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø—É:\n"
            f"<b>{level_name}</b>\n"
            f"{level_description}"
        )
    elif is_pagination_action_forward:
        menu_message_text = "–í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –º–µ–Ω—é."
    elif is_pagination_action_backward:
        menu_message_text = "–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –º–µ–Ω—é."
    
    keyboard = await get_main_menu_keyboard(access_level, current_page)
    await message.answer(menu_message_text, reply_markup=keyboard, parse_mode=ParseMode.HTML)


# –ù–û–í–ò–ô –û–ë–†–û–ë–ù–ò–ö: –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ü–æ—à—É–∫"
@router.message(F.text == "üïµÔ∏è –ü–æ—à—É–∫", MenuStates.main_menu)
async def open_search_menu_handler(message: types.Message, state: FSMContext) -> None:
    """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ä–µ–∂–∏–º –ø–æ—à—É–∫—É."""
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –ø–µ—Ä–µ–π—à–æ–≤ —É —Ä–µ–∂–∏–º –ø–æ—à—É–∫—É.")
    await state.set_state(MenuStates.find)
    await message.answer(SEARCH_PROMPT, reply_markup=get_cancel_keyboard(), parse_mode=ParseMode.MARKDOWN)

# –ù–û–í–ò–ô –û–ë–†–û–ë–ù–ò–ö: –û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Ç —É —Å—Ç–∞–Ω—ñ –ø–æ—à—É–∫—É
@router.message(F.text, MenuStates.find)
async def handle_search_query(message: types.Message, db_pool: asyncpg.Pool, state: FSMContext) -> None:
    """–û—Ç—Ä–∏–º—É—î –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç, —à—É–∫–∞—î –≤ –ë–î —ñ –≤–∏–≤–æ–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    user_query = message.text
    user_id = message.from_user.id
    
    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏—Ä—ñ—à–∏–≤ —Å–∫–∞—Å—É–≤–∞—Ç–∏ –ø–æ—à—É–∫
    if user_query.lower() == "—Å–∫–∞—Å—É–≤–∞—Ç–∏":
        await state.set_state(MenuStates.main_menu)
        keyboard = await get_main_menu_keyboard(db_pool, user_id)
        await message.answer("–ü–æ—à—É–∫ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=keyboard)
        return

    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥—ñ—Å–ª–∞–≤ –ø–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç: '{user_query}'.")

    # –¢—É—Ç –º–∏ –≤–∏–∫–ª–∏–∫–∞—î–º–æ –≤–∞—à—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø–æ—à—É–∫—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    search_results = await find_in_database(db_pool, user_query)
    
    if search_results:
        # –í–∞—à –ø—Ä–∏–∫–ª–∞–¥ –∑ —Ç–∞–±–ª–∏—Ü–µ—é
        # –í–∏–≤–æ–¥–∏–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —è–∫ –¥–æ–±—Ä–µ –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω—É —Ç–∞–±–ª–∏—Ü—é –∞–±–æ —Å–ø–∏—Å–æ–∫
        formatted_results = format_search_results(search_results)
        await message.answer(
            f"**–ó–Ω–∞–π–¥–µ–Ω–æ {len(search_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤:**\n\n"
            f"{formatted_results}",
            reply_markup=get_cancel_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await message.answer(SEARCH_NO_RESULTS, reply_markup=get_cancel_keyboard())


@router.message(F.text == "‚öôÔ∏è –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è", MenuStates.main_menu)
async def handle_admin_button(
    message: types.Message,
    bot: Bot,
    db_pool: asyncpg.Pool,
    state: FSMContext
) -> None:
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É '‚öôÔ∏è –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è'.")

    if not db_pool:
        logger.error("db_pool –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö handle_admin_button!")
        await message.answer("–í–∏–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
        return

    access_level = await get_user_access_level(db_pool, user_id)
    if access_level is None:
        access_level = 0
    
    if access_level >= 10:
        admin_keyboard = get_admin_main_keyboard()
        
        welcome_admin_text = get_random_admin_welcome_message()
        await state.set_state(AdminStates.admin_main)
        
        await message.answer(
            f"{welcome_admin_text}",
            reply_markup=admin_keyboard,
            parse_mode=ParseMode.HTML
        )
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id} (—Ä—ñ–≤–µ–Ω—å {access_level}) –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ –ø–∞–Ω–µ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    else:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –ø–∞–Ω–µ–ª—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=await get_main_menu_keyboard(access_level, 0)
        )
        logger.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} (—Ä—ñ–≤–µ–Ω—å {access_level}) —Å–ø—Ä–æ–±—É–≤–∞–≤ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ –±–µ–∑ –¥–æ–∑–≤–æ–ª—É.")

@router.message(Command("help"))
async def command_help_handler(message: types.Message) -> None:
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –≤–∏–∫–æ–Ω–∞–≤ –∫–æ–º–∞–Ω–¥—É /help.")
    await message.answer(HELP_MESSAGE_TEXT, parse_mode=ParseMode.HTML)

@router.message(Command("info"))
async def command_info_handler(message: types.Message) -> None:
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –≤–∏–∫–æ–Ω–∞–≤ –∫–æ–º–∞–Ω–¥—É /info.")
    await message.answer(INFO_MESSAGE_TEXT, parse_mode=ParseMode.HTML)

@router.message(Command("find"))
async def command_find_handler(message: types.Message) -> None:
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_name} (ID: {user_id}) –≤–∏–∫–æ–Ω–∞–≤ –∫–æ–º–∞–Ω–¥—É /find.")
    await message.answer(FIND_MESSAGE_TEXT, parse_mode=ParseMode.HTML)