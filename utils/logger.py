# utils/logger.py
import logging
from logging.handlers import TimedRotatingFileHandler
import os
import datetime # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ datetime –¥–ª—è –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥
from config import config # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —î–¥–∏–Ω–∏–π –æ–±'—î–∫—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó

# --- –ö–∞—Å—Ç–æ–º–Ω–∏–π –∫–ª–∞—Å —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤ ---
class RefridexFormatter(logging.Formatter):
    def formatTime(self, record, datefmt=None):
        # –û—Ç—Ä–∏–º—É—î–º–æ —á–∞—Å –∑ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞–º–∏
        dt = datetime.datetime.fromtimestamp(record.created)
        if datefmt:
            s = dt.strftime(datefmt)
        else:
            s = dt.strftime("%Y-%m-%d %H:%M:%S")
        return f"{s}.{int(record.msecs):03d}"

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    FORMATS = {
        logging.DEBUG: "[Refridex OS ‚Ä¢ DEBUG ‚Ä¢ %(asctime)s] üêû –í—ñ–¥–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è: %(name)s ‚Ä¢ %(message)s",
        logging.INFO: "[Refridex OS ‚Ä¢ LOGCORE ‚Ä¢ %(asctime)s] üîπ –°—Ç–∞–Ω: %(name)s ‚Ä¢ %(message)s",
        logging.WARNING: "[Refridex OS ‚Ä¢ –£–í–ê–ì–ê ‚Ä¢ %(asctime)s] ‚ö†Ô∏è –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: %(name)s ‚Ä¢ %(message)s",
        logging.ERROR: "[Refridex OS ‚Ä¢ –ü–û–ú–ò–õ–ö–ê ‚Ä¢ %(asctime)s] ‚ùå –ü–æ–º–∏–ª–∫–∞: %(name)s ‚Ä¢ %(message)s",
        logging.CRITICAL: "[Refridex OS ‚Ä¢ –ö–†–ò–¢–ò–ß–ù–û ‚Ä¢ %(asctime)s] üí• –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: %(name)s ‚Ä¢ %(message)s"
    }

    def format(self, record):
        # –û–±–∏—Ä–∞—î–º–æ —Ñ–æ—Ä–º–∞—Ç –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä—ñ–≤–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
        log_fmt = self.FORMATS.get(record.levelno, self.FORMATS[logging.INFO]) # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º INFO
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç–µ—Ä –∑ –≤–∏–±—Ä–∞–Ω–∏–º —à–∞–±–ª–æ–Ω–æ–º
        formatter = logging.Formatter(log_fmt)
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω–∏–π formatTime
        formatter.formatTime = self.formatTime
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –∑–∞–ø–∏—Å
        return formatter.format(record)
# --- –ö—ñ–Ω–µ—Ü—å –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∫–ª–∞—Å—É —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤ ---


def setup_logging():
    """
    –ù–∞–ª–∞—à—Ç–æ–≤—É—î –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –±–æ—Ç–∞, –≤–∫–ª—é—á–∞—é—á–∏ —Ñ–∞–π–ª–æ–≤–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –≤–∏–≤—ñ–¥ —É –∫–æ–Ω—Å–æ–ª—å.
    –õ–æ–≥—É—î –≤—Å—ñ –ø–æ–¥—ñ—ó, –ø–æ—á–∏–Ω–∞—é—á–∏ –∑ —Ä—ñ–≤–Ω—è DEBUG.
    """
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –ª–æ–≥—ñ–≤, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î.
    os.makedirs(config.logs_dir, exist_ok=True)

    # –ì–æ–ª–æ–≤–Ω–∏–π –ª–æ–≥–µ—Ä
    main_logger = logging.getLogger()
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π —Ä—ñ–≤–µ–Ω—å –¥–ª—è –≤—Å—ñ—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ (–¥–ª—è main_logger)
    main_logger.setLevel(logging.DEBUG) 

    # –Ø–∫—â–æ –≤–∂–µ —î –æ–±—Ä–æ–±–Ω–∏–∫–∏, –≤–∏–¥–∞–ª—è—î–º–æ —ó—Ö, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è
    if main_logger.hasHandlers():
        main_logger.handlers.clear()

    # –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—à–æ–≥–æ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–µ—Ä–∞
    refridex_formatter = RefridexFormatter()

    # 1. –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–∏–≤–æ–¥—É –≤ –∫–æ–Ω—Å–æ–ª—å (StreamHandler)
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO) # –£ –∫–æ–Ω—Å–æ–ª—å –≤–∏–≤–æ–¥–∏–º–æ –≤—ñ–¥ INFO —ñ –≤–∏—â–µ
    console_handler.setFormatter(refridex_formatter) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–∞—Å—Ç–æ–º–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç–µ—Ä
    main_logger.addHandler(console_handler)

    # 2. –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å—É –ª–æ–≥—ñ–≤ –±–æ—Ç–∞ —É —Ñ–∞–π–ª (TimedRotatingFileHandler)
    bot_file_handler = TimedRotatingFileHandler(
        config.bot_log_file,
        when="midnight",
        interval=1,
        backupCount=7,
        encoding='utf-8'
    )
    bot_file_handler.setLevel(logging.DEBUG) # –£ —Ñ–∞–π–ª –±–æ—Ç–∞ –ø–∏—à–µ–º–æ –≤—Å–µ –≤—ñ–¥ DEBUG
    bot_file_handler.setFormatter(refridex_formatter) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–∞—Å—Ç–æ–º–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç–µ—Ä
    main_logger.addHandler(bot_file_handler)

    # 3. –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å—É –ª–æ–≥—ñ–≤ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤—Ö–æ–¥—É Telethon (–º–æ–∂–µ –±—É—Ç–∏ –æ–∫—Ä–µ–º–∏–º)
    login_file_handler = TimedRotatingFileHandler(
        config.last_login_log_file,
        when="midnight",
        interval=1,
        backupCount=7,
        encoding='utf-8'
    )
    login_file_handler.setLevel(logging.INFO) # –£ —Ñ–∞–π–ª –ª–æ–≥—É –≤—Ö–æ–¥—É –ø–∏—à–µ–º–æ –≤—ñ–¥ INFO
    login_file_handler.setFormatter(refridex_formatter) # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–∞—Å—Ç–æ–º–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç–µ—Ä
    main_logger.addHandler(login_file_handler)

    # –î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤—ñ–¥ –±—ñ–±–ª—ñ–æ—Ç–µ–∫ (–∑–Ω–∏–∂—É—î–º–æ —Ä—ñ–≤–µ–Ω—å, —â–æ–± –Ω–µ –±—É–ª–æ –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —à—É–º—É)
    logging.getLogger('telethon').setLevel(logging.WARNING)
    logging.getLogger('aiogram').setLevel(logging.WARNING)
    logging.getLogger('asyncpg').setLevel(logging.WARNING)
    logging.getLogger('sqlalchemy.engine').setLevel(logging.WARNING)
    logging.getLogger('sqlalchemy.pool').setLevel(logging.WARNING)

    # –ó–∞–∫–æ–º–µ–Ω—Ç—É—î–º–æ print("–õ–æ–≥—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ."), –æ—Å–∫—ñ–ª—å–∫–∏ —Ç–µ–ø–µ—Ä —Ü–µ –±—É–¥–µ –ª–æ–≥—É–≤–∞—Ç–∏—Å—è
    # —ñ–Ω–∞–∫—à–µ –º–∏ –ø–æ–±–∞—á–∏–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π print –ø–µ—Ä–µ–¥ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–º –ª–æ–≥–æ–º.
    # print("–õ–æ–≥—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ.")
    logging.getLogger(__name__).info("–õ–æ–≥—É–≤–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ.") # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–≥–µ—Ä –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

# –Ø–∫—â–æ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è
if __name__ == '__main__':
    setup_logging()
    # –ü—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ª–æ–≥–µ—Ä–∞:
    # –û—Ç—Ä–∏–º—É—î–º–æ –ª–æ–≥–µ—Ä –¥–ª—è —Ü—å–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª—É
    test_logger = logging.getLogger(__name__) 
    test_logger.debug("–¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è DEBUG")
    test_logger.info("–¶–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è INFO")
    test_logger.warning("–¶–µ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è (WARNING)")
    test_logger.error("–¶–µ –ø–æ–º–∏–ª–∫–∞ (ERROR)")
    test_logger.critical("–¶–µ –∫—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ (CRITICAL)")
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ config.logs_dir, —è–∫–∏–π –≤–∂–µ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ
    test_logger.info(f"–õ–æ–≥–∏ –º–æ–∂–Ω–∞ –∑–Ω–∞–π—Ç–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: {config.logs_dir}")